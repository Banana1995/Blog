<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小蚂蚁爱吃香蕉</title>
  
  <subtitle>It&#39;s what you do in the dark puts you in the light</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-10T12:02:35.036Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小蚂蚁爱吃香蕉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git以及TortoiseGit安装使用</title>
    <link href="http://yoursite.com/2018/06/10/Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2018/06/10/Git使用手册/</id>
    <published>2018-06-10T12:02:12.000Z</published>
    <updated>2018-06-10T12:02:35.036Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-下载安装Git-2-8-3-64-bit-exe程序"><a href="#1-下载安装Git-2-8-3-64-bit-exe程序" class="headerlink" title="1. 下载安装Git-2.8.3-64-bit.exe程序"></a>1. 下载安装Git-2.8.3-64-bit.exe程序</h4><ul><li>默认选项一直next即可。</li></ul><ul><li><p>本地初始化git的配置项，设置username和email，使用如下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"abc"</span></span><br><span class="line">git config --global user.email <span class="string">"123abc@163.com"</span></span><br></pre></td></tr></table></figure></li></ul><p>–global 表示全局属性，所有的git项目都会公用这个属性。因为Git是分布式版本控制系统，需要一个用户名和email作为一个标识。</p><a id="more"></a><h4 id="2-配置ssh-key"><a href="#2-配置ssh-key" class="headerlink" title="2. 配置ssh key"></a>2. 配置ssh key</h4><ul><li><p><strong>生成秘钥对</strong> </p><p>在Git Bash中输入以下命令 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;123abc@163.com&quot;</span><br></pre></td></tr></table></figure><p>之后可以不用设置密码，按下3个回车键即可。接下来可以去默认路径 <code>C:\Users\banana\.ssh</code>下查看生成的两个文件，分别为 私钥：<code>id_rsa</code> 公钥：<code>id_rsa.pub</code> </p><p><img src="/2018/06/10/Git使用手册/微信截图_20180324002602.png" alt=""></p></li><li><p>​ <strong>添加公钥到远程仓库</strong><br>打开GitHub主页，在<code>Settings</code>–&gt;<code>SSH and GPG keys</code>中，点击<code>New SSH key</code> 按钮；</p><p>再打开公钥文件，将其中的字符串完整复制，粘贴到<code>key</code> 中</p><p><img src="/2018/06/10/Git使用手册/微信截图_20180324002258.png" alt=""></p><p>执行<code>ssh -T git@github.com</code> 命令，查看公钥是否配置成功了，如下图所示则表示成功：</p><p><img src="/2018/06/10/Git使用手册/微信截图_20180324213757.png" alt=""></p></li><li><p><strong>将私钥添加到自己的系统中</strong> </p><p>使用命令： <code>ssh-add ~/.ssh/id_rsa</code>  添加私钥至系统中，若无效的话，建议采取以下两种方法：</p><ol><li>先执行 <code>eval &#39;ssh-agent-s&#39;</code> 再执行 <code>ssh-add ~/.ssh/id_rsa</code> ；</li><li>先执行<code>ssh-agent bash --login -i</code> 启动bash，或者说把bash挂到ssh-agent下面，再执行 <code>ssh-add</code></li></ol><p>当看到下图所示结果时，则表示成功了</p></li></ul><p><img src="/2018/06/10/Git使用手册/微信截图_20180324003452.png" alt=""></p><h4 id="3-配置远程仓库"><a href="#3-配置远程仓库" class="headerlink" title="3. 配置远程仓库"></a>3. 配置远程仓库</h4><ul><li><p>登录github账号，新建一个远程仓库。</p></li><li><p>在本地建一个与仓库同名的文件夹，在文件夹中打开Git Bash，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# commang&quot; &gt;&gt; README.md</span><br><span class="line">新建一个README.md文件，写入“# commang”</span><br><span class="line">git init</span><br><span class="line">初始化git文件夹，创建master分支和.git文件夹</span><br><span class="line">git add README.md</span><br><span class="line">将工作区中的README.md文件添加进暂存区</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">将暂存区的文件提交到master分支上</span><br><span class="line">git remote add origin git@github.com:abc/gitTest.git</span><br><span class="line">配置远程仓库地址命名为origin</span><br><span class="line">git push -u origin master</span><br><span class="line">将本地master分支的数据push到远程仓库的master分支上</span><br></pre></td></tr></table></figure></li><li><p>若没能成功push去服务器的话，可以去检查下本地<code>.git</code> 文件夹下的<code>config</code> 文件，其中的url必须与上述命令中的远程地址相同。</p><p><img src="/2018/06/10/Git使用手册/微信截图_20180324141838.png" alt=""></p><h4 id="4-安装TortoiseGit-2-6-0-0-64bit-msi文件"><a href="#4-安装TortoiseGit-2-6-0-0-64bit-msi文件" class="headerlink" title="4.安装TortoiseGit-2.6.0.0-64bit.msi文件"></a>4.安装TortoiseGit-2.6.0.0-64bit.msi文件</h4></li></ul><p><a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">下载TortoiseGit和中文语言包</a></p><ul><li><p>默认选项一直next即可。</p></li><li><p>创建本地仓库，在文件夹中<code>右键--&gt;Git在这里创建版本库</code> （我使用的是中文版本），如下图：<br><img src="/2018/06/10/Git使用手册/微信截图_20180324214536.png" alt=""></p><p>不用勾选，直接确定即可。</p></li><li><p><strong>设置网络和远端</strong> </p><p><strong>1. <code>右键--&gt;设置</code> 将本地安装Git的ssh.exe路径地址配置到网络上，如下图：</strong></p><p><img src="/2018/06/10/Git使用手册/微信截图_20180324215326.png" alt=""></p><p>我的Git是安装在<code>C:\software\Git\</code>路径下 。</p><p><strong>2. 将远程仓库的地址粘贴到<code>URL</code>和<code>推送URL</code> 中，如下图：</strong></p><p><img src="/2018/06/10/Git使用手册/微信截图_20180324214754.png" alt=""></p></li><li><p>至此，你已经可以愉快的使用右键进行push和update了，但是会时不时遇到需要输入密码，但是你怎么输都不对的情况。</p></li></ul><h4 id="5-使用本地Pageant记住你的私钥密码"><a href="#5-使用本地Pageant记住你的私钥密码" class="headerlink" title="5. 使用本地Pageant记住你的私钥密码"></a>5. 使用本地<code>Pageant</code>记住你的私钥密码</h4><ol><li><p>开始菜单找到TortoiseGit菜单下的puttygen，打开puttygen</p><p><img src="/2018/06/10/Git使用手册/1.png" alt=""></p></li></ol><ol start="2"><li><p>选择导入秘钥</p><p><img src="/2018/06/10/Git使用手册/2.png" alt=""></p></li><li><p>选择C:\Users\Administrator.ssh目录下的私钥，并输入秘钥密码</p><p><img src="/2018/06/10/Git使用手册/3.png" alt=""></p><p><img src="/2018/06/10/Git使用手册/3.1.png" alt=""></p></li><li><p>选择save private key，将私钥另存为ppk格式的秘钥</p><p><img src="/2018/06/10/Git使用手册/4.png" alt=""></p><p><img src="/2018/06/10/Git使用手册/4.1.png" alt=""></p></li><li><p>开始菜单找到TortoiseGit菜单下的pageant，打开</p><p><img src="/2018/06/10/Git使用手册/5.png" alt=""></p></li><li><p>点击add key，选择ppk秘钥，输入密码</p><p><img src="/2018/06/10/Git使用手册/6.png" alt=""></p><p><img src="/2018/06/10/Git使用手册/6.1.png" alt=""></p><p>每次开机启动pagent并添加ppk秘钥</p></li><li><p>点击torise git – settings </p><p><img src="/2018/06/10/Git使用手册/7.png" alt=""></p></li><li><p>设置network—ssh的路径，设置为“C:\Program Files\TortoiseGit\bin\TortoisePlink.exe” </p><p><img src="/2018/06/10/Git使用手册/8.png" alt=""></p></li></ol><h4 id="6-使用过程遇到的问题"><a href="#6-使用过程遇到的问题" class="headerlink" title="6. 使用过程遇到的问题"></a>6. 使用过程遇到的问题</h4><ol><li><p><strong>在新文件下拉取远程仓库报错：You asked to pull from the remote ‘origin’, but did not specify:a branch. Because this is not the default configured remotefor your current branch, you must specify a branch on the command line.</strong></p><p>找到：<code>.git/config</code>文件 添加如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[branch &quot;master&quot;]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/master</span><br></pre></td></tr></table></figure></li><li><p><strong>在设置git远端地址时，尽量修改远端名称</strong> </p><p><img src="/2018/06/10/Git使用手册/C:/Users\banana\Pictures\微信截图_20180327222554.png" alt=""></p><p>如果不设置的话，在同一个文件夹下，新建两个文件夹，在这两个文件夹中分别拉取不同仓库的内容时就会报错</p></li><li><p><strong>当新建了一个空的远程仓库，本地创建了一个关联到远端地址的仓库后，不要尝试拉取，否则会报出<code>Couldn&#39;t find remote ref master</code>错误信息</strong></p></li><li><p><strong>idea使用Git时，需要配置ssh</strong></p><ul><li><strong>设置私钥地址</strong></li></ul><p><img src="/2018/06/10/Git使用手册/C:/Users\banana\Pictures\微信截图_20180327233928.png" alt=""></p><p>​</p><ul><li><strong>设置Git地址和SSH executable 为Native</strong></li></ul><p><img src="/2018/06/10/Git使用手册/C:/Users\banana\Pictures\微信截图_20180327234038.png" alt=""></p><ul><li><p><strong>设置github地址</strong></p><p><img src="/2018/06/10/Git使用手册/C:/Users\banana\Pictures\微信截图_20180327234303.png" alt=""></p></li></ul></li><li><p><strong>对于重命名改名字等操作都可以在本地，修改完后添加进版本控制再push到远端仓库即可</strong></p></li><li><p>对于在第2步中修改了本地远端的名称的操作，如果在idea中拉取代码的话，回报出这个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Can&apos;t Update</span><br><span class="line">No tracked branch configured for branch master or the branch doesn&apos;t exist.</span><br><span class="line">To make your branch track a remote branch call, for example,</span><br><span class="line">git branch --set-upstream-to origin/master master (show balloon)</span><br></pre></td></tr></table></figure><p>此时，可以执行命令<code>git branch --set-upstream-to origin-repo/master master</code> 意思是使我们在git设置的本地远程名称<code>origin-repo/master</code>追踪远程仓库的<code>master</code>分支</p><p>​</p><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-下载安装Git-2-8-3-64-bit-exe程序&quot;&gt;&lt;a href=&quot;#1-下载安装Git-2-8-3-64-bit-exe程序&quot; class=&quot;headerlink&quot; title=&quot;1. 下载安装Git-2.8.3-64-bit.exe程序&quot;&gt;&lt;/a&gt;1. 下载安装Git-2.8.3-64-bit.exe程序&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;默认选项一直next即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本地初始化git的配置项，设置username和email，使用如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;123abc@163.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;–global 表示全局属性，所有的git项目都会公用这个属性。因为Git是分布式版本控制系统，需要一个用户名和email作为一个标识。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="GIT" scheme="http://yoursite.com/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>Nginx安装部署web工程</title>
    <link href="http://yoursite.com/2018/05/30/Nginx%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2web%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/05/30/Nginx安装部署web工程/</id>
    <published>2018-05-30T14:24:24.808Z</published>
    <updated>2018-05-31T13:46:12.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><h3 id="1-下载依赖包"><a href="#1-下载依赖包" class="headerlink" title="1. 下载依赖包"></a>1. 下载依赖包</h3><ul><li><p>如果你的服务器可以连接网络的话可以直接通过命令的方式下载tar包</p><ol><li><p>下载PCRE库</p><p><code>wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz</code></p></li><li><p>下载zlib库</p><p><code>wget http://zlib.net/zlib-1.2.10.tar.gz</code></p></li><li><p>下载OpenSSL库</p><p><code>wget https://www.openssl.org/source/openssl-1.0.2o.tar.gz</code></p></li></ol><a id="more"></a></li><li><p>如果你的服务器无法联网，可以自行去上面的<code>wget</code>命令后面的地址下载对应的tar包文件，ftp路径也可以直接通过浏览器打开，再将他们传到服务器中。</p></li></ul><h3 id="2-安装依赖包"><a href="#2-安装依赖包" class="headerlink" title="2. 安装依赖包"></a>2. 安装依赖包</h3><ul><li><p>安装PCRE库</p><ul><li><p><code>tar -zxvf pcre-8.37.tar.gz</code> 先使用命令解压tar包</p></li><li><p><code>cd pcre-8.38</code> 进去解压后的文件目录</p></li><li><p><code>./configure</code> 运行初始化脚本</p><p><strong>如果此时你不是用root用户安装，或者希望指定安装根路径，可以使用<code>--prefix=</code>参数来指定安装路径</strong> </p><p>如：使用<code>./configure --prefix=/home/test/pcre</code>命令来指定将pcre安装到<code>/home/tese/pcre</code>目录下</p></li><li><p><code>make</code> 使用make命令尝试编译</p></li><li><p><code>make install</code> 编译安装</p></li></ul></li><li><p>安装zlib库</p><ul><li><p><code>tar -zxvf zlib-1.2.10.tar.gz</code> 先使用命令解压tar包</p></li><li><p><code>cd zlib-1.2.10</code> 进去解压后的文件目录</p></li><li><p><code>./configure</code> 运行初始化脚本</p><p><strong>如果此时你不是用root用户安装，或者希望指定安装根路径，可以使用<code>--prefix=</code>参数来指定安装路径</strong> </p><p>如：使用<code>./configure --prefix=/home/test/zlib</code>命令来指定将zlib安装到<code>/home/test/zlib</code>目录下</p></li><li><p><code>make</code> 使用make命令尝试编译</p></li><li><p><code>make install</code> 编译安装</p></li></ul></li><li><p>安装OpenSSL库</p><ul><li><code>tar -zxvf openssl-1.0.2o.tar.gz</code> 使用命令解压tar包即可</li></ul></li></ul><h3 id="3-安装Nginx"><a href="#3-安装Nginx" class="headerlink" title="3. 安装Nginx"></a>3. 安装Nginx</h3><h4 id="3-1-安装步骤"><a href="#3-1-安装步骤" class="headerlink" title="3.1 安装步骤"></a>3.1 安装步骤</h4><ul><li><p>先下载Nginx的tar包，我这里选择的是最新的稳定版<code>nginx-1.14.0.tar.gz</code></p><p>跟上面安装依赖包一样，如果你的服务器可以联网的话建议使用<code>wget http://nginx.org/download/nginx-1.14.0.tar.gz</code>命令来下载tar包；如果不能联网的话建议自己通过浏览器访问http地址下载</p></li><li><p><code>tar -zxvf nginx-1.14.0.tar.gz</code> 解压Nginx的tar包</p></li><li><p><code>cd nginx-1.14.0</code> 进入解压后的目录</p></li><li><p><code>./configure</code>运行初始化脚本</p><p><strong>注意：Nginx默认的安装路径是<code>/usr/local/nginx</code>,如果你不是使用root用户的话，就不能使用该路径。这里同样可以使用<code>--prefix=</code>参数来指定安装路径</strong> </p><p>同时，你可以使用<code>--with-pcre=/home/test/pcre-8.38</code>来指定pcre安装路径</p><p>使用<code>--with-zlib=/home/test/zlib</code>来指定zlib的安装路径</p></li><li><p><code>make</code> 使用make命令尝试编译</p></li><li><p><code>make install</code> 编译安装</p></li><li><p><code>cd sbin</code> 进入sbin目录下</p></li><li><p><code>./nginx</code> 启动Nginx  同时可以使用 <code>./nginx -s reload</code> 重启Nginx 使用<code>./nginx -s stop</code> 关停Nginx</p></li></ul><h4 id="3-2-Nginx常用编译选项"><a href="#3-2-Nginx常用编译选项" class="headerlink" title="3.2 Nginx常用编译选项"></a>3.2 Nginx常用编译选项</h4><blockquote><p>make是用来编译的，它从Makefile中读取指令，然后编译。</p><p>make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。</p><p>configure命令是用来检测你的安装平台的目标特征的。它定义了系统的各个方面，包括nginx的被允许使用的连接处理的方法，比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本，执行结束时，它会创建一个Makefile文件。nginx的configure命令支持以下参数：</p><ul><li><p><code>--prefix=*path*</code>    定义一个目录，存放服务器上的文件 ，也就是nginx的安装目录。默认使用 <code>/usr/local/nginx。</code></p></li><li><p><code>--sbin-path=*path*</code> 设置nginx的可执行文件的路径，默认为  <code>*prefix*/sbin/nginx</code>.</p></li><li><p><code>--conf-path=*path*</code>  设置在nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为<code>*prefix*/conf/nginx.conf</code>.</p></li><li><p><code>--pid-path=*path*  设置nginx.pid文件，将存储的主进程的进程号。安装完成后，可以随时改变的文件名 ， 在nginx.conf配置文件中使用 PID指令。默认情况下，文件名 为`</code><em>prefix</em>/logs/nginx.pid`.</p></li><li><p><code>--error-log-path=*path*</code> 设置主错误，警告，和诊断文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的error_log指令。默认情况下，文件名 为<code>*prefix*/logs/error.log</code>.</p></li><li><p><code>--http-log-path=*path*</code>  设置主请求的HTTP服务器的日志文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的access_log指令。默认情况下，文件名 为<code>*prefix*/logs/access.log</code>.</p></li><li><p><code>--user=*name*</code>  设置nginx工作进程的用户。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的用户名是nobody。</p></li><li><p><code>--group=*name*</code>  设置nginx工作进程的用户组。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的为非特权用户。</p></li><li><p><code>--with-select_module</code> <code>--without-select_module 启用或禁用构建一个模块来允许服务器使用select()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。</code></p></li><li><p><code>--with-poll_module</code> <code>--without-poll_module</code> 启用或禁用构建一个模块来允许服务器使用poll()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。</p></li><li><p><code>--without-http_gzip_module</code> — 不编译压缩的HTTP服务器的响应模块。编译并运行此模块需要zlib库。</p></li><li><p><code>--without-http_rewrite_module</code>  不编译重写模块。编译并运行此模块需要PCRE库支持。</p></li><li><p><code>--without-http_proxy_module</code> — 不编译http_proxy模块。</p></li><li><p><code>--with-http_ssl_module</code> — 使用https协议模块。默认情况下，该模块没有被构建。建立并运行此模块的OpenSSL库是必需的。</p></li><li><p><code>--with-pcre=*path*</code> — 设置PCRE库的源码路径。PCRE库的源码（版本4.4 - 8.30）需要从PCRE网站下载并解压。其余的工作是Nginx的./ configure和make来完成。正则表达式使用在location指令和 ngx_http_rewrite_module 模块中。</p></li><li><p><code>--with-pcre-jit</code> —编译PCRE包含“just-in-time compilation”（1.1.12中， pcre_jit指令）。</p></li><li><p><code>--with-zlib=*path*</code> —设置的zlib库的源码路径。要下载从 zlib（版本1.1.3 - 1.2.5）的并解压。其余的工作是Nginx的./ configure和make完成。ngx_http_gzip_module模块需要使用zlib 。</p></li><li><p><code>--with-cc-opt=*parameters*</code> — 设置额外的参数将被添加到CFLAGS变量。例如,当你在FreeBSD上使用PCRE库时需要使用:<code>--with-cc-opt=&quot;-I /usr/local/include。</code>.如需要需要增加 <code>select()支持的文件数量</code>:<code>--with-cc-opt=&quot;-D FD_SETSIZE=2048&quot;.</code></p></li><li><p><code>--with-ld-opt=*parameters*</code> —设置附加的参数，将用于在链接期间。例如，当在FreeBSD下使用该系统的PCRE库,应指定:<code>--with-ld-opt=&quot;-L /usr/local/lib&quot;.</code></p></li><li><p>典型实例(下面为了展示需要写在多行，执行时内容需要在同一行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   ./configure</span><br><span class="line">&gt;       --sbin-path=/usr/local/nginx/nginx</span><br><span class="line">&gt;       --conf-path=/usr/local/nginx/nginx.conf</span><br><span class="line">&gt;       --pid-path=/usr/local/nginx/nginx.pid</span><br><span class="line">&gt;       --with-http_ssl_module</span><br><span class="line">&gt;       --with-pcre=../pcre-4.4</span><br><span class="line">&gt;       --with-zlib=../zlib-1.1.3</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="部署web工程"><a href="#部署web工程" class="headerlink" title="部署web工程"></a>部署web工程</h2><h3 id="1-关于Nginx配置文件"><a href="#1-关于Nginx配置文件" class="headerlink" title="1. 关于Nginx配置文件"></a>1. 关于Nginx配置文件</h3><p>在部署web工程前，我们需要了解Nginx的配置文件。Nginx的配置文件存放在<code>nginx/conf/nginx.conf</code>。我们需要打开这个文件根据自己的web工程需求配置这个文件。</p><blockquote><p>在nginx配置文件中主要分为四部分：<code>main</code> 全局设置，<code>server</code>主机设置，<code>upstream</code>（上游服务器设置，主要为反向代理、负载均衡相关配置）和 <code>location</code>（URL匹配特定位置后的设置） main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。 </p></blockquote><p>先贴一个配置文件，再来按照这个文件进行说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line"></span><br><span class="line">#在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</span><br><span class="line"></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">#写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line">#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</span><br><span class="line">    sendfile        on;</span><br><span class="line">    # tcp_nopush     on;</span><br><span class="line">#长连接超时时间，单位是秒。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时 间保持连接会占用大量资源。</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">  # gzip压缩功能设置</span><br><span class="line"># 开启gzip压缩输出，减少网络传输</span><br><span class="line">    gzip on;</span><br><span class="line">#设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">#设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</span><br><span class="line">    gzip_buffers    4 16k;</span><br><span class="line">#gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</span><br><span class="line">    gzip_comp_level 6;</span><br><span class="line">#匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</span><br><span class="line">    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">    #和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。</span><br><span class="line">gzip_vary on;</span><br><span class="line">  </span><br><span class="line">  # http_proxy 设置</span><br><span class="line">#允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</span><br><span class="line">    client_max_body_size   10m;</span><br><span class="line">#缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">    client_body_buffer_size   128k;</span><br><span class="line">#nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">    proxy_connect_timeout   75;</span><br><span class="line">#连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</span><br><span class="line">    proxy_read_timeout   75;</span><br><span class="line">#设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点</span><br><span class="line">    proxy_buffer_size   4k;</span><br><span class="line">#proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均  在32k以下的话，这样设置</span><br><span class="line">    proxy_buffers   4 32k;</span><br><span class="line">#高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">    proxy_busy_buffers_size   64k;</span><br><span class="line">#当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。。</span><br><span class="line">    proxy_temp_file_write_size  64k;</span><br><span class="line">#指定将上面的临时文件写到哪那个目录。</span><br><span class="line">    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;</span><br><span class="line"></span><br><span class="line">  # 设定负载均衡后台服务器列表 </span><br><span class="line">    upstream  arc  &#123; </span><br><span class="line">              #ip_hash; </span><br><span class="line">              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  </span><br><span class="line">              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  # 很重要的虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">#虚拟主机监听的端口</span><br><span class="line">        listen       8001;</span><br><span class="line">#服务器名</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset utf-8;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        #对 / 所有做负载均衡+反向代理</span><br><span class="line">        location / &#123;</span><br><span class="line">   #定义服务器的默认网站根目录位置。</span><br><span class="line">            root   html;</span><br><span class="line">   #定义路径下默认访问的文件名</span><br><span class="line">            index  index.jsp index.html index.htm;</span><br><span class="line">   #请求转向arc定义的服务器列表，即反向代理，对应upstream负载均衡器。</span><br><span class="line">            proxy_pass        http://arc;</span><br><span class="line">   #下面这几个就这么设置吧  具体的我也不清楚</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header  Host  $host;</span><br><span class="line">            proxy_set_header  X-Real-IP  $remote_addr;  </span><br><span class="line">            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ## 其它虚拟主机，server 指令开始</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-部署前端工程"><a href="#2-部署前端工程" class="headerlink" title="2. 部署前端工程"></a>2. 部署前端工程</h3><p>将web项目上传到Nginx的安装目录中的<code>html</code>文件夹中。修改<code>nginx.conf</code>配置文件。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li><p>web端不能访问</p><p>检查防火墙是否关闭！关闭防火墙：<code>service iptables stop</code></p></li><li><p>非root用户报出<code>bind() to 0.0.0.0:80 failed (13:Permission denied)</code>错误</p><p>这是由于非root用户启动时，<code>nginx.conf</code>文件中配置的端口为<code>80</code>，而在Linux中只有root用户才能使用1024以下的端口。所以只要讲配置文件中的端口修改为1024以上即可。</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.nginx.cn/install" target="_blank" rel="noopener">Nginx安装</a></p><p><a href="https://blog.csdn.net/tototuzuoquan/article/details/47381907" target="_blank" rel="noopener">Nging下部署项目，配置文件修改</a></p><p><a href="http://seanlook.com/2015/05/17/nginx-install-and-config/" target="_blank" rel="noopener">nginx服务器安装及配置文件详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nginx安装&quot;&gt;&lt;a href=&quot;#Nginx安装&quot; class=&quot;headerlink&quot; title=&quot;Nginx安装&quot;&gt;&lt;/a&gt;Nginx安装&lt;/h2&gt;&lt;h3 id=&quot;1-下载依赖包&quot;&gt;&lt;a href=&quot;#1-下载依赖包&quot; class=&quot;headerlink&quot; title=&quot;1. 下载依赖包&quot;&gt;&lt;/a&gt;1. 下载依赖包&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果你的服务器可以连接网络的话可以直接通过命令的方式下载tar包&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载PCRE库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载zlib库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wget http://zlib.net/zlib-1.2.10.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载OpenSSL库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wget https://www.openssl.org/source/openssl-1.0.2o.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux环境" scheme="http://yoursite.com/categories/Linux%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>老无所依</title>
    <link href="http://yoursite.com/2018/05/27/%E8%80%81%E6%97%A0%E6%89%80%E4%BE%9D/"/>
    <id>http://yoursite.com/2018/05/27/老无所依/</id>
    <published>2018-05-27T11:40:59.000Z</published>
    <updated>2018-06-10T12:01:31.236Z</updated>
    
    <content type="html"><![CDATA[<p>天一给我推荐的科恩兄弟系列，反派发型很萌，又很聪明，演员是西班牙人，叫哈维尔巴登。把反派演的很有魅力，天一称之为影史上最难忘的反派之一，其实在我心里最好的反派依旧是小丑。</p><p><img src="/2018/05/27/老无所依/p551171670.jpg" alt="海报看起来有点恐怖，但其实跟恐怖惊悚都没关系，你看我都敢看~"></p><a id="more"></a><p><img src="/2018/05/27/老无所依/p1196957913.jpg" alt=""></p><p>一直没看懂为什么片名叫老无所依，但是很喜欢这张海报</p><p><img src="/2018/05/27/老无所依/p1303044912.jpg" alt=""></p><p>向来很喜欢红色，这张海报简直大爱</p><p><img src="/2018/05/27/老无所依/p1424911515.jpg" alt=""></p><p>看完电影你就知道为什么我要放这张图了，设计的很棒</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天一给我推荐的科恩兄弟系列，反派发型很萌，又很聪明，演员是西班牙人，叫哈维尔巴登。把反派演的很有魅力，天一称之为影史上最难忘的反派之一，其实在我心里最好的反派依旧是小丑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/05/27/老无所依/p551171670.jpg&quot; alt=&quot;海报看起来有点恐怖，但其实跟恐怖惊悚都没关系，你看我都敢看~&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="电影" scheme="http://yoursite.com/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="科恩兄弟" scheme="http://yoursite.com/tags/%E7%A7%91%E6%81%A9%E5%85%84%E5%BC%9F/"/>
    
  </entry>
  
  <entry>
    <title>关于第一次换工作的面试经验</title>
    <link href="http://yoursite.com/2018/05/27/%E5%85%B3%E4%BA%8E%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8D%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/05/27/关于第一次换工作的面试经验/</id>
    <published>2018-05-27T10:50:51.227Z</published>
    <updated>2018-05-27T11:22:33.109Z</updated>
    
    <content type="html"><![CDATA[<p>因为一直想去南方的城市。所以我决定离开恒生去深圳发展，于是在2018年3月份的时候开始计划准备离职，那时候我还在北京。当时已经跟我的主管老大提出离职的意向。离职的流程大概要走一个月左右，在这一个月的时间内，我开始准备一些面试的东西，主要还是java基础这一块。所以从那个时候起，我开始写一些笔记，然后参加一些面试，主要是想通过这种方式，来增加自己的面试经验,了解自己有哪些不足的地方。然后当时恒生也在招人，所以就跟着几个老同事一起面了几个开发。在这里记录一下，我从2018年4月份至2018年5月份，这一个多月的时间里，参加过的所有面试经历，还有碰到的一些的面试题以及我个人对面试这件事情的看法和总结。</p><a id="more"></a><h2 id="先锋支付"><a href="#先锋支付" class="headerlink" title="先锋支付"></a>先锋支付</h2><p><strong>面试流程</strong><br>先锋支付的面试流程是先参加笔试，笔试之后紧接着参加面试。这也是大多数公司都会采用的一种面试流程。当然也有很多公司追求效率直接让你参加面试。<br><strong>笔试和面试题</strong></p><ol><li><p>内连接，左连接，全连接之间的区别。</p></li><li><p>chmod 给文件授权和find命令的使用</p></li><li><p>如何在数据库每一秒钟都有数据写入的时候进行拆表。</p></li><li><p>spring scope？</p><p>这个问题经常遇到，我在目前工作的这家公司笔试的时候也遇到过。</p></li><li><p>spring动态代理 实现方式和配置</p></li><li><p>java的几种加密方式</p></li><li><p>定时任务的实现方式</p></li><li><p>final,finally,finalize这三者之间的区别。</p></li><li><p>策略模式，命令模式与模板模式之间的区别。</p></li></ol><h2 id="灵狮区块链"><a href="#灵狮区块链" class="headerlink" title="灵狮区块链"></a>灵狮区块链</h2><p><strong>面试流程</strong><br>这家公司是约的电话面试。面试官人很好，面试问到的内容，基本上都是关于java基础然后跟面试官聊的也比较久，双方对彼此都有一个比较好的了解。<br><strong>面试题</strong></p><ol><li><p>java内存模型，堆内存和栈内存的区别。</p></li><li><p>spring aop使用了什么设计模式? 关于spring aop的考察也是会经常遇到的问题。主要需要了解的就是spring aop的实现方式，它是通过动态代理实现的，然后面试官又会扩展的问道，动态代理有几种实现方式？</p></li><li><p>socket网络编程</p></li><li><p>如何实现线程之间的通信。</p><p>这里主要是看一下juc包的源码</p></li><li><p>hashmap的数据结构，以及实现方式。</p><p>关于这一块，我有写过它的源码分析文章。</p></li><li><p>mongodb与传统数据库有什么区别？</p><p>以及mangodb常用的命令这个问题我也遇到过很多次其实问的都不难，是一些比较基础的东西。</p></li><li><p>关于jpa的了解。</p><p>其实这里暴露了我的一个问题。我当时不知道jpa是啥。包括在后来的面试中，一个面试官问我关于orm的理解。其实我也不太清楚，orm是什么东西。所以在面试的时候，关于这些特别基础的常识性的东西，还是需要了解清楚。否则答不上来的话，会让人觉得你比较业余。而我当时，只顾着复习java基础的东西，关于框架这一块学习的不多。之前在公司，都是使用现成的框架，也没有去折腾过jpa，orm</p></li><li><p>查询sql语句优化。关于sq优化的问题我在很多面试中都遇到过。  </p></li><li><p>左连接，右连接，与内连接之间的区别？</p><p>这个问题我在之前的面试中就已经遇到过。</p></li><li><p>平时喜欢钻研的技术？</p><p>这个问题其实在很多公司面试的时候都会问到。很多面试官其实就是项目组的技术负责人，然后他们会考察你作为一个开发人员对于技术的热情。所以这个时候，如果你有写过一些，技术博客，或者看过一些源码，或者直接把github账号展现给面试官看的话，会是一个优势。</p></li></ol><h2 id="嘉联支付"><a href="#嘉联支付" class="headerlink" title="嘉联支付"></a>嘉联支付</h2><p><strong>面试流程</strong><br>嘉联支付的面试流程是先笔试，然后紧接着跟技术负责人聊。<br><strong>笔试和面试题</strong></p><ol><li><p>mybatis分页实现。</p><p>这个我之前在恒生的时候已经看过mybatis分页的源代码。这一块主要是通过分页插件拦截器实现的。</p></li><li><p>springaop原理。</p><p>这个问题我在上面遇到过。</p></li><li><p>对spring mvc和severlet的了解。</p><p>关于spring mvc这一块的东西在面试中还是会经常遇到的。因为我之前一直是做后台的开发，所以对前台mvc的东西了解的不多。去找工作面试的话，还是应该要全面一点，至少要了解一些常用的东西。要做到你知道这是一个什么东西，即使你不精通，但是哪怕你写过一个简单的demo。也比直接说，我不知道要强。</p></li><li><p>单例模式手写。</p><p>嘉联支付的笔试要求手写出单例模式。当时我并没有完整的写出来。程序里面忘了加static关键字。</p></li><li><p>zk分布式锁的实现。</p></li><li><p>sql去重有哪些方法。</p></li></ol><h2 id="软通动力"><a href="#软通动力" class="headerlink" title="软通动力"></a>软通动力</h2><p><strong>面试流程</strong><br>软通动力的面试也是先笔试再面试的形式。但是软通动力的面试官真的很不专业。所以不建议大家以后去这种，外包公司去面试，其实对于你刷面试经验并没有太大的帮助。因为你极有可能碰到的是一个非常不靠谱的面试官，他不懂得怎么面试。</p><p><strong>笔试和面试题</strong> </p><ol><li><p>说一下nginx如何部署。</p><p>这个我不会，没答上来。</p></li><li><p>为什么选用mongodb。</p><p>这个问题我当时直接说了一下mangodb，它解决了我们哪些业务场景的问题</p></li><li><p>查看数据库表用户命令。</p><p>这个问题我也没有答上来。</p></li><li><p>说一下spring MVC</p></li><li><p>说一下serverlet</p></li><li><p>说一下java这门语言</p><p>当面试官问出这些问题的时候，我其实是比较反感的。首先，面试一定是面试者和公司双方之间的交流。并不是单纯的面试官问面试者问题。所以，对于面试者来说，在一场面试中，他需要从面试官那里充分了解这个公司。所以经常有一些面试官会问，你有些什么想要从我这里获知的。对于面试官来说，他想要知道的是，面试者是否达到了自己这个岗位的要求。</p><p>因此当面试官问我怎么看java这门语言的时候。我觉得这种问题除了让面试官秀自己的优越感以外，其他毫无意义。即使我这个问题回答的再好，也并不能体现我开发技能有多好，最多只能体现出我对java这门语言的理解水平。</p></li></ol><ol start="7"><li><p>说一下java并发和多线程。</p><p>在回答这一题的时候，我直接说出了一种最简单的实现方式。后来我反思了一下，觉得我说得并不好，因为其实面试官肯定知道这种简单的东西，他希望的是你要答出他的痛点。你需要讲出多线程并发编程的时候，哪些需要注意的事项。这个也是我后来跟一个猎头朋友，还有一个技术负责人聊天的时候，他们给我的一点提示，对我的帮助还是很大的。</p></li></ol><p><strong>关于软通动力面试后的总结</strong><br>在经过了软通动力的面试之后，我自己反思了一下在这场面试中有哪些不足的地方？最后我得到的收获是，第一点对于自己原本就，不是太有兴趣的公司，应该直接不去面试，否则其实是浪费自己的时间。本来我是想通过面试来刷一下自己的面试经验。但是后来我发现，会经常碰到一些不太靠谱的面试官。就像软通动力的这个面试官一样，甚至我答完了面试官的问题之后，我还没有来得及问他一些关于公司的事情，他就直接让我在那里等结果。结果等了一个小时也没有结果。非常不尊重面试者。所以从那之后，任何外包公司的面试我一律不去。<br>第二点是，我没有回答好面试官的说一下XXX系列问题，其实这种问题很难回答，你可以往简单的说，也可以往复杂了说。而且因为这个问题不具体，你不知道面试官的痛点在哪里，很难把这个问题回答的很好。有水平的面试官，他会根据你说出的答案，不断的进行深挖。这样才能体现出你对一个技术点，了解的深度。然而在像软通动力这种外包公司里他们并不注重技术，所以他们的面试官，也不太会注重深挖你的技术。这也是我不建议大家去外包公司面试的原因。因为你有很大的概率会遇到这种麻瓜面试官。</p><h2 id="赢时胜"><a href="#赢时胜" class="headerlink" title="赢时胜"></a>赢时胜</h2><p><strong>面试流程</strong><br>赢时胜的面试流程也是先笔试再面试。<br><strong>面试过程</strong><br>面试官没有问太多技术性的问题，主要是针对笔试题问了些简单的问题，大多数时间聊的还是业务上的事情。因为我之前做的是银行的开发，刚好跟他们的一个现有的项目对口。所以后来赢时胜还是给我发了offer。但是这些大公司都会压你的工资。他们根据工作经验划分出不同的薪资水平，然后根据面试者的面试情况，压低面试者的薪资。他们的这种做法让我觉得很不喜欢，所以虽然后来拿了offer，但是也不是我期望的薪资，当时作为一个保底就先接受了。<br>这里也说一下关于，期望薪资的问题。我之前刷面试经验的时候会去面很多做外包的小公司，然后这些公司出于人力成本的考虑，本来就不会给岗位开出很高的薪资，但是他们会在，招聘信息上把薪资上限的很高。比如三年工作经验以内，给的薪资水平是9k到18k这种。其实他们真正能跟岗位开出的工资也就是9k左右，即使你面试的情况再好，也不可能到18k。当我带着13k期望薪资去面试他们这种岗位的时候，面试官看到你的期望薪资，其实就已经觉得你不太合适了。然后如果他们觉得你的面试情况好的话，肯定会压低你的薪资。</p><h2 id="木槿科技"><a href="#木槿科技" class="headerlink" title="木槿科技"></a>木槿科技</h2><p><strong>面试流程</strong><br>木槿科技的面试时先HR面，人力会跟你大体上聊一些离职原因，之前负责的工作，期望薪资这些。然后是技术负责人面试，他们没有笔试环节。<br><strong>面试题</strong></p><ol><li><p>你对ORM的了解</p><p>这里就再次丢脸了，没答出来</p></li><li><p>zk如何实现分布式锁</p><p>这个问题也是之前遇到过的</p></li><li><p>简述Jdbc的编程过程</p><p>这个我之前一直没有自己写过，都是通过使用Mybatis框架来做的这个事情。</p></li><li><p>Redis的几种数据结构</p></li><li><p>Hash型数据存储的基本使用命令</p><p>这个我之前看过这些简单的命令，但是当时忘了也没答上来。</p></li></ol><p><strong>木槿科技面试总结</strong></p><p>在面试木槿的时候遇到过几次很基础，很简单的问题没有答出来。而在这之前我准备的面试方向都是Java基础比较深入的应用。面试了这几家公司发现他们大多数其实问的内容都很简单，根本不会涉及到很深的原理性问题，也不会深挖技术细节。而很多很简单的概念其实我不是很清楚，之前也没关注过这些，所以导致了我很受挫，在面试的时候这种问题答不出来显得很业余。</p><h2 id="华锐金融"><a href="#华锐金融" class="headerlink" title="华锐金融"></a>华锐金融</h2><p><strong>面试流程</strong><br>华锐的面试也是采用先笔试后面试的方式进行<br><strong>面试和笔试题</strong></p><ol><li><p>一个文件里面包含很多个乱序不重复的电话号码，需要在20兆内存的空间内，将这些电话号码进行排序，并重新输出到另一个文件内。</p><p>这一题我没有做出来。</p></li><li><p>java内存模型中，堆内存和栈内存的区别。</p></li><li><p>垃圾回收算法</p></li><li><p>如何复制一个对内存中的对象？</p></li></ol><p><strong>华锐面试的总结</strong><br>其实一开始我笔试题做得并不好，技术面之后，我一度以为自己已经挂了。没想到后来人力资源，和面试官一起讨论了一下，觉得我还可以。紧接着后来就是人力资源给我介绍一下这家公司详细情况。介绍完之后，立马就进行了ceo面。跟ceo聊的很好，然后也了解了这个公司的团队情况，觉得非常厉害，也是我期望的那种工作团队。从面试体验也可以看出来，整个公司团队的，效率和执行力是非常高的。CEO非常尊重工程师，面试结束之后，亲自把我送到了电梯门口。面试是当天上午十点开始的，等结束的时候，快下午1点了。后来我回到家里，下午两三点的时候，人力给我发来录用通知，开出的薪资条件，远远超过了我的期望。可以看出来他们非常的有诚意，也非常尊重工程师文化。通过华锐的面试，给我的感觉是，运气也非常的重要。所以在找工作面试的时候，不要因为，有几家面试失败了，就轻易的看低自己，一定要坚持下去，尽量去一家你想去的公司。如果这家公司从一开始就压榨你的薪资的话，也不用指望你入职之后能有多大的改善</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为一直想去南方的城市。所以我决定离开恒生去深圳发展，于是在2018年3月份的时候开始计划准备离职，那时候我还在北京。当时已经跟我的主管老大提出离职的意向。离职的流程大概要走一个月左右，在这一个月的时间内，我开始准备一些面试的东西，主要还是java基础这一块。所以从那个时候起，我开始写一些笔记，然后参加一些面试，主要是想通过这种方式，来增加自己的面试经验,了解自己有哪些不足的地方。然后当时恒生也在招人，所以就跟着几个老同事一起面了几个开发。在这里记录一下，我从2018年4月份至2018年5月份，这一个多月的时间里，参加过的所有面试经历，还有碰到的一些的面试题以及我个人对面试这件事情的看法和总结。&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试总结" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList源码解析</title>
    <link href="http://yoursite.com/2018/05/14/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/05/14/ArrayList源码分析/</id>
    <published>2018-05-14T12:56:35.266Z</published>
    <updated>2018-05-15T03:06:35.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArrayList源码"><a href="#ArrayList源码" class="headerlink" title="ArrayList源码"></a>ArrayList源码</h1><h2 id="field"><a href="#field" class="headerlink" title="field"></a>field</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;<span class="comment">//默认的数组容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<span class="comment">//初始化时加载一个空数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;<span class="comment">//实际用来存储数据的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//数组大小</span></span><br></pre></td></tr></table></figure><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>();</span><br><span class="line">     <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>默认的无参构造器就是简单的将数组引用指向类定义的空数组对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//将集合转换为存储数据的数组</span></span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    size = elementData.length;</span><br><span class="line">    <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">  <span class="comment">//若不是Object类型的数组，则将数组copy到Object类型的数组中去</span></span><br><span class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">        elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li><p>新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//确保index的位置没有超出数组的范围</span></span><br><span class="line">      rangeCheckForAdd(index);</span><br><span class="line"><span class="comment">//保证数组的容量是否足以添加进去元素，并且将modCount的值自增1</span></span><br><span class="line">      ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">//将index位置后面的数据往后移1位</span></span><br><span class="line">      System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                       size - index);</span><br><span class="line">    <span class="comment">//将元素放置在index位置上</span></span><br><span class="line">      elementData[index] = element;</span><br><span class="line">    <span class="comment">//数据长度+1</span></span><br><span class="line">      size++;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>fail-fast机制在遍历一个集合时，当集合结构被修改，会抛出Concurrent Modification Exception。</p><p>fail-fast会在以下两种情况下抛出ConcurrentModificationException</p><p>（1）单线程环境</p><p>集合被创建后，在遍历它的过程中修改了结构。</p><p>但是迭代器的remove()方法会让expectModcount和modcount 相等，所以在遍历集合的过程中只能通过迭代器的remove()方法进行删除元素。</p><p>（2）多线程环境</p><p>当一个线程在遍历这个集合，而另一个线程对这个集合的结构进行了修改。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">      ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">      elementData[size++] = e;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//将修改次数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">      <span class="comment">//增加数组长度</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">      <span class="comment">//新数组长度为原先数组长度的1.5倍</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      <span class="comment">//若新长度依旧小于minCapacity，则将minCapacity作为新长度</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">      <span class="comment">//新长度大于MAX_ARRAY_SIZE，则将新长度置为最大的int值</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">      <span class="comment">//将就数组copy到新数组上</span></span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">      <span class="comment">//MAX_ARRAY_SIZE的值为Integer.MAX_VALUE - 8</span></span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="comment">//确保index的位置没有超出数组的范围</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>remove方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查是否数组下标越界</span></span><br><span class="line">      rangeCheck(index);</span><br><span class="line"><span class="comment">//修改次数+1</span></span><br><span class="line">      modCount++;</span><br><span class="line">      E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//将index位置后面的数组往前移1位</span></span><br><span class="line">          System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                           numMoved);</span><br><span class="line">    <span class="comment">//将size的值-1，并将数组最后一位的数据引用置为null 让GC自动回收未被引用的对象</span></span><br><span class="line">      elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"><span class="comment">//将被移除的对象返回出去</span></span><br><span class="line">      <span class="keyword">return</span> oldValue;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//若是空对象的话则遍历数组将其移除</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//不是空对象则遍历数组，通过equals方法判断对象是否相等，相等则将其移除</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//修改次数+1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="comment">//将index位置后面的数组往前移1位</span></span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">  <span class="comment">//将size的值-1，并将数组最后一位的数据引用置为null 让GC自动回收未被引用的对象</span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//修改次数+1</span></span><br><span class="line">    modCount++;</span><br><span class="line"> <span class="comment">//将所有的数组引用都置为null 让GC回收</span></span><br><span class="line">    <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"> <span class="comment">//数组大小置为0</span></span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​由上面源码可以看出，ArrayList的删除操作本质上都是将数组移位，末尾数组引用置为null，让GC自动回收垃圾对象。</p></li></ol><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">       <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">       <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> cursor != size;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           checkForComodification();</span><br><span class="line">           <span class="keyword">int</span> i = cursor;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">           Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">           cursor = i + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">           checkForComodification();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">               cursor = lastRet;</span><br><span class="line">               lastRet = -<span class="number">1</span>;</span><br><span class="line">               expectedModCount = modCount;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>先是一个<code>Itr</code>的类，实现了迭代器接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">     ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">         <span class="keyword">super</span>();</span><br><span class="line">         cursor = index;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> cursor;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         checkForComodification();</span><br><span class="line">         <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">         Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">         <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">         cursor = i;</span><br><span class="line">         <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">         checkForComodification();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             ArrayList.<span class="keyword">this</span>.set(lastRet, e);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">         checkForComodification();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="keyword">int</span> i = cursor;</span><br><span class="line">             ArrayList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">             cursor = i + <span class="number">1</span>;</span><br><span class="line">             lastRet = -<span class="number">1</span>;</span><br><span class="line">             expectedModCount = modCount;</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>然后通过一个<code>ListItr</code>继承<code>Itr</code>类，并同时实现了<code>ListIterator</code>接口。 </p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/ch717828/article/details/46892051" target="_blank" rel="noopener">参考文章一</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ArrayList源码&quot;&gt;&lt;a href=&quot;#ArrayList源码&quot; class=&quot;headerlink&quot; title=&quot;ArrayList源码&quot;&gt;&lt;/a&gt;ArrayList源码&lt;/h1&gt;&lt;h2 id=&quot;field&quot;&gt;&lt;a href=&quot;#field&quot; class=&quot;headerlink&quot; title=&quot;field&quot;&gt;&lt;/a&gt;field&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; DEFAULT_CAPACITY = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//默认的数组容量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Object[] EMPTY_ELEMENTDATA = &amp;#123;&amp;#125;;&lt;span class=&quot;comment&quot;&gt;//初始化时加载一个空数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;transient&lt;/span&gt; Object[] elementData;&lt;span class=&quot;comment&quot;&gt;//实际用来存储数据的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size;&lt;span class=&quot;comment&quot;&gt;//数组大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;构造器&quot;&gt;&lt;a href=&quot;#构造器&quot; class=&quot;headerlink&quot; title=&quot;构造器&quot;&gt;&lt;/a&gt;构造器&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.elementData = EMPTY_ELEMENTDATA;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="集合源码" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码解析</title>
    <link href="http://yoursite.com/2018/05/13/HashMap%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2018/05/13/HashMap源码/</id>
    <published>2018-05-13T08:04:04.549Z</published>
    <updated>2018-05-15T03:06:35.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap源码"><a href="#HashMap源码" class="headerlink" title="HashMap源码"></a>HashMap源码</h1><h2 id="1-构造器"><a href="#1-构造器" class="headerlink" title="1.构造器"></a>1.构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">构造器默认两个参数：initialCapacity 哈希表（键值对数组）初始化容量（默认为16,2的4次方</span></span><br><span class="line"><span class="comment">     loadFactor 加载因子 （默认为0.75）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        threshold = initialCapacity;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断是否需要对原先的hash表扩容</span></span><br><span class="line">      <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        <span class="comment">//对hash表扩容 并将旧hash表的内容放入新hash表中</span></span><br><span class="line">          resize(<span class="number">2</span> * table.length);</span><br><span class="line">        <span class="comment">//通过hash()方法来获取key的hash值</span></span><br><span class="line">          hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//根据hash值重新获取Entry在数组中的index</span></span><br><span class="line">          bucketIndex = indexFor(hash, table.length);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//新增一个键值对 在hash表中的bucketIndex位置放入一个Entry</span></span><br><span class="line">      createEntry(hash, key, value, bucketIndex);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">  <span class="comment">//将所有的旧hash表的键值对转换到新hash表上</span></span><br><span class="line">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">    table = newTable;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     modCount++;</span><br><span class="line">  <span class="comment">//使用Arrays工具类，将hash表的数据都填充成null</span></span><br><span class="line">     Arrays.fill(table, <span class="keyword">null</span>);</span><br><span class="line">     size = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">//获取key的hash值</span></span><br><span class="line">     <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">   <span class="comment">//遍历在hash表中key的hash值所对应位置的链表 通过key.equasls方法来确定key所对应的键值对</span></span><br><span class="line">     <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">          e != <span class="keyword">null</span>;</span><br><span class="line">          e = e.next) &#123;</span><br><span class="line">         Object k;</span><br><span class="line">         <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">             ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">             <span class="keyword">return</span> e;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">      <span class="comment">//给hash表扩容，若表为空，则按照初始化时的threshold值创建hash表。</span></span><br><span class="line">      <span class="comment">//threshold=capacity * loadFactor</span></span><br><span class="line">      <span class="comment">//若不为空，则该方法扩容为原来hash表的2倍</span></span><br><span class="line">          inflateTable(threshold);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">      <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">      <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">//若根据key的hash值计算出的hash表位置已经存在了键值对，则遍历该链表，将新的Entry添加到链表的最后</span></span><br><span class="line">      <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">          Object k;</span><br><span class="line">          <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">              V oldValue = e.value;</span><br><span class="line">              e.value = value;</span><br><span class="line">              e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">              <span class="keyword">return</span> oldValue;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//将hash表的修改次数+1 为了实现fast-fail机制</span></span><br><span class="line">      modCount++;</span><br><span class="line">      addEntry(hash, key, value, i);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeEntryForKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">  <span class="comment">//指向链表当前对象前一个对象的引用</span></span><br><span class="line">    Entry&lt;K,V&gt; prev = table[i];</span><br><span class="line">  <span class="comment">//指向链表当前对象的引用</span></span><br><span class="line">    Entry&lt;K,V&gt; e = prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//遍历链表数据直至找到key对应的Entry</span></span><br><span class="line">      <span class="comment">//next为指向链表当前数据下一个对象的引用</span></span><br><span class="line">        Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">          <span class="comment">//hash表修改次数+1</span></span><br><span class="line">            modCount++;</span><br><span class="line">          <span class="comment">//hash表的大小-1</span></span><br><span class="line">            size--;</span><br><span class="line">          <span class="comment">//此时当前一个链表前一个数据与当前数据为同一个对象，说明hash表当前位置不存在链表，</span></span><br><span class="line">          <span class="comment">//直接将key所对应hash表当前数据的next引用指向当前数据的下一个对象。（链表的删除思想）</span></span><br><span class="line">            <span class="keyword">if</span> (prev == e)</span><br><span class="line">                table[i] = next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">              <span class="comment">//此时说明hash表当前位置存在链表，将前一个数据的next引用指向当前数据的下一个对象</span></span><br><span class="line">                prev.next = next;</span><br><span class="line">          <span class="comment">//这是Entry内部类定义的hook方法，每次删除数据都需要调用一次。</span></span><br><span class="line">            e.recordRemoval(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = e;</span><br><span class="line">        e = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hook方法就是钩子方法</p><h2 id="3-Entry类"><a href="#3-Entry类" class="headerlink" title="3. Entry类"></a>3. Entry类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态内部类 实现了Map类的内部接口 用于存储键值对</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line">        <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates new entry.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">            next = n;</span><br><span class="line">            key = k;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//复写equals方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Map.Entry e = (Map.Entry)o;</span><br><span class="line">            Object k1 = getKey();</span><br><span class="line">            Object k2 = e.getKey();</span><br><span class="line">            <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">                Object v1 = getValue();</span><br><span class="line">                Object v2 = e.getValue();</span><br><span class="line">                <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This method is invoked whenever the value in an entry is</span></span><br><span class="line"><span class="comment">         * overwritten by an invocation of put(k,v) for a key k that's already</span></span><br><span class="line"><span class="comment">         * in the HashMap.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * This method is invoked whenever the entry is</span></span><br><span class="line"><span class="comment">         * removed from the table.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-迭代器"><a href="#4-迭代器" class="headerlink" title="4.迭代器"></a>4.迭代器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//通过一个抽象内部类HashIterator实现了Iterator接口 </span></span><br><span class="line">   <span class="comment">//HashMap提供的key和value迭代器都是通过继承这个HashIterator实现的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">       Entry&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">       <span class="keyword">int</span> expectedModCount;   <span class="comment">// For fast-fail</span></span><br><span class="line">       <span class="keyword">int</span> index;              <span class="comment">// current slot</span></span><br><span class="line">       Entry&lt;K,V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line"></span><br><span class="line">       HashIterator() &#123;</span><br><span class="line">           expectedModCount = modCount;</span><br><span class="line">           <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">               Entry[] t = table;</span><br><span class="line">               <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                   ;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">           Entry&lt;K,V&gt; e = next;</span><br><span class="line">           <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">               Entry[] t = table;</span><br><span class="line">             <span class="comment">//当next为null时说明e是hash表当前index位置的链表的最后一个元素</span></span><br><span class="line">             <span class="comment">//通过while语句内的方式实现next往后移位直至不为null的一个元素</span></span><br><span class="line">               <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                   ;</span><br><span class="line">           &#125;</span><br><span class="line">           current = e;</span><br><span class="line">           <span class="keyword">return</span> e;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">           <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">           Object k = current.key;</span><br><span class="line">           current = <span class="keyword">null</span>;</span><br><span class="line">           HashMap.<span class="keyword">this</span>.removeEntryForKey(k);</span><br><span class="line">           expectedModCount = modCount;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//value迭代器内部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> nextEntry().value;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//key迭代器内部类</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> nextEntry().getKey();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//Entry迭代器内部类</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> nextEntry();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="5-关于hash表的两个问题"><a href="#5-关于hash表的两个问题" class="headerlink" title="5.关于hash表的两个问题"></a>5.关于hash表的两个问题</h2><ul><li>如何设计才能使减小hash冲突？</li></ul><p>针对如何获取在hash表中的位置，HashMap中主要通过三个部分来减小散列冲突：</p><blockquote><ol><li>第一部分，首先根据Object.hashcode得到一个散列值，Object.hashCode是一个native方法。一般情况下可以认为是该对象的地址信息散列得到的，也就是相当于是对象的ID，同一个对象有相同的ID。这样得到的散列值还是比较合理的.</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">    <span class="comment">//对于String的hashCode需要另外计算</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    <span class="comment">//二次散列</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二部分，桶的数量设计。一般由哈希值得到桶的位置都是将哈希值除以桶的数量得到的余数就是桶的位置。一般来说想要尽可能的减少散列冲突有两类办法，一类是使用素数数量的桶，例如hashTable，一类是使用2的幂次数量的桶，例如hashmap，hashmap使用2的次幂的桶有个好处，就是可以用位运算来算，只要将散列值和桶的数量-1相与就是桶的位置不需要除。这样相对来说速度快一些。hashmap里有个静态方法indexof就是用来做这个的。具体下文会说到。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span></span><br><span class="line">    <span class="comment">//长度为2的幂次的hash表，用位运算来将散列值和桶的数量-1相与 就是数组的index,这样比采用除更快</span></span><br><span class="line">  <span class="comment">//比如length是4，那如果h是0-3则返回的值就是0-3，如果是h=4则返回0，h=5则返回1</span></span><br><span class="line">  <span class="comment">//length-1是因为数组下标从0开始</span></span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第三部分，hashseed，第二部分中曾经说道通过将哈希值与桶的数量-1相与得到桶的位置。但是这样做有一个小的问题。当哈希值非常大，而桶的数量很小的时候回出现仅仅依靠哈希值的低位来散列的结果。这样即使散列值做的很好耶没有办法得到很好的散列。这时hashseed的作用就体现出来的，hashseed通过右移部分哈希值，然后将其亦或得到的结果进行在进行定位桶的位置。这样做就综合考虑了高位和低位的值。从而减小了散列冲突的可能性。此外由于java的语言特性，对于String的情况其hashseed需要额外设计。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Table capacity above which to switch to use alternative hashing.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            String altThreshold = java.security.AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> sun.security.action.GetPropertyAction(</span><br><span class="line">                    <span class="string">"jdk.map.althashing.threshold"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> threshold;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                threshold = (<span class="keyword">null</span> != altThreshold)</span><br><span class="line">                        ? Integer.parseInt(altThreshold)</span><br><span class="line">                        : ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// disable alternative hashing if -1</span></span><br><span class="line">                <span class="keyword">if</span> (threshold == -<span class="number">1</span>) &#123;</span><br><span class="line">                    threshold = Integer.MAX_VALUE;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (threshold &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"value must be positive integer."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(IllegalArgumentException failed) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Illegal value for 'jdk.map.althashing.threshold'"</span>, failed);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ALTERNATIVE_HASHING_THRESHOLD = threshold;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE;</code>但是这个静态类常量也是可以根据虚拟机参数的设定来更改的。这也就是Holder这个类这段静态代码的意义了。可以通过调整虚拟机的参数来设定这个域值。<br>关于Holder类是参考别人的文章来的，说实话我也没有完全搞清楚。</p><ul><li>在发生hash冲突时，如何解决？</li></ul><p>在发生hash冲突之后，HashMap采用单向链表方式来存储键值对。在前面介绍的<code>getEntry</code>、<code>put</code>等方法的时候，都有遍历链表。</p><h2 id="关于final"><a href="#关于final" class="headerlink" title="关于final"></a>关于final</h2><p>加上final的仅仅是相当于当前的引用不在改变，但是容器的元素是恶意增删的，元素的内容也是可以改变的。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/u011518120/article/details/53640181" target="_blank" rel="noopener">参考文章一</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HashMap源码&quot;&gt;&lt;a href=&quot;#HashMap源码&quot; class=&quot;headerlink&quot; title=&quot;HashMap源码&quot;&gt;&lt;/a&gt;HashMap源码&lt;/h1&gt;&lt;h2 id=&quot;1-构造器&quot;&gt;&lt;a href=&quot;#1-构造器&quot; class=&quot;headerlink&quot; title=&quot;1.构造器&quot;&gt;&lt;/a&gt;1.构造器&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;构造器默认两个参数：initialCapacity 哈希表（键值对数组）初始化容量（默认为16,2的4次方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;			     loadFactor 加载因子 （默认为0.75）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; initialCapacity, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; loadFactor)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (initialCapacity &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;string&quot;&gt;&quot;Illegal initial capacity: &quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               initialCapacity);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (initialCapacity &amp;gt; MAXIMUM_CAPACITY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            initialCapacity = MAXIMUM_CAPACITY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (loadFactor &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || Float.isNaN(loadFactor))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;string&quot;&gt;&quot;Illegal load factor: &quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               loadFactor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.loadFactor = loadFactor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        threshold = initialCapacity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://yoursite.com/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="集合源码" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
