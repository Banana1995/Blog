{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/DSC_0756.jpg","path":"images/DSC_0756.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1526285362363},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1526285362363},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1526285362363},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1526285362378},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1526285362378},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1526285362378},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1526285362378},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1526285362394},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1526285362378},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1526285362378},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1526285362394},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1526285362394},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1526285362394},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1526285362394},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1526285362581},{"_id":"source/_posts/ArrayList源码分析.md","hash":"76f80ccf21fb89cb3de7fc6fd6610a2842c76570","modified":1526353595334},{"_id":"source/_posts/Git使用手册.md","hash":"27cc29872667e8e056dec10b062d7470334545a9","modified":1528632155036},{"_id":"themes/next/_config.yml","hash":"7d7470f3a3ae0cae30e88d7531b3e69b476b211d","modified":1526380467392},{"_id":"source/_posts/HashMap源码.md","hash":"977d6461cb2af6baa37b72d03915b46a10303a2a","modified":1526353595333},{"_id":"source/_posts/Nginx安装部署web工程.md","hash":"f35d1575e799a0461318a7f27de501e63d242673","modified":1527774372301},{"_id":"source/_posts/关于第一次换工作的面试经验.md","hash":"b8f198e16a8f22312dddf28bda18a87b08a67b7c","modified":1527420153109},{"_id":"source/_posts/星际穿越.md","hash":"22a5af51961dd7b9f07eb8455b68ef746ef27e33","modified":1528636357346},{"_id":"source/_posts/老无所依.md","hash":"231277517abf8a09b1a3f3e0542c5e1ed41de03a","modified":1528632091236},{"_id":"source/_posts/自私的基因.md","hash":"bd62cb49fb56ee732979ec666250cbe265b816b4","modified":1533052982042},{"_id":"source/_posts/辛德勒的名单.md","hash":"fa55ce92b568d3181687a39bdf9ddcd5f1783bad","modified":1529767943021},{"_id":"source/categories/index.md","hash":"ef4ca73ac0f3fb22548368299063f0b6d526c59d","modified":1526353517972},{"_id":"source/tags/index.md","hash":"16ffff946cc78d9d84420afd6b7f03db62f72d7e","modified":1526353233303},{"_id":"source/about/index.md","hash":"69c3c9e65b43327654fb3f2f74b10dfee836bebd","modified":1526380364013},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1526285362363},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1526285362378},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1526285362378},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1526285362378},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1526285362394},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1526285362394},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1526285362394},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1526285362409},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1526285362409},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1526285362409},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1526285362409},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1526285362409},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1526285362409},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1526285362409},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1526285362409},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1526285362425},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1526285362425},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1526285362425},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1526285362425},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1526285362566},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1526285362566},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1526285362566},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1526285362566},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1526285362566},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1526285362566},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1526285362581},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1526285362566},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1526285362581},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1526285363142},{"_id":"themes/next/languages/zh-Hans.yml","hash":"6ea687f16c712aa9672defda0e58e0585a1870df","modified":1526292370659},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1526285363144},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1526285363146},{"_id":"themes/next/layout/_layout.swig","hash":"0299304ec7da3fb89183814ee95621355055e341","modified":1526306564411},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1526353740973},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526285362853},{"_id":"source/_posts/Git使用手册/2.png","hash":"b097d9f626c398a7098d932225ea6cddf4b3cdab","modified":1528028408421},{"_id":"source/_posts/Git使用手册/1.png","hash":"e0916f138babe18266bda4ff798cef4d6c99af7c","modified":1528028408406},{"_id":"source/_posts/Git使用手册/3.1.png","hash":"e4f988e4e387d46fc1e475d32328846a57702555","modified":1528028408433},{"_id":"source/_posts/Git使用手册/4.png","hash":"293592fa5d8fead8f0e8c8f892059728ede1d481","modified":1528028408471},{"_id":"source/_posts/Git使用手册/5.png","hash":"4ba9ee78c090f96e334d3b48149ae8f48fa2b94c","modified":1528028408481},{"_id":"source/_posts/Git使用手册/6.png","hash":"3e96bc196a82ddfc5567595d7bdb60ab7ee4b008","modified":1528028408503},{"_id":"source/_posts/Git使用手册/7.png","hash":"b76119dcb358dae4319cc4b02432c1a6e8cd7d46","modified":1528028408514},{"_id":"source/_posts/Git使用手册/微信截图_20180324002258.png","hash":"a31f921db838233b8ba04d5911f2da3da598b8c2","modified":1521822183853},{"_id":"source/_posts/Git使用手册/微信截图_20180324002602.png","hash":"fb77ab85b3797881facc2bfe8914b642ca15287f","modified":1521822368030},{"_id":"source/_posts/Git使用手册/微信截图_20180324003452.png","hash":"4b1e065dd749bb1543c17cb2293eb0947750e24d","modified":1521822897227},{"_id":"source/_posts/Git使用手册/微信截图_20180324141838.png","hash":"80352c3597a1c42cf8ec58d52d4865ad66d6b98a","modified":1521872323779},{"_id":"source/_posts/Git使用手册/微信截图_20180324213757.png","hash":"2fc9fff8942393365904196be5d7bf1ae9922c99","modified":1521898680695},{"_id":"source/_posts/Git使用手册/微信截图_20180324214536.png","hash":"0a77a953679e0fe242de0f98e2ba9f0c01c57715","modified":1521899139175},{"_id":"source/_posts/星际穿越/p1839451104.jpg","hash":"152f4a091d0863b67dab83d67c4063a1aa060dbe","modified":1528632906455},{"_id":"source/_posts/星际穿越/p2213760092.jpg","hash":"1e432221bd38a44532d87b192223ac211dea867d","modified":1528633012545},{"_id":"source/_posts/老无所依/p1424911515.jpg","hash":"609d41d7509f79f6b510bb7fa31dca50b60d98e8","modified":1527690613236},{"_id":"source/_posts/自私的基因/s11214645.jpg","hash":"17898fcf0b4ab3436a77149e5a865ca96810bb78","modified":1533051349527},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1526285362441},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1526285362441},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1526285362425},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1526285362425},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1526285362441},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1526285362441},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1526285362441},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1526285362441},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1526285362441},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1526308133369},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1526285362456},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1526285362456},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1526285362456},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1526285362456},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1526285362456},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1526285362472},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1526285362488},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1526285362488},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1526285362534},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1526285362534},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1526285362534},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1526285362534},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1526285362534},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1526285362550},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1526285362550},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1526285362581},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1526285362581},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1526285362581},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1526285362581},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1526285362597},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1526285362597},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1526285362597},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1526285362597},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1526285362597},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1526285362848},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1526285362857},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1526285362859},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526285362861},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1526285362863},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1526285362864},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1526285362866},{"_id":"themes/next/source/images/avatar.png","hash":"39f8b2a1a7c2591a0f883aa1bc06d9e213fda273","modified":1526301300783},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1526285362866},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1526285362866},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1526285362866},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1526285362866},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1526285362866},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526285362866},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1526285362866},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1526285362881},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526285362881},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1526285362881},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526285362881},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1526285362881},{"_id":"themes/next/source/images/avatar.svg","hash":"ef1511df6c9e77dd5cb592384cc27d371b1668ce","modified":1526301337280},{"_id":"source/_posts/Git使用手册/3.png","hash":"435a3c6dbb522987b85c5a8f84a68c08491dd7b5","modified":1528028408444},{"_id":"source/_posts/Git使用手册/4.1.png","hash":"86b7197892e676ca16b0d027cb3d80c500699cf6","modified":1528028408456},{"_id":"source/_posts/Git使用手册/6.1.png","hash":"a73099668a1727394c870204784d173594ec2654","modified":1528028408492},{"_id":"source/_posts/Git使用手册/8.png","hash":"f6beb32ed005cdb6fc6fcad1013cf9696ea33088","modified":1528028408525},{"_id":"source/_posts/Git使用手册/微信截图_20180324215326.png","hash":"4224fa6df61c58946b941fa062edcb7dc3d03cde","modified":1521899608527},{"_id":"source/_posts/Git使用手册/微信截图_20180324214754.png","hash":"53997d9dba384823631029656daef066321a7e6f","modified":1521899276808},{"_id":"source/_posts/星际穿越/p2205519883.jpg","hash":"5d7b59e61d0d8237d9faf8072f1ffd4b6d74fad4","modified":1528632763248},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526285362488},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526285362488},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526285362753},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526285362753},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526285362753},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526285362841},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526285362846},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1526285362456},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1526285362472},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1526285362456},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1526285362472},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1526285362472},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1526285362472},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1526285362472},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1526285362472},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1526285362488},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1526285362472},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1526285362503},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1526285362488},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1526285362503},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1526285362503},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1526285362503},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1526285362488},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1526285362503},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1526285362503},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1526285362503},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1526285362503},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1526285362503},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1526285362519},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1526285362519},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1526285362519},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1526285362519},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1526285362519},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1526285362519},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1526285362519},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1526285362519},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1526285362519},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1526285362534},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1526285362534},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1526285362534},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1526285362534},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1526285362566},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1526285362550},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1526285362550},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1526285362550},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1526285362738},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1526285362753},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1526285362753},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1526285362738},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1526285362838},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1526285362840},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1526285362843},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1526285362845},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1526285362944},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1526285362944},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1526285362944},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1526285362959},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1526285363002},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1526285362959},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1526285363004},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1526285363006},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1526285363008},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1526285363018},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1526285363020},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1526285363022},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1526285363024},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1526285363025},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1526285363064},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1526285363062},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1526285363067},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1526285363069},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1526285363071},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1526285363073},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1526285363085},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1526285363083},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1526285363087},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1526285363089},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1526285363090},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1526285363092},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1526285363094},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1526285363096},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1526285363100},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1526285363098},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1526285363104},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1526285363102},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1526285363108},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1526285363106},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1526285363075},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1526285363057},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1526285363078},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1526285363080},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1526285362881},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1526285362897},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1526285362897},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1526285362897},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1526285362897},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1526285362897},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1526285362897},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1526285362912},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1526285362897},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1526285362912},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1526285362912},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1526285363110},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1526285363113},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1526285363128},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1526285363114},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1526285363130},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1526285363139},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1526285363136},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1526285363137},{"_id":"source/_posts/老无所依/p1303044912.jpg","hash":"fd24c0aca4bce0dc62afade76bd413c00f6855eb","modified":1527690587237},{"_id":"source/_posts/老无所依/p1196957913.jpg","hash":"6fceeb2962e32c9354fb10edb204f7c12db9f215","modified":1527690544469},{"_id":"source/_posts/老无所依/p551171670.jpg","hash":"70ceb1061fc09d70bee1f4f4252e52aa3f302bdf","modified":1527690680892},{"_id":"themes/next/source/css/_common/_fonts/icon-avatar.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526300261606},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1526285363059},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1526285362550},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1526285362550},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1526285362597},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1526285362597},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1526285362613},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1526285362613},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1526285362613},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1526285362644},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1526285362691},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1526285362738},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1526285362738},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1526285362738},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1526285362738},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1526285362722},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1526285362738},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1526285362738},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1526285362753},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1526285362822},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1526285362824},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1526285362828},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1526285362826},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1526285362830},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1526285362800},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1526285362835},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1526285362800},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1526285362808},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1526285362800},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1526285362811},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1526285362753},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1526285362753},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1526285362769},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1526285362769},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1526285362769},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1526285362784},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1526285362784},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1526285362928},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1526285362928},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526285362959},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1526285362944},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526285362959},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526285362959},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526285362974},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526285362976},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526285362978},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1526285362996},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1526285362994},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1526285363000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1526285363014},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1526285363011},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1526285363028},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1526285363031},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1526285363033},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1526285362912},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1526285363123},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1526285363125},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1526285362928},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526285363052},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526285363054},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1526285363133},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1526285362613},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1526285362613},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1526285362613},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1526285362628},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1526285362613},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1526285362628},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1526285362628},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1526285362613},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1526285362628},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1526285362628},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1526285362644},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1526285362628},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1526285362644},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1526285362628},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1526285362644},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1526285362644},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1526285362644},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1526285362644},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1526285362644},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1526285362644},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1526285362659},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1526285362659},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1526285362659},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1526285362659},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1526285362659},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1526285362659},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1526285362659},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1526285362659},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1526285362659},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1526285362675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1526285362675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1526285362675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1526285362675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1526285362675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1526285362675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1526285362675},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1526285362691},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1526285362691},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1526285362691},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1526285362706},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1526285362722},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1526285362706},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1526285362722},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1526285362722},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1526285362722},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1526285362722},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1526285362722},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1526285362722},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1526285362722},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1526285362691},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1526285362691},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1526285362691},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1526285362691},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1526285362706},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1526285362706},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1526285362706},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1526285362706},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1526285362706},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1526285362814},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1526285362784},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1526285362784},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1526285362912},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1526285362912},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1526285362928},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1526285362928},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1526285362928},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526285362981},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1526285362984},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1526285362986},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1526285362988},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1526285362990},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1526285362992},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1526285363037},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526285363041},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1526285363050},{"_id":"source/_posts/辛德勒的名单/p492406715.jpg","hash":"d4b53980ee3d316244e4128d0aca6ac754fbba7f","modified":1529767785832},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1526285362944},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1526285363119},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1526285363046},{"_id":"source/_posts/辛德勒的名单/微信截图_20180617133233.png","hash":"8955508ffe3ce9232d354059646c74c4de09d264","modified":1529213556142},{"_id":"source/_posts/辛德勒的名单/微信截图_20180617133218.png","hash":"cd28cff0e109d8fe10fb67723d9599748d4dd415","modified":1529213544429},{"_id":"source/_posts/辛德勒的名单/微信截图_20180617133245.png","hash":"f3406ed5b3f04d7f2c2c7c82d075b4ee8d672307","modified":1529213566715},{"_id":"source/_posts/辛德勒的名单/微信截图_20180623230150.png","hash":"b7227ce3811b33835711c76faca26ccc416f512e","modified":1529766127404},{"_id":"source/_posts/辛德勒的名单/installbackupandsync.exe","hash":"69b54182a9e78a277318e577f0d13cc17d3aeeb9","modified":1529935839511},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609225448.png","hash":"847bb7ece1d79e058fafd58989c11135d52197ed","modified":1528556092663},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609225541.png","hash":"a22adb6c584614975e51f49bf7b478016419440c","modified":1528556143076},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609225514.png","hash":"c10c02c36a2625c0c5508f1a39fbb515a3f9712e","modified":1528556116842},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609230546.png","hash":"689912e20752c5df8bd2ce13ce716006e863adae","modified":1528556748842},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609225501.png","hash":"884d6a08d2cb4af16693a687eed4f509647848b2","modified":1528556103430},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609235349.png","hash":"290bd507f6ed85bf15e0fef55b48bb7854b11101","modified":1528559630822},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609235256.png","hash":"30ee808cdf5f8cf4cb75dd3c5e880c53243f4819","modified":1528559578519},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609235436.png","hash":"5c228a2e8637da702f910e0d3954357227f63d59","modified":1528559677961},{"_id":"source/_posts/星际穿越/微信截图_20180603135057.png","hash":"75b88cbfc9818bcd8ebb91a1809ca8fb481ee551","modified":1528005059326},{"_id":"source/_posts/星际穿越/微信截图_20180603135030.png","hash":"0e13698d01da80ced988440e116481a02f2f2b1e","modified":1528005047066},{"_id":"source/_posts/星际穿越/微信截图_20180603143109.png","hash":"e77b02f99bc64939b6332cb4cf58930b40cd02ce","modified":1528007472413},{"_id":"source/_posts/星际穿越/微信截图_20180603143045.png","hash":"672a1e29dfad7629526bfd3bf52343ba73d10b2b","modified":1528007448201},{"_id":"source/_posts/星际穿越/微信截图_20180603143126.png","hash":"b6172e753b54dda360c76c3177960e05f5429dd9","modified":1528007488191},{"_id":"source/_posts/星际穿越/微信截图_20180603143100.png","hash":"1dd16a03a660e30aa25efc104e009120368da1a6","modified":1528007462290},{"_id":"source/_posts/辛德勒的名单/微信截图_20180617133612.png","hash":"4c5001c136ed21f0b72e1c04cd806fe2769c14ba","modified":1529213775356},{"_id":"source/_posts/辛德勒的名单/微信截图_20180617133623.png","hash":"c0d1d52b6b5a766674605843e8368588c567c50b","modified":1529213784956},{"_id":"source/_posts/自私的基因/微信图片_20180731232134.jpg","hash":"89e3d505626a4edaedadf591df876e65f1f8486c","modified":1533050503426},{"_id":"source/_posts/老无所依/hyj_C1UU5G.exe","hash":"44865afaab5d4ad3a945f33f2fb271e8d65037d5","modified":1528620360419},{"_id":"source/_posts/post-name/DSC_0756.jpg","hash":"63bd99fb24cf8fa2cc4e7c5c92465108c14396b3","modified":1469014840505},{"_id":"source/_posts/老无所依/DSC_0756.jpg","hash":"63bd99fb24cf8fa2cc4e7c5c92465108c14396b3","modified":1469014840505},{"_id":"themes/next/source/images/DSC_0756.jpg","hash":"63bd99fb24cf8fa2cc4e7c5c92465108c14396b3","modified":1469014840505},{"_id":"source/_posts/辛德勒的名单/iFlyIME_WinPC_v2.1.1611.exe","hash":"3fd014585d58060636191dbf282e92dd0a03f34b","modified":1531019095701},{"_id":"public/atom.xml","hash":"726338b17848f75627b15b71827f5db2cc67bdf5","modified":1533140584878},{"_id":"public/baidusitemap.xml","hash":"2386f4c58954cba132719eeed5e5ef2fa30bfac7","modified":1533140584893},{"_id":"public/content.json","hash":"484e17243c37400428ab9ac1acceca4482482b15","modified":1533140584893},{"_id":"public/search.xml","hash":"909859bd2db69ee66931c52e4281154ffa1a6e34","modified":1533140584893},{"_id":"public/sitemap.xml","hash":"8cae39a6aa7de88ec6549723196c3d1c9a2446c0","modified":1533140584893},{"_id":"public/categories/index.html","hash":"789afe3122a3fab958a153dddbee23ea0ca660fc","modified":1533140585659},{"_id":"public/tags/index.html","hash":"6fe40662e18e7b27506a1eda1f042f112c27a88d","modified":1533140585659},{"_id":"public/about/index.html","hash":"4bb02c9bea7cdde63b2ad9664fb5877cfc5c9dea","modified":1533140585659},{"_id":"public/2018/08/02/关于第一次换工作的面试经验/index.html","hash":"7ab5d13c4274249715aed00e3eadca8c7a0877c1","modified":1533140585659},{"_id":"public/2018/08/02/Nginx安装部署web工程/index.html","hash":"4c378bd6a9fa6b7a304264c0435fd93f3db4bba9","modified":1533140585659},{"_id":"public/2018/08/02/HashMap源码/index.html","hash":"2a0361e060ba9be6edab589804284d7291c920b1","modified":1533140585659},{"_id":"public/2018/08/02/ArrayList源码分析/index.html","hash":"69e42fb70869475b02fac42140a43382450cca1c","modified":1533140585659},{"_id":"public/2018/07/30/自私的基因/index.html","hash":"cd5d4dc28a4baed5f79717711a0292b42770c26d","modified":1533140585659},{"_id":"public/2018/06/17/辛德勒的名单/index.html","hash":"b165a4c62f7e8ffb886f3de7b9d4cdd776d85db4","modified":1533140585659},{"_id":"public/2018/06/10/星际穿越/index.html","hash":"5470f74150785ffe4914ab70e40cd0591a0bfafb","modified":1533140585659},{"_id":"public/2018/06/10/Git使用手册/index.html","hash":"af745e612a02cf152b30dcb013ac4cf435d1eaba","modified":1533140585659},{"_id":"public/2018/05/27/老无所依/index.html","hash":"63dd8e96b14b66e98103685474db45db3b464760","modified":1533140585659},{"_id":"public/archives/index.html","hash":"d54be7ce6d17fd9f2a8bb545b009d94597e197c0","modified":1533140585659},{"_id":"public/archives/2018/index.html","hash":"95ee869d422939d91d7a17b83188242467fc1f42","modified":1533140585659},{"_id":"public/archives/2018/05/index.html","hash":"b36c6b4a0fcffbe77369f1eb83ed75117d6d59b5","modified":1533140585659},{"_id":"public/archives/2018/06/index.html","hash":"4a889d9acb0ad4206efe649e2a1e6c4079e1a4e6","modified":1533140585659},{"_id":"public/archives/2018/07/index.html","hash":"fdbc1af06e3e0e058b8c1e830051cd08e455ab90","modified":1533140585659},{"_id":"public/archives/2018/08/index.html","hash":"ea184c982eaf577c04ac8f33569b843257616d0e","modified":1533140585659},{"_id":"public/categories/工具/index.html","hash":"10f43949d6d8f6e31273b9a2d7fb0077b08bc98d","modified":1533140585659},{"_id":"public/categories/Java基础/index.html","hash":"cec363567bb1c9d47024c18c0f2ac7cb7e255745","modified":1533140585674},{"_id":"public/categories/Linux环境/index.html","hash":"3bdaee5b0ab02ecd8c321f6985eef31cb14032f7","modified":1533140585674},{"_id":"public/categories/电影/index.html","hash":"1e7603e9b967ea9061c7f9517468d6d725404c4f","modified":1533140585674},{"_id":"public/categories/Reading/index.html","hash":"3e5ee2f3282374eaf6ab4870b9b3bd76cf55f359","modified":1533140585674},{"_id":"public/categories/面试/index.html","hash":"804ac762726b1857b065ba2a3b1d100559d089dd","modified":1533140585674},{"_id":"public/tags/集合源码/index.html","hash":"3fbfa9615a7ef4aab1aad66a84f84dc398e00f14","modified":1533140585674},{"_id":"public/tags/GIT/index.html","hash":"039661d377ba12e26c3b3c4169930ee544f6b78e","modified":1533140585674},{"_id":"public/tags/Nginx/index.html","hash":"7d4cd14d704ab02ee35231ce4dc6603ff1199c0b","modified":1533140585674},{"_id":"public/index.html","hash":"56a9bd1c7c2f040b5598aa98e059711f7f2a354a","modified":1533140585674},{"_id":"public/tags/诺兰/index.html","hash":"f5dbf68401a296d41542d6f3727f390292e1d08c","modified":1533140585674},{"_id":"public/tags/面试总结/index.html","hash":"2aaa33417bf185dff291e0120bc11d7d3681d275","modified":1533140585674},{"_id":"public/tags/科恩兄弟/index.html","hash":"7295868a598567f83de7468e0ce79ed2c2a09b23","modified":1533140585674},{"_id":"public/tags/理查德道金斯/index.html","hash":"be065cecb2975a2f4d176bcfbd3e73078b96e234","modified":1533140585674},{"_id":"public/tags/史蒂文·斯皮尔伯格/index.html","hash":"0a20e06adbaa3c4a50026481254f3bdbf7636b68","modified":1533140585674},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1533140585674},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533140585674},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533140585674},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1533140585674},{"_id":"public/images/avatar.png","hash":"39f8b2a1a7c2591a0f883aa1bc06d9e213fda273","modified":1533140585674},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1533140585674},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1533140585674},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1533140585674},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1533140585674},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1533140585674},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1533140585674},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1533140585674},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1533140585674},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533140585674},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533140585674},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1533140585674},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1533140585674},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533140585674},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1533140585674},{"_id":"public/images/avatar.svg","hash":"ef1511df6c9e77dd5cb592384cc27d371b1668ce","modified":1533140585674},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1533140585674},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1533140585674},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1533140585674},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1533140585674},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1533140585674},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1533140585674},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1533140585674},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1533140585674},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1533140585674},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1533140585674},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1533140585674},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1533140585674},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1533140585674},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1533140585674},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1533140585674},{"_id":"public/2018/07/30/自私的基因/s11214645.jpg","hash":"17898fcf0b4ab3436a77149e5a865ca96810bb78","modified":1533140585674},{"_id":"public/2018/05/27/老无所依/p1424911515.jpg","hash":"609d41d7509f79f6b510bb7fa31dca50b60d98e8","modified":1533140585674},{"_id":"public/2018/06/10/星际穿越/p1839451104.jpg","hash":"152f4a091d0863b67dab83d67c4063a1aa060dbe","modified":1533140585674},{"_id":"public/2018/06/10/星际穿越/p2213760092.jpg","hash":"1e432221bd38a44532d87b192223ac211dea867d","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/1.png","hash":"e0916f138babe18266bda4ff798cef4d6c99af7c","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/2.png","hash":"b097d9f626c398a7098d932225ea6cddf4b3cdab","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/3.1.png","hash":"e4f988e4e387d46fc1e475d32328846a57702555","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/4.png","hash":"293592fa5d8fead8f0e8c8f892059728ede1d481","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/5.png","hash":"4ba9ee78c090f96e334d3b48149ae8f48fa2b94c","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/6.png","hash":"3e96bc196a82ddfc5567595d7bdb60ab7ee4b008","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/7.png","hash":"b76119dcb358dae4319cc4b02432c1a6e8cd7d46","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/微信截图_20180324002258.png","hash":"a31f921db838233b8ba04d5911f2da3da598b8c2","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/微信截图_20180324002602.png","hash":"fb77ab85b3797881facc2bfe8914b642ca15287f","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/微信截图_20180324141838.png","hash":"80352c3597a1c42cf8ec58d52d4865ad66d6b98a","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/微信截图_20180324003452.png","hash":"4b1e065dd749bb1543c17cb2293eb0947750e24d","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/微信截图_20180324213757.png","hash":"2fc9fff8942393365904196be5d7bf1ae9922c99","modified":1533140585674},{"_id":"public/2018/06/10/Git使用手册/微信截图_20180324214536.png","hash":"0a77a953679e0fe242de0f98e2ba9f0c01c57715","modified":1533140585674},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1533140586859},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1533140586859},{"_id":"public/2018/06/10/星际穿越/p2205519883.jpg","hash":"5d7b59e61d0d8237d9faf8072f1ffd4b6d74fad4","modified":1533140586859},{"_id":"public/2018/06/10/Git使用手册/3.png","hash":"435a3c6dbb522987b85c5a8f84a68c08491dd7b5","modified":1533140586859},{"_id":"public/2018/06/10/Git使用手册/4.1.png","hash":"86b7197892e676ca16b0d027cb3d80c500699cf6","modified":1533140586859},{"_id":"public/2018/06/10/Git使用手册/6.1.png","hash":"a73099668a1727394c870204784d173594ec2654","modified":1533140586859},{"_id":"public/2018/06/10/Git使用手册/8.png","hash":"f6beb32ed005cdb6fc6fcad1013cf9696ea33088","modified":1533140586859},{"_id":"public/2018/06/10/Git使用手册/微信截图_20180324214754.png","hash":"53997d9dba384823631029656daef066321a7e6f","modified":1533140586874},{"_id":"public/2018/06/10/Git使用手册/微信截图_20180324215326.png","hash":"4224fa6df61c58946b941fa062edcb7dc3d03cde","modified":1533140586874},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1533140586874},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1533140586874},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1533140586874},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1533140586874},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1533140586874},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1533140586874},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1533140586874},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1533140586874},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1533140586874},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1533140586874},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1533140586874},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1533140586874},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1533140586874},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1533140586874},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1533140586874},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1533140586874},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1533140586874},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1533140586874},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1533140586874},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1533140586874},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1533140586874},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1533140586874},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1533140586874},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1533140586874},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1533140586874},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1533140586874},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1533140586874},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1533140586874},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1533140586874},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1533140586874},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1533140586874},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1533140586874},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1533140586874},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1533140586890},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1533140586890},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1533140586890},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1533140586890},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1533140586890},{"_id":"public/css/main.css","hash":"1f138b28573c0942886304e33c7c19f0b6d6c39b","modified":1533140586890},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1533140586890},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1533140586890},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1533140586890},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1533140586890},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1533140586890},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1533140586890},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1533140586890},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1533140586890},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1533140586890},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1533140586890},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1533140586890},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1533140586890},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1533140586890},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1533140586890},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1533140586890},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1533140586890},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1533140586890},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1533140586890},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1533140586890},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1533140586890},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1533140586890},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1533140586890},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1533140586890},{"_id":"public/2018/05/27/老无所依/p1303044912.jpg","hash":"fd24c0aca4bce0dc62afade76bd413c00f6855eb","modified":1533140586890},{"_id":"public/2018/05/27/老无所依/p1196957913.jpg","hash":"6fceeb2962e32c9354fb10edb204f7c12db9f215","modified":1533140586890},{"_id":"public/2018/05/27/老无所依/p551171670.jpg","hash":"70ceb1061fc09d70bee1f4f4252e52aa3f302bdf","modified":1533140586890},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1533140586937},{"_id":"public/2018/06/17/辛德勒的名单/p492406715.jpg","hash":"d4b53980ee3d316244e4128d0aca6ac754fbba7f","modified":1533140587124},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180617133218.png","hash":"cd28cff0e109d8fe10fb67723d9599748d4dd415","modified":1533140587374},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180617133245.png","hash":"f3406ed5b3f04d7f2c2c7c82d075b4ee8d672307","modified":1533140587374},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180617133233.png","hash":"8955508ffe3ce9232d354059646c74c4de09d264","modified":1533140587374},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180623230150.png","hash":"b7227ce3811b33835711c76faca26ccc416f512e","modified":1533140587515},{"_id":"public/2018/06/17/辛德勒的名单/installbackupandsync.exe","hash":"69b54182a9e78a277318e577f0d13cc17d3aeeb9","modified":1533140587577},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180609225448.png","hash":"847bb7ece1d79e058fafd58989c11135d52197ed","modified":1533140587577},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180609225514.png","hash":"c10c02c36a2625c0c5508f1a39fbb515a3f9712e","modified":1533140587577},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180609225541.png","hash":"a22adb6c584614975e51f49bf7b478016419440c","modified":1533140587577},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180609230546.png","hash":"689912e20752c5df8bd2ce13ce716006e863adae","modified":1533140587593},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180609225501.png","hash":"884d6a08d2cb4af16693a687eed4f509647848b2","modified":1533140587601},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180609235349.png","hash":"290bd507f6ed85bf15e0fef55b48bb7854b11101","modified":1533140587601},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180609235256.png","hash":"30ee808cdf5f8cf4cb75dd3c5e880c53243f4819","modified":1533140587601},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180609235436.png","hash":"5c228a2e8637da702f910e0d3954357227f63d59","modified":1533140587617},{"_id":"public/2018/06/10/星际穿越/微信截图_20180603135057.png","hash":"75b88cbfc9818bcd8ebb91a1809ca8fb481ee551","modified":1533140587617},{"_id":"public/2018/06/10/星际穿越/微信截图_20180603135030.png","hash":"0e13698d01da80ced988440e116481a02f2f2b1e","modified":1533140587632},{"_id":"public/2018/06/10/星际穿越/微信截图_20180603143109.png","hash":"e77b02f99bc64939b6332cb4cf58930b40cd02ce","modified":1533140587632},{"_id":"public/2018/06/10/星际穿越/微信截图_20180603143045.png","hash":"672a1e29dfad7629526bfd3bf52343ba73d10b2b","modified":1533140587684},{"_id":"public/2018/06/10/星际穿越/微信截图_20180603143126.png","hash":"b6172e753b54dda360c76c3177960e05f5429dd9","modified":1533140587700},{"_id":"public/2018/06/10/星际穿越/微信截图_20180603143100.png","hash":"1dd16a03a660e30aa25efc104e009120368da1a6","modified":1533140587700},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180617133612.png","hash":"4c5001c136ed21f0b72e1c04cd806fe2769c14ba","modified":1533140587716},{"_id":"public/2018/06/17/辛德勒的名单/微信截图_20180617133623.png","hash":"c0d1d52b6b5a766674605843e8368588c567c50b","modified":1533140587716},{"_id":"public/2018/07/30/自私的基因/微信图片_20180731232134.jpg","hash":"89e3d505626a4edaedadf591df876e65f1f8486c","modified":1533140587716},{"_id":"public/2018/05/27/老无所依/hyj_C1UU5G.exe","hash":"44865afaab5d4ad3a945f33f2fb271e8d65037d5","modified":1533140587731},{"_id":"public/images/DSC_0756.jpg","hash":"63bd99fb24cf8fa2cc4e7c5c92465108c14396b3","modified":1533140587796},{"_id":"public/2018/05/27/老无所依/DSC_0756.jpg","hash":"63bd99fb24cf8fa2cc4e7c5c92465108c14396b3","modified":1533140587804},{"_id":"public/2018/06/17/辛德勒的名单/iFlyIME_WinPC_v2.1.1611.exe","hash":"3fd014585d58060636191dbf282e92dd0a03f34b","modified":1533140587929}],"Category":[{"name":"Java基础","_id":"cjkbcbg3r0001v8w0fkzt556e"},{"name":"工具","_id":"cjkbcbg830009v8w0b2zyjib6"},{"name":"Linux环境","_id":"cjkbcbg83000hv8w0towuj6x5"},{"name":"电影","_id":"cjkbcbg8j000nv8w0mpvrtcfw"},{"name":"面试","_id":"cjkbcbg8j000sv8w0fx2tot6r"},{"name":"Reading","_id":"cjkbcbg8j0010v8w03wy2o2tl"}],"Data":[],"Page":[{"title":"分类","date":"2018-05-15T03:04:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-05-15 11:04:45\ntype: \"categories\"\n---\n","updated":"2018-05-15T03:05:17.972Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjkbcbg830006v8w0e7pu9wwu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2018-05-15T03:14:14.000Z","_content":"\n热爱电影和音乐，除了帅以外还是个有趣的人。\n\n2012 ~ 2016 就读于安徽大学，并结识了一帮可爱温暖善良美丽的小伙伴，经常为他们能有我这样的好朋友而感到荣幸和骄傲\n\n2016 ~ 2018 在恒生电子从事银行产品研发，从此踏入程序猿这条不归路。后因自己怕冷同时又很年轻而来到了深圳并希望可以在深圳开始新的精彩人生","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-05-15 11:14:14\n---\n\n热爱电影和音乐，除了帅以外还是个有趣的人。\n\n2012 ~ 2016 就读于安徽大学，并结识了一帮可爱温暖善良美丽的小伙伴，经常为他们能有我这样的好朋友而感到荣幸和骄傲\n\n2016 ~ 2018 在恒生电子从事银行产品研发，从此踏入程序猿这条不归路。后因自己怕冷同时又很年轻而来到了深圳并希望可以在深圳开始新的精彩人生","updated":"2018-05-15T10:32:44.013Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjkbcbg830008v8w0wwy4v6wb","content":"<p>热爱电影和音乐，除了帅以外还是个有趣的人。</p>\n<p>2012 ~ 2016 就读于安徽大学，并结识了一帮可爱温暖善良美丽的小伙伴，经常为他们能有我这样的好朋友而感到荣幸和骄傲</p>\n<p>2016 ~ 2018 在恒生电子从事银行产品研发，从此踏入程序猿这条不归路。后因自己怕冷同时又很年轻而来到了深圳并希望可以在深圳开始新的精彩人生</p>\n","site":{"data":{}},"excerpt":"","more":"<p>热爱电影和音乐，除了帅以外还是个有趣的人。</p>\n<p>2012 ~ 2016 就读于安徽大学，并结识了一帮可爱温暖善良美丽的小伙伴，经常为他们能有我这样的好朋友而感到荣幸和骄傲</p>\n<p>2016 ~ 2018 在恒生电子从事银行产品研发，从此踏入程序猿这条不归路。后因自己怕冷同时又很年轻而来到了深圳并希望可以在深圳开始新的精彩人生</p>\n"},{"title":"标签","date":"2018-05-14T15:14:21.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-05-14 23:14:21\ntype: \"tags\"\n---\n","updated":"2018-05-15T03:00:33.303Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjkbcbg83000cv8w0x7t5ambh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ArrayList源码解析","_content":"\n\n\n# ArrayList源码\n\n\n\n## field\n\n```java\nprivate static final int DEFAULT_CAPACITY = 10;//默认的数组容量\nprivate static final Object[] EMPTY_ELEMENTDATA = {};//初始化时加载一个空数组\nprivate transient Object[] elementData;//实际用来存储数据的数组\nprivate int size;//数组大小\n```\n\n## 构造器\n\n```java\n   public ArrayList() {\n        super();\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n```\n\n<!--more-->\n\n默认的无参构造器就是简单的将数组引用指向类定义的空数组对象。\n\n```java\n    public ArrayList(Collection<? extends E> c) {\n      //将集合转换为存储数据的数组\n        elementData = c.toArray();\n        size = elementData.length;\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n      //若不是Object类型的数组，则将数组copy到Object类型的数组中去\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    }\n```\n\n## 方法\n\n1. 新增方法\n\n   ```java\n       public void add(int index, E element) {\n       \t//确保index的位置没有超出数组的范围\n           rangeCheckForAdd(index);\n   \t\t//保证数组的容量是否足以添加进去元素，并且将modCount的值自增1\n           ensureCapacityInternal(size + 1);  // Increments modCount!!\n         \t//将index位置后面的数据往后移1位\n           System.arraycopy(elementData, index, elementData, index + 1,\n                            size - index);\n         \t//将元素放置在index位置上\n           elementData[index] = element;\n         \t//数据长度+1\n           size++;\n       }\n   ```\n\n   > fail-fast机制在遍历一个集合时，当集合结构被修改，会抛出Concurrent Modification Exception。\n   >\n   > fail-fast会在以下两种情况下抛出ConcurrentModificationException\n   >\n   > （1）单线程环境\n   >\n   > 集合被创建后，在遍历它的过程中修改了结构。\n   >\n   > 但是迭代器的remove()方法会让expectModcount和modcount 相等，所以在遍历集合的过程中只能通过迭代器的remove()方法进行删除元素。\n   >\n   > （2）多线程环境\n   >\n   > 当一个线程在遍历这个集合，而另一个线程对这个集合的结构进行了修改。\n\n   ```java\n     public boolean add(E e) {\n           ensureCapacityInternal(size + 1);  // Increments modCount!!\n           elementData[size++] = e;\n           return true;\n       }\n   ```\n\n   ```java\n   private void ensureCapacityInternal(int minCapacity) {\n           if (elementData == EMPTY_ELEMENTDATA) {\n               minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n           }\n\n           ensureExplicitCapacity(minCapacity);\n       }\n\n       private void ensureExplicitCapacity(int minCapacity) {\n         //将修改次数+1\n           modCount++;\n           // overflow-conscious code\n         \t//增加数组长度\n           if (minCapacity - elementData.length > 0)\n               grow(minCapacity);\n       }\n\n       private void grow(int minCapacity) {\n           // overflow-conscious code\n           int oldCapacity = elementData.length;\n         \t//新数组长度为原先数组长度的1.5倍\n           int newCapacity = oldCapacity + (oldCapacity >> 1);\n         \t//若新长度依旧小于minCapacity，则将minCapacity作为新长度\n           if (newCapacity - minCapacity < 0)\n               newCapacity = minCapacity;\n         \t//新长度大于MAX_ARRAY_SIZE，则将新长度置为最大的int值\n           if (newCapacity - MAX_ARRAY_SIZE > 0)\n               newCapacity = hugeCapacity(minCapacity);\n         \t//将就数组copy到新数组上\n           // minCapacity is usually close to size, so this is a win:\n           elementData = Arrays.copyOf(elementData, newCapacity);\n       }\n\n       private static int hugeCapacity(int minCapacity) {\n           if (minCapacity < 0) // overflow\n               throw new OutOfMemoryError();\n         //MAX_ARRAY_SIZE的值为Integer.MAX_VALUE - 8\n           return (minCapacity > MAX_ARRAY_SIZE) ?\n               Integer.MAX_VALUE :\n               MAX_ARRAY_SIZE;\n       }\n   ```\n\n2. get方法\n\n   ```java\n       public E get(int index) {\n       \t//确保index的位置没有超出数组的范围\n           rangeCheck(index);\n           return elementData(index);\n       }\n   ```\n\n3. remove方法\n\n   ```java\n       public E remove(int index) {\n         \t//检查是否数组下标越界\n           rangeCheck(index);\n   \t\t//修改次数+1\n           modCount++;\n           E oldValue = elementData(index);\n\n           int numMoved = size - index - 1;\n           if (numMoved > 0)\n             \t//将index位置后面的数组往前移1位\n               System.arraycopy(elementData, index+1, elementData, index,\n                                numMoved);\n         \t//将size的值-1，并将数组最后一位的数据引用置为null 让GC自动回收未被引用的对象\n           elementData[--size] = null; // clear to let GC do its work\n   \t\t//将被移除的对象返回出去\n           return oldValue;\n       }\n   ```\n\n   ```java\n       public boolean remove(Object o) {\n           if (o == null) {\n             //若是空对象的话则遍历数组将其移除\n               for (int index = 0; index < size; index++)\n                   if (elementData[index] == null) {\n                       fastRemove(index);\n                       return true;\n                   }\n           } else {\n             //不是空对象则遍历数组，通过equals方法判断对象是否相等，相等则将其移除\n               for (int index = 0; index < size; index++)\n                   if (o.equals(elementData[index])) {\n                       fastRemove(index);\n                       return true;\n                   }\n           }\n           return false;\n       }\n   ```\n\n   ```java\n       private void fastRemove(int index) {\n         \t//修改次数+1\n           modCount++;\n           int numMoved = size - index - 1;\n           if (numMoved > 0)\n             //将index位置后面的数组往前移1位\n               System.arraycopy(elementData, index+1, elementData, index,\n                                numMoved);\n         \t//将size的值-1，并将数组最后一位的数据引用置为null 让GC自动回收未被引用的对象\n           elementData[--size] = null; // clear to let GC do its work\n       }\n\n   ```\n\n   ```java\n       public void clear() {\n       \t//修改次数+1\n           modCount++;\n   \t    //将所有的数组引用都置为null 让GC回收\n           // clear to let GC do its work\n           for (int i = 0; i < size; i++)\n               elementData[i] = null;\n   \t    //数组大小置为0\n           size = 0;\n       }\n   ```\n\n   ​由上面源码可以看出，ArrayList的删除操作本质上都是将数组移位，末尾数组引用置为null，让GC自动回收垃圾对象。\n\n## 迭代器\n\n```java\n private class Itr implements Iterator<E> {\n        int cursor;       // index of next element to return\n        int lastRet = -1; // index of last element returned; -1 if no such\n        int expectedModCount = modCount;\n\n        public boolean hasNext() {\n            return cursor != size;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public E next() {\n            checkForComodification();\n            int i = cursor;\n            if (i >= size)\n                throw new NoSuchElementException();\n            Object[] elementData = ArrayList.this.elementData;\n            if (i >= elementData.length)\n                throw new ConcurrentModificationException();\n            cursor = i + 1;\n            return (E) elementData[lastRet = i];\n        }\n\n        public void remove() {\n            if (lastRet < 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                ArrayList.this.remove(lastRet);\n                cursor = lastRet;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException ex) {\n                throw new ConcurrentModificationException();\n            }\n        }\n\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n    }\n```\n\n先是一个`Itr`的类，实现了迭代器接口。\n\n```java\n   private class ListItr extends Itr implements ListIterator<E> {\n        ListItr(int index) {\n            super();\n            cursor = index;\n        }\n\n        public boolean hasPrevious() {\n            return cursor != 0;\n        }\n\n        public int nextIndex() {\n            return cursor;\n        }\n\n        public int previousIndex() {\n            return cursor - 1;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public E previous() {\n            checkForComodification();\n            int i = cursor - 1;\n            if (i < 0)\n                throw new NoSuchElementException();\n            Object[] elementData = ArrayList.this.elementData;\n            if (i >= elementData.length)\n                throw new ConcurrentModificationException();\n            cursor = i;\n            return (E) elementData[lastRet = i];\n        }\n\n        public void set(E e) {\n            if (lastRet < 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                ArrayList.this.set(lastRet, e);\n            } catch (IndexOutOfBoundsException ex) {\n                throw new ConcurrentModificationException();\n            }\n        }\n\n        public void add(E e) {\n            checkForComodification();\n\n            try {\n                int i = cursor;\n                ArrayList.this.add(i, e);\n                cursor = i + 1;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException ex) {\n                throw new ConcurrentModificationException();\n            }\n        }\n    }\n```\n\n然后通过一个`ListItr`继承`Itr`类，并同时实现了`ListIterator`接口。 \n\n## 参考文章\n\n[参考文章一](https://blog.csdn.net/ch717828/article/details/46892051)\n\n","source":"_posts/ArrayList源码分析.md","raw":"---\ntitle: ArrayList源码解析\ncategories: \"Java基础\"\ntags: \"集合源码\"\n---\n\n\n\n# ArrayList源码\n\n\n\n## field\n\n```java\nprivate static final int DEFAULT_CAPACITY = 10;//默认的数组容量\nprivate static final Object[] EMPTY_ELEMENTDATA = {};//初始化时加载一个空数组\nprivate transient Object[] elementData;//实际用来存储数据的数组\nprivate int size;//数组大小\n```\n\n## 构造器\n\n```java\n   public ArrayList() {\n        super();\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n```\n\n<!--more-->\n\n默认的无参构造器就是简单的将数组引用指向类定义的空数组对象。\n\n```java\n    public ArrayList(Collection<? extends E> c) {\n      //将集合转换为存储数据的数组\n        elementData = c.toArray();\n        size = elementData.length;\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n      //若不是Object类型的数组，则将数组copy到Object类型的数组中去\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    }\n```\n\n## 方法\n\n1. 新增方法\n\n   ```java\n       public void add(int index, E element) {\n       \t//确保index的位置没有超出数组的范围\n           rangeCheckForAdd(index);\n   \t\t//保证数组的容量是否足以添加进去元素，并且将modCount的值自增1\n           ensureCapacityInternal(size + 1);  // Increments modCount!!\n         \t//将index位置后面的数据往后移1位\n           System.arraycopy(elementData, index, elementData, index + 1,\n                            size - index);\n         \t//将元素放置在index位置上\n           elementData[index] = element;\n         \t//数据长度+1\n           size++;\n       }\n   ```\n\n   > fail-fast机制在遍历一个集合时，当集合结构被修改，会抛出Concurrent Modification Exception。\n   >\n   > fail-fast会在以下两种情况下抛出ConcurrentModificationException\n   >\n   > （1）单线程环境\n   >\n   > 集合被创建后，在遍历它的过程中修改了结构。\n   >\n   > 但是迭代器的remove()方法会让expectModcount和modcount 相等，所以在遍历集合的过程中只能通过迭代器的remove()方法进行删除元素。\n   >\n   > （2）多线程环境\n   >\n   > 当一个线程在遍历这个集合，而另一个线程对这个集合的结构进行了修改。\n\n   ```java\n     public boolean add(E e) {\n           ensureCapacityInternal(size + 1);  // Increments modCount!!\n           elementData[size++] = e;\n           return true;\n       }\n   ```\n\n   ```java\n   private void ensureCapacityInternal(int minCapacity) {\n           if (elementData == EMPTY_ELEMENTDATA) {\n               minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n           }\n\n           ensureExplicitCapacity(minCapacity);\n       }\n\n       private void ensureExplicitCapacity(int minCapacity) {\n         //将修改次数+1\n           modCount++;\n           // overflow-conscious code\n         \t//增加数组长度\n           if (minCapacity - elementData.length > 0)\n               grow(minCapacity);\n       }\n\n       private void grow(int minCapacity) {\n           // overflow-conscious code\n           int oldCapacity = elementData.length;\n         \t//新数组长度为原先数组长度的1.5倍\n           int newCapacity = oldCapacity + (oldCapacity >> 1);\n         \t//若新长度依旧小于minCapacity，则将minCapacity作为新长度\n           if (newCapacity - minCapacity < 0)\n               newCapacity = minCapacity;\n         \t//新长度大于MAX_ARRAY_SIZE，则将新长度置为最大的int值\n           if (newCapacity - MAX_ARRAY_SIZE > 0)\n               newCapacity = hugeCapacity(minCapacity);\n         \t//将就数组copy到新数组上\n           // minCapacity is usually close to size, so this is a win:\n           elementData = Arrays.copyOf(elementData, newCapacity);\n       }\n\n       private static int hugeCapacity(int minCapacity) {\n           if (minCapacity < 0) // overflow\n               throw new OutOfMemoryError();\n         //MAX_ARRAY_SIZE的值为Integer.MAX_VALUE - 8\n           return (minCapacity > MAX_ARRAY_SIZE) ?\n               Integer.MAX_VALUE :\n               MAX_ARRAY_SIZE;\n       }\n   ```\n\n2. get方法\n\n   ```java\n       public E get(int index) {\n       \t//确保index的位置没有超出数组的范围\n           rangeCheck(index);\n           return elementData(index);\n       }\n   ```\n\n3. remove方法\n\n   ```java\n       public E remove(int index) {\n         \t//检查是否数组下标越界\n           rangeCheck(index);\n   \t\t//修改次数+1\n           modCount++;\n           E oldValue = elementData(index);\n\n           int numMoved = size - index - 1;\n           if (numMoved > 0)\n             \t//将index位置后面的数组往前移1位\n               System.arraycopy(elementData, index+1, elementData, index,\n                                numMoved);\n         \t//将size的值-1，并将数组最后一位的数据引用置为null 让GC自动回收未被引用的对象\n           elementData[--size] = null; // clear to let GC do its work\n   \t\t//将被移除的对象返回出去\n           return oldValue;\n       }\n   ```\n\n   ```java\n       public boolean remove(Object o) {\n           if (o == null) {\n             //若是空对象的话则遍历数组将其移除\n               for (int index = 0; index < size; index++)\n                   if (elementData[index] == null) {\n                       fastRemove(index);\n                       return true;\n                   }\n           } else {\n             //不是空对象则遍历数组，通过equals方法判断对象是否相等，相等则将其移除\n               for (int index = 0; index < size; index++)\n                   if (o.equals(elementData[index])) {\n                       fastRemove(index);\n                       return true;\n                   }\n           }\n           return false;\n       }\n   ```\n\n   ```java\n       private void fastRemove(int index) {\n         \t//修改次数+1\n           modCount++;\n           int numMoved = size - index - 1;\n           if (numMoved > 0)\n             //将index位置后面的数组往前移1位\n               System.arraycopy(elementData, index+1, elementData, index,\n                                numMoved);\n         \t//将size的值-1，并将数组最后一位的数据引用置为null 让GC自动回收未被引用的对象\n           elementData[--size] = null; // clear to let GC do its work\n       }\n\n   ```\n\n   ```java\n       public void clear() {\n       \t//修改次数+1\n           modCount++;\n   \t    //将所有的数组引用都置为null 让GC回收\n           // clear to let GC do its work\n           for (int i = 0; i < size; i++)\n               elementData[i] = null;\n   \t    //数组大小置为0\n           size = 0;\n       }\n   ```\n\n   ​由上面源码可以看出，ArrayList的删除操作本质上都是将数组移位，末尾数组引用置为null，让GC自动回收垃圾对象。\n\n## 迭代器\n\n```java\n private class Itr implements Iterator<E> {\n        int cursor;       // index of next element to return\n        int lastRet = -1; // index of last element returned; -1 if no such\n        int expectedModCount = modCount;\n\n        public boolean hasNext() {\n            return cursor != size;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public E next() {\n            checkForComodification();\n            int i = cursor;\n            if (i >= size)\n                throw new NoSuchElementException();\n            Object[] elementData = ArrayList.this.elementData;\n            if (i >= elementData.length)\n                throw new ConcurrentModificationException();\n            cursor = i + 1;\n            return (E) elementData[lastRet = i];\n        }\n\n        public void remove() {\n            if (lastRet < 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                ArrayList.this.remove(lastRet);\n                cursor = lastRet;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException ex) {\n                throw new ConcurrentModificationException();\n            }\n        }\n\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        }\n    }\n```\n\n先是一个`Itr`的类，实现了迭代器接口。\n\n```java\n   private class ListItr extends Itr implements ListIterator<E> {\n        ListItr(int index) {\n            super();\n            cursor = index;\n        }\n\n        public boolean hasPrevious() {\n            return cursor != 0;\n        }\n\n        public int nextIndex() {\n            return cursor;\n        }\n\n        public int previousIndex() {\n            return cursor - 1;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public E previous() {\n            checkForComodification();\n            int i = cursor - 1;\n            if (i < 0)\n                throw new NoSuchElementException();\n            Object[] elementData = ArrayList.this.elementData;\n            if (i >= elementData.length)\n                throw new ConcurrentModificationException();\n            cursor = i;\n            return (E) elementData[lastRet = i];\n        }\n\n        public void set(E e) {\n            if (lastRet < 0)\n                throw new IllegalStateException();\n            checkForComodification();\n\n            try {\n                ArrayList.this.set(lastRet, e);\n            } catch (IndexOutOfBoundsException ex) {\n                throw new ConcurrentModificationException();\n            }\n        }\n\n        public void add(E e) {\n            checkForComodification();\n\n            try {\n                int i = cursor;\n                ArrayList.this.add(i, e);\n                cursor = i + 1;\n                lastRet = -1;\n                expectedModCount = modCount;\n            } catch (IndexOutOfBoundsException ex) {\n                throw new ConcurrentModificationException();\n            }\n        }\n    }\n```\n\n然后通过一个`ListItr`继承`Itr`类，并同时实现了`ListIterator`接口。 \n\n## 参考文章\n\n[参考文章一](https://blog.csdn.net/ch717828/article/details/46892051)\n\n","slug":"ArrayList源码分析","published":1,"date":"2018-08-01T16:05:19.112Z","updated":"2018-05-15T03:06:35.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbcbg3b0000v8w02iuchfr4","content":"<h1 id=\"ArrayList源码\"><a href=\"#ArrayList源码\" class=\"headerlink\" title=\"ArrayList源码\"></a>ArrayList源码</h1><h2 id=\"field\"><a href=\"#field\" class=\"headerlink\" title=\"field\"></a>field</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;<span class=\"comment\">//默认的数组容量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<span class=\"comment\">//初始化时加载一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Object[] elementData;<span class=\"comment\">//实际用来存储数据的数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;<span class=\"comment\">//数组大小</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>();</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>默认的无参构造器就是简单的将数组引用指向类定义的空数组对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//将集合转换为存储数据的数组</span></span><br><span class=\"line\">    elementData = c.toArray();</span><br><span class=\"line\">    size = elementData.length;</span><br><span class=\"line\">    <span class=\"comment\">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class=\"line\">  <span class=\"comment\">//若不是Object类型的数组，则将数组copy到Object类型的数组中去</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ol>\n<li><p>新增方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//确保index的位置没有超出数组的范围</span></span><br><span class=\"line\">      rangeCheckForAdd(index);</span><br><span class=\"line\"><span class=\"comment\">//保证数组的容量是否足以添加进去元素，并且将modCount的值自增1</span></span><br><span class=\"line\">      ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    \t<span class=\"comment\">//将index位置后面的数据往后移1位</span></span><br><span class=\"line\">      System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">                       size - index);</span><br><span class=\"line\">    \t<span class=\"comment\">//将元素放置在index位置上</span></span><br><span class=\"line\">      elementData[index] = element;</span><br><span class=\"line\">    \t<span class=\"comment\">//数据长度+1</span></span><br><span class=\"line\">      size++;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>fail-fast机制在遍历一个集合时，当集合结构被修改，会抛出Concurrent Modification Exception。</p>\n<p>fail-fast会在以下两种情况下抛出ConcurrentModificationException</p>\n<p>（1）单线程环境</p>\n<p>集合被创建后，在遍历它的过程中修改了结构。</p>\n<p>但是迭代器的remove()方法会让expectModcount和modcount 相等，所以在遍历集合的过程中只能通过迭代器的remove()方法进行删除元素。</p>\n<p>（2）多线程环境</p>\n<p>当一个线程在遍历这个集合，而另一个线程对这个集合的结构进行了修改。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">      ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">      elementData[size++] = e;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//将修改次数+1</span></span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">      \t<span class=\"comment\">//增加数组长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">      \t<span class=\"comment\">//新数组长度为原先数组长度的1.5倍</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">      \t<span class=\"comment\">//若新长度依旧小于minCapacity，则将minCapacity作为新长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            newCapacity = minCapacity;</span><br><span class=\"line\">      \t<span class=\"comment\">//新长度大于MAX_ARRAY_SIZE，则将新长度置为最大的int值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">      \t<span class=\"comment\">//将就数组copy到新数组上</span></span><br><span class=\"line\">        <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">      <span class=\"comment\">//MAX_ARRAY_SIZE的值为Integer.MAX_VALUE - 8</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">            Integer.MAX_VALUE :</span><br><span class=\"line\">            MAX_ARRAY_SIZE;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>get方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//确保index的位置没有超出数组的范围</span></span><br><span class=\"line\">    rangeCheck(index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> elementData(index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>remove方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//检查是否数组下标越界</span></span><br><span class=\"line\">      rangeCheck(index);</span><br><span class=\"line\"><span class=\"comment\">//修改次数+1</span></span><br><span class=\"line\">      modCount++;</span><br><span class=\"line\">      E oldValue = elementData(index);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        \t<span class=\"comment\">//将index位置后面的数组往前移1位</span></span><br><span class=\"line\">          System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,</span><br><span class=\"line\">                           numMoved);</span><br><span class=\"line\">    \t<span class=\"comment\">//将size的值-1，并将数组最后一位的数据引用置为null 让GC自动回收未被引用的对象</span></span><br><span class=\"line\">      elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\"><span class=\"comment\">//将被移除的对象返回出去</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//若是空对象的话则遍历数组将其移除</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementData[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                fastRemove(index);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//不是空对象则遍历数组，通过equals方法判断对象是否相等，相等则将其移除</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.equals(elementData[index])) &#123;</span><br><span class=\"line\">                fastRemove(index);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fastRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//修改次数+1</span></span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"comment\">//将index位置后面的数组往前移1位</span></span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,</span><br><span class=\"line\">                         numMoved);</span><br><span class=\"line\">  \t<span class=\"comment\">//将size的值-1，并将数组最后一位的数据引用置为null 让GC自动回收未被引用的对象</span></span><br><span class=\"line\">    elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//修改次数+1</span></span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"> <span class=\"comment\">//将所有的数组引用都置为null 让GC回收</span></span><br><span class=\"line\">    <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">        elementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> <span class=\"comment\">//数组大小置为0</span></span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​由上面源码可以看出，ArrayList的删除操作本质上都是将数组移位，末尾数组引用置为null，让GC自动回收垃圾对象。</p>\n</li>\n</ol>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> cursor;       <span class=\"comment\">// index of next element to return</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>; <span class=\"comment\">// index of last element returned; -1 if no such</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> expectedModCount = modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> cursor != size;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           checkForComodification();</span><br><span class=\"line\">           <span class=\"keyword\">int</span> i = cursor;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (i &gt;= size)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">           Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">           cursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">           checkForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               ArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</span><br><span class=\"line\">               cursor = lastRet;</span><br><span class=\"line\">               lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">               expectedModCount = modCount;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>先是一个<code>Itr</code>的类，实现了迭代器接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItr</span> <span class=\"keyword\">extends</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">     ListItr(<span class=\"keyword\">int</span> index) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">super</span>();</span><br><span class=\"line\">         cursor = index;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPrevious</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> cursor != <span class=\"number\">0</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nextIndex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">previousIndex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> cursor - <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">previous</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         checkForComodification();</span><br><span class=\"line\">         <span class=\"keyword\">int</span> i = cursor - <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">         Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">         cursor = i;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">         checkForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             ArrayList.<span class=\"keyword\">this</span>.set(lastRet, e);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">         checkForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">int</span> i = cursor;</span><br><span class=\"line\">             ArrayList.<span class=\"keyword\">this</span>.add(i, e);</span><br><span class=\"line\">             cursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">             lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">             expectedModCount = modCount;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>然后通过一个<code>ListItr</code>继承<code>Itr</code>类，并同时实现了<code>ListIterator</code>接口。 </p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://blog.csdn.net/ch717828/article/details/46892051\" target=\"_blank\" rel=\"noopener\">参考文章一</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"ArrayList源码\"><a href=\"#ArrayList源码\" class=\"headerlink\" title=\"ArrayList源码\"></a>ArrayList源码</h1><h2 id=\"field\"><a href=\"#field\" class=\"headerlink\" title=\"field\"></a>field</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;<span class=\"comment\">//默认的数组容量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<span class=\"comment\">//初始化时加载一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Object[] elementData;<span class=\"comment\">//实际用来存储数据的数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;<span class=\"comment\">//数组大小</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>();</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>","more":"<p>默认的无参构造器就是简单的将数组引用指向类定义的空数组对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//将集合转换为存储数据的数组</span></span><br><span class=\"line\">    elementData = c.toArray();</span><br><span class=\"line\">    size = elementData.length;</span><br><span class=\"line\">    <span class=\"comment\">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class=\"line\">  <span class=\"comment\">//若不是Object类型的数组，则将数组copy到Object类型的数组中去</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData.getClass() != Object[].class)</span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ol>\n<li><p>新增方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//确保index的位置没有超出数组的范围</span></span><br><span class=\"line\">      rangeCheckForAdd(index);</span><br><span class=\"line\"><span class=\"comment\">//保证数组的容量是否足以添加进去元素，并且将modCount的值自增1</span></span><br><span class=\"line\">      ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    \t<span class=\"comment\">//将index位置后面的数据往后移1位</span></span><br><span class=\"line\">      System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">                       size - index);</span><br><span class=\"line\">    \t<span class=\"comment\">//将元素放置在index位置上</span></span><br><span class=\"line\">      elementData[index] = element;</span><br><span class=\"line\">    \t<span class=\"comment\">//数据长度+1</span></span><br><span class=\"line\">      size++;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>fail-fast机制在遍历一个集合时，当集合结构被修改，会抛出Concurrent Modification Exception。</p>\n<p>fail-fast会在以下两种情况下抛出ConcurrentModificationException</p>\n<p>（1）单线程环境</p>\n<p>集合被创建后，在遍历它的过程中修改了结构。</p>\n<p>但是迭代器的remove()方法会让expectModcount和modcount 相等，所以在遍历集合的过程中只能通过迭代器的remove()方法进行删除元素。</p>\n<p>（2）多线程环境</p>\n<p>当一个线程在遍历这个集合，而另一个线程对这个集合的结构进行了修改。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">      ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">      elementData[size++] = e;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ensureExplicitCapacity(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//将修改次数+1</span></span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">      \t<span class=\"comment\">//增加数组长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// overflow-conscious code</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">      \t<span class=\"comment\">//新数组长度为原先数组长度的1.5倍</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">      \t<span class=\"comment\">//若新长度依旧小于minCapacity，则将minCapacity作为新长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            newCapacity = minCapacity;</span><br><span class=\"line\">      \t<span class=\"comment\">//新长度大于MAX_ARRAY_SIZE，则将新长度置为最大的int值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">      \t<span class=\"comment\">//将就数组copy到新数组上</span></span><br><span class=\"line\">        <span class=\"comment\">// minCapacity is usually close to size, so this is a win:</span></span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">hugeCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OutOfMemoryError();</span><br><span class=\"line\">      <span class=\"comment\">//MAX_ARRAY_SIZE的值为Integer.MAX_VALUE - 8</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class=\"line\">            Integer.MAX_VALUE :</span><br><span class=\"line\">            MAX_ARRAY_SIZE;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>get方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//确保index的位置没有超出数组的范围</span></span><br><span class=\"line\">    rangeCheck(index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> elementData(index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>remove方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//检查是否数组下标越界</span></span><br><span class=\"line\">      rangeCheck(index);</span><br><span class=\"line\"><span class=\"comment\">//修改次数+1</span></span><br><span class=\"line\">      modCount++;</span><br><span class=\"line\">      E oldValue = elementData(index);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        \t<span class=\"comment\">//将index位置后面的数组往前移1位</span></span><br><span class=\"line\">          System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,</span><br><span class=\"line\">                           numMoved);</span><br><span class=\"line\">    \t<span class=\"comment\">//将size的值-1，并将数组最后一位的数据引用置为null 让GC自动回收未被引用的对象</span></span><br><span class=\"line\">      elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\"><span class=\"comment\">//将被移除的对象返回出去</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//若是空对象的话则遍历数组将其移除</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementData[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                fastRemove(index);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//不是空对象则遍历数组，通过equals方法判断对象是否相等，相等则将其移除</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.equals(elementData[index])) &#123;</span><br><span class=\"line\">                fastRemove(index);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fastRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//修改次数+1</span></span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"comment\">//将index位置后面的数组往前移1位</span></span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,</span><br><span class=\"line\">                         numMoved);</span><br><span class=\"line\">  \t<span class=\"comment\">//将size的值-1，并将数组最后一位的数据引用置为null 让GC自动回收未被引用的对象</span></span><br><span class=\"line\">    elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//修改次数+1</span></span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\"> <span class=\"comment\">//将所有的数组引用都置为null 让GC回收</span></span><br><span class=\"line\">    <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">        elementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> <span class=\"comment\">//数组大小置为0</span></span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​由上面源码可以看出，ArrayList的删除操作本质上都是将数组移位，末尾数组引用置为null，让GC自动回收垃圾对象。</p>\n</li>\n</ol>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> cursor;       <span class=\"comment\">// index of next element to return</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> lastRet = -<span class=\"number\">1</span>; <span class=\"comment\">// index of last element returned; -1 if no such</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> expectedModCount = modCount;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> cursor != size;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           checkForComodification();</span><br><span class=\"line\">           <span class=\"keyword\">int</span> i = cursor;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (i &gt;= size)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">           Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">           cursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">           checkForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               ArrayList.<span class=\"keyword\">this</span>.remove(lastRet);</span><br><span class=\"line\">               cursor = lastRet;</span><br><span class=\"line\">               lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">               expectedModCount = modCount;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">checkForComodification</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>先是一个<code>Itr</code>的类，实现了迭代器接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItr</span> <span class=\"keyword\">extends</span> <span class=\"title\">Itr</span> <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">     ListItr(<span class=\"keyword\">int</span> index) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">super</span>();</span><br><span class=\"line\">         cursor = index;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasPrevious</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> cursor != <span class=\"number\">0</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">nextIndex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> cursor;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">previousIndex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> cursor - <span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">previous</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         checkForComodification();</span><br><span class=\"line\">         <span class=\"keyword\">int</span> i = cursor - <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">         Object[] elementData = ArrayList.<span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (i &gt;= elementData.length)</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">         cursor = i;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> (E) elementData[lastRet = i];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (lastRet &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">         checkForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             ArrayList.<span class=\"keyword\">this</span>.set(lastRet, e);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">         checkForComodification();</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">int</span> i = cursor;</span><br><span class=\"line\">             ArrayList.<span class=\"keyword\">this</span>.add(i, e);</span><br><span class=\"line\">             cursor = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">             lastRet = -<span class=\"number\">1</span>;</span><br><span class=\"line\">             expectedModCount = modCount;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>然后通过一个<code>ListItr</code>继承<code>Itr</code>类，并同时实现了<code>ListIterator</code>接口。 </p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://blog.csdn.net/ch717828/article/details/46892051\" target=\"_blank\" rel=\"noopener\">参考文章一</a></p>"},{"title":"Git以及TortoiseGit安装使用","date":"2018-06-10T12:02:12.000Z","_content":"\n#### 1. 下载安装Git-2.8.3-64-bit.exe程序\n\n- 默认选项一直next即可。\n\n\n- 本地初始化git的配置项，设置username和email，使用如下命令：\n\n ```java\ngit config --global user.name \"abc\"\ngit config --global user.email \"123abc@163.com\"\n ```\n\n--global 表示全局属性，所有的git项目都会公用这个属性。因为Git是分布式版本控制系统，需要一个用户名和email作为一个标识。\n\n<!--more-->\n\n#### 2. 配置ssh key\n\n- **生成秘钥对** \n\n  在Git Bash中输入以下命令 ：\n\n  ``` \n  ssh-keygen -t rsa -C \"123abc@163.com\"\n  ```\n  之后可以不用设置密码，按下3个回车键即可。接下来可以去默认路径 `C:\\Users\\banana\\.ssh`下查看生成的两个文件，分别为 私钥：`id_rsa` 公钥：`id_rsa.pub` \n\n  ![](Git使用手册\\微信截图_20180324002602.png)\n\n- ​ **添加公钥到远程仓库** \n  打开GitHub主页，在`Settings`-->`SSH and GPG keys`中，点击`New SSH key` 按钮；\n\n  再打开公钥文件，将其中的字符串完整复制，粘贴到`key` 中\n\n  ![](Git使用手册\\微信截图_20180324002258.png)\n\n  执行`ssh -T git@github.com` 命令，查看公钥是否配置成功了，如下图所示则表示成功：\n\n  ![](Git使用手册\\微信截图_20180324213757.png)\n\n- **将私钥添加到自己的系统中** \n\n  使用命令： `ssh-add ~/.ssh/id_rsa`  添加私钥至系统中，若无效的话，建议采取以下两种方法：\n  1. 先执行 `eval 'ssh-agent-s' ` 再执行 `ssh-add ~/.ssh/id_rsa` ；\n  2. 先执行`ssh-agent bash --login -i` 启动bash，或者说把bash挂到ssh-agent下面，再执行 `ssh-add`\n\n  当看到下图所示结果时，则表示成功了\n\n![](Git使用手册\\微信截图_20180324003452.png)\n\n#### 3. 配置远程仓库\n\n- 登录github账号，新建一个远程仓库。\n\n- 在本地建一个与仓库同名的文件夹，在文件夹中打开Git Bash，执行如下命令：\n\n  ``` \n  echo \"# commang\" >> README.md\n  新建一个README.md文件，写入“# commang”\n  git init\n  初始化git文件夹，创建master分支和.git文件夹\n  git add README.md\n  将工作区中的README.md文件添加进暂存区\n  git commit -m \"first commit\"\n  将暂存区的文件提交到master分支上\n  git remote add origin git@github.com:abc/gitTest.git\n  配置远程仓库地址命名为origin\n  git push -u origin master\n  将本地master分支的数据push到远程仓库的master分支上\n  ```\n\n- 若没能成功push去服务器的话，可以去检查下本地`.git` 文件夹下的`config` 文件，其中的url必须与上述命令中的远程地址相同。\n\n  ![](Git使用手册\\微信截图_20180324141838.png)\n#### 4.安装TortoiseGit-2.6.0.0-64bit.msi文件 \n\n[下载TortoiseGit和中文语言包](https://tortoisegit.org/download/)\n\n- 默认选项一直next即可。\n\n- 创建本地仓库，在文件夹中`右键-->Git在这里创建版本库` （我使用的是中文版本），如下图：\n  ![](Git使用手册\\微信截图_20180324214536.png)\n\n  不用勾选，直接确定即可。\n\n- **设置网络和远端** \n\n  **1. `右键-->设置` 将本地安装Git的ssh.exe路径地址配置到网络上，如下图：**\n\n  ![](Git使用手册\\微信截图_20180324215326.png)\n\n  我的Git是安装在`C:\\software\\Git\\`路径下 。\n\n  **2. 将远程仓库的地址粘贴到`URL`和`推送URL` 中，如下图：**\n\n  ![](Git使用手册\\微信截图_20180324214754.png)\n\n- 至此，你已经可以愉快的使用右键进行push和update了，但是会时不时遇到需要输入密码，但是你怎么输都不对的情况。\n\n#### 5. 使用本地`Pageant`记住你的私钥密码\n\n1. 开始菜单找到TortoiseGit菜单下的puttygen，打开puttygen\n\n   ![](Git使用手册\\1.png)\n\n\n2. 选择导入秘钥\n\n   ![](Git使用手册\\2.png)\n\n3. 选择C:\\Users\\Administrator\\.ssh目录下的私钥，并输入秘钥密码\n\n   ![](Git使用手册\\3.png)\n\n   ![](Git使用手册\\3.1.png)\n\n4. 选择save private key，将私钥另存为ppk格式的秘钥\n\n   ![](Git使用手册\\4.png)\n\n   ![](Git使用手册\\4.1.png)\n\n5. 开始菜单找到TortoiseGit菜单下的pageant，打开\n\n   ![](Git使用手册\\5.png)\n\n6. 点击add key，选择ppk秘钥，输入密码\n\n   ![](Git使用手册\\6.png)\n\n   ![](Git使用手册\\6.1.png)\n\n   每次开机启动pagent并添加ppk秘钥\n\n7. 点击torise git – settings \n\n   ![](Git使用手册\\7.png)\n\n8. 设置network—ssh的路径，设置为“C:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe” \n\n   ![](Git使用手册\\8.png)\n\n#### 6. 使用过程遇到的问题\n\n1. **在新文件下拉取远程仓库报错：You asked to pull from the remote 'origin', but did not specify:a branch. Because this is not the default configured remotefor your current branch, you must specify a branch on the command line.**\n\n   找到：`.git/config`文件 添加如下\n\n   ```\n   [branch \"master\"]\n       remote = origin\n       merge = refs/heads/master\n   ```\n\n2. **在设置git远端地址时，尽量修改远端名称** \n\n   ![](C:\\Users\\banana\\Pictures\\微信截图_20180327222554.png)\n\n   如果不设置的话，在同一个文件夹下，新建两个文件夹，在这两个文件夹中分别拉取不同仓库的内容时就会报错\n\n3.  **当新建了一个空的远程仓库，本地创建了一个关联到远端地址的仓库后，不要尝试拉取，否则会报出`Couldn't find remote ref master`错误信息**\n\n4. **idea使用Git时，需要配置ssh**\n\n   - **设置私钥地址**\n\n   ![](C:\\Users\\banana\\Pictures\\微信截图_20180327233928.png)\n\n   ​\n\n   - **设置Git地址和SSH executable 为Native**\n\n   ![](C:\\Users\\banana\\Pictures\\微信截图_20180327234038.png)\n\n   - **设置github地址**\n\n     ![](C:\\Users\\banana\\Pictures\\微信截图_20180327234303.png)\n\n5. **对于重命名改名字等操作都可以在本地，修改完后添加进版本控制再push到远端仓库即可**\n\n6. 对于在第2步中修改了本地远端的名称的操作，如果在idea中拉取代码的话，回报出这个错误：\n\n   ```\n   Can't Update\n   \t\t\tNo tracked branch configured for branch master or the branch doesn't exist.\n   \t\t\tTo make your branch track a remote branch call, for example,\n   \t\t\tgit branch --set-upstream-to origin/master master (show balloon)\n   ```\n\n   此时，可以执行命令`git branch --set-upstream-to origin-repo/master master` 意思是使我们在git设置的本地远程名称`origin-repo/master`追踪远程仓库的`master`分支\n\n   ​\n\n   ​","source":"_posts/Git使用手册.md","raw":"---\ntitle: Git以及TortoiseGit安装使用\ndate: 2018-06-10 20:02:12\ncategories: \"工具\"\ntags: \"GIT\"\n---\n\n#### 1. 下载安装Git-2.8.3-64-bit.exe程序\n\n- 默认选项一直next即可。\n\n\n- 本地初始化git的配置项，设置username和email，使用如下命令：\n\n ```java\ngit config --global user.name \"abc\"\ngit config --global user.email \"123abc@163.com\"\n ```\n\n--global 表示全局属性，所有的git项目都会公用这个属性。因为Git是分布式版本控制系统，需要一个用户名和email作为一个标识。\n\n<!--more-->\n\n#### 2. 配置ssh key\n\n- **生成秘钥对** \n\n  在Git Bash中输入以下命令 ：\n\n  ``` \n  ssh-keygen -t rsa -C \"123abc@163.com\"\n  ```\n  之后可以不用设置密码，按下3个回车键即可。接下来可以去默认路径 `C:\\Users\\banana\\.ssh`下查看生成的两个文件，分别为 私钥：`id_rsa` 公钥：`id_rsa.pub` \n\n  ![](Git使用手册\\微信截图_20180324002602.png)\n\n- ​ **添加公钥到远程仓库** \n  打开GitHub主页，在`Settings`-->`SSH and GPG keys`中，点击`New SSH key` 按钮；\n\n  再打开公钥文件，将其中的字符串完整复制，粘贴到`key` 中\n\n  ![](Git使用手册\\微信截图_20180324002258.png)\n\n  执行`ssh -T git@github.com` 命令，查看公钥是否配置成功了，如下图所示则表示成功：\n\n  ![](Git使用手册\\微信截图_20180324213757.png)\n\n- **将私钥添加到自己的系统中** \n\n  使用命令： `ssh-add ~/.ssh/id_rsa`  添加私钥至系统中，若无效的话，建议采取以下两种方法：\n  1. 先执行 `eval 'ssh-agent-s' ` 再执行 `ssh-add ~/.ssh/id_rsa` ；\n  2. 先执行`ssh-agent bash --login -i` 启动bash，或者说把bash挂到ssh-agent下面，再执行 `ssh-add`\n\n  当看到下图所示结果时，则表示成功了\n\n![](Git使用手册\\微信截图_20180324003452.png)\n\n#### 3. 配置远程仓库\n\n- 登录github账号，新建一个远程仓库。\n\n- 在本地建一个与仓库同名的文件夹，在文件夹中打开Git Bash，执行如下命令：\n\n  ``` \n  echo \"# commang\" >> README.md\n  新建一个README.md文件，写入“# commang”\n  git init\n  初始化git文件夹，创建master分支和.git文件夹\n  git add README.md\n  将工作区中的README.md文件添加进暂存区\n  git commit -m \"first commit\"\n  将暂存区的文件提交到master分支上\n  git remote add origin git@github.com:abc/gitTest.git\n  配置远程仓库地址命名为origin\n  git push -u origin master\n  将本地master分支的数据push到远程仓库的master分支上\n  ```\n\n- 若没能成功push去服务器的话，可以去检查下本地`.git` 文件夹下的`config` 文件，其中的url必须与上述命令中的远程地址相同。\n\n  ![](Git使用手册\\微信截图_20180324141838.png)\n#### 4.安装TortoiseGit-2.6.0.0-64bit.msi文件 \n\n[下载TortoiseGit和中文语言包](https://tortoisegit.org/download/)\n\n- 默认选项一直next即可。\n\n- 创建本地仓库，在文件夹中`右键-->Git在这里创建版本库` （我使用的是中文版本），如下图：\n  ![](Git使用手册\\微信截图_20180324214536.png)\n\n  不用勾选，直接确定即可。\n\n- **设置网络和远端** \n\n  **1. `右键-->设置` 将本地安装Git的ssh.exe路径地址配置到网络上，如下图：**\n\n  ![](Git使用手册\\微信截图_20180324215326.png)\n\n  我的Git是安装在`C:\\software\\Git\\`路径下 。\n\n  **2. 将远程仓库的地址粘贴到`URL`和`推送URL` 中，如下图：**\n\n  ![](Git使用手册\\微信截图_20180324214754.png)\n\n- 至此，你已经可以愉快的使用右键进行push和update了，但是会时不时遇到需要输入密码，但是你怎么输都不对的情况。\n\n#### 5. 使用本地`Pageant`记住你的私钥密码\n\n1. 开始菜单找到TortoiseGit菜单下的puttygen，打开puttygen\n\n   ![](Git使用手册\\1.png)\n\n\n2. 选择导入秘钥\n\n   ![](Git使用手册\\2.png)\n\n3. 选择C:\\Users\\Administrator\\.ssh目录下的私钥，并输入秘钥密码\n\n   ![](Git使用手册\\3.png)\n\n   ![](Git使用手册\\3.1.png)\n\n4. 选择save private key，将私钥另存为ppk格式的秘钥\n\n   ![](Git使用手册\\4.png)\n\n   ![](Git使用手册\\4.1.png)\n\n5. 开始菜单找到TortoiseGit菜单下的pageant，打开\n\n   ![](Git使用手册\\5.png)\n\n6. 点击add key，选择ppk秘钥，输入密码\n\n   ![](Git使用手册\\6.png)\n\n   ![](Git使用手册\\6.1.png)\n\n   每次开机启动pagent并添加ppk秘钥\n\n7. 点击torise git – settings \n\n   ![](Git使用手册\\7.png)\n\n8. 设置network—ssh的路径，设置为“C:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe” \n\n   ![](Git使用手册\\8.png)\n\n#### 6. 使用过程遇到的问题\n\n1. **在新文件下拉取远程仓库报错：You asked to pull from the remote 'origin', but did not specify:a branch. Because this is not the default configured remotefor your current branch, you must specify a branch on the command line.**\n\n   找到：`.git/config`文件 添加如下\n\n   ```\n   [branch \"master\"]\n       remote = origin\n       merge = refs/heads/master\n   ```\n\n2. **在设置git远端地址时，尽量修改远端名称** \n\n   ![](C:\\Users\\banana\\Pictures\\微信截图_20180327222554.png)\n\n   如果不设置的话，在同一个文件夹下，新建两个文件夹，在这两个文件夹中分别拉取不同仓库的内容时就会报错\n\n3.  **当新建了一个空的远程仓库，本地创建了一个关联到远端地址的仓库后，不要尝试拉取，否则会报出`Couldn't find remote ref master`错误信息**\n\n4. **idea使用Git时，需要配置ssh**\n\n   - **设置私钥地址**\n\n   ![](C:\\Users\\banana\\Pictures\\微信截图_20180327233928.png)\n\n   ​\n\n   - **设置Git地址和SSH executable 为Native**\n\n   ![](C:\\Users\\banana\\Pictures\\微信截图_20180327234038.png)\n\n   - **设置github地址**\n\n     ![](C:\\Users\\banana\\Pictures\\微信截图_20180327234303.png)\n\n5. **对于重命名改名字等操作都可以在本地，修改完后添加进版本控制再push到远端仓库即可**\n\n6. 对于在第2步中修改了本地远端的名称的操作，如果在idea中拉取代码的话，回报出这个错误：\n\n   ```\n   Can't Update\n   \t\t\tNo tracked branch configured for branch master or the branch doesn't exist.\n   \t\t\tTo make your branch track a remote branch call, for example,\n   \t\t\tgit branch --set-upstream-to origin/master master (show balloon)\n   ```\n\n   此时，可以执行命令`git branch --set-upstream-to origin-repo/master master` 意思是使我们在git设置的本地远程名称`origin-repo/master`追踪远程仓库的`master`分支\n\n   ​\n\n   ​","slug":"Git使用手册","published":1,"updated":"2018-06-10T12:02:35.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbcbg830005v8w0zv6fsxhz","content":"<h4 id=\"1-下载安装Git-2-8-3-64-bit-exe程序\"><a href=\"#1-下载安装Git-2-8-3-64-bit-exe程序\" class=\"headerlink\" title=\"1. 下载安装Git-2.8.3-64-bit.exe程序\"></a>1. 下载安装Git-2.8.3-64-bit.exe程序</h4><ul>\n<li>默认选项一直next即可。</li>\n</ul>\n<ul>\n<li><p>本地初始化git的配置项，设置username和email，使用如下命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"123abc@163.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>–global 表示全局属性，所有的git项目都会公用这个属性。因为Git是分布式版本控制系统，需要一个用户名和email作为一个标识。</p>\n<a id=\"more\"></a>\n<h4 id=\"2-配置ssh-key\"><a href=\"#2-配置ssh-key\" class=\"headerlink\" title=\"2. 配置ssh key\"></a>2. 配置ssh key</h4><ul>\n<li><p><strong>生成秘钥对</strong> </p>\n<p>在Git Bash中输入以下命令 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;123abc@163.com&quot;</span><br></pre></td></tr></table></figure>\n<p>之后可以不用设置密码，按下3个回车键即可。接下来可以去默认路径 <code>C:\\Users\\banana\\.ssh</code>下查看生成的两个文件，分别为 私钥：<code>id_rsa</code> 公钥：<code>id_rsa.pub</code> </p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324002602.png\" alt=\"\"></p>\n</li>\n<li><p>​ <strong>添加公钥到远程仓库</strong><br>打开GitHub主页，在<code>Settings</code>–&gt;<code>SSH and GPG keys</code>中，点击<code>New SSH key</code> 按钮；</p>\n<p>再打开公钥文件，将其中的字符串完整复制，粘贴到<code>key</code> 中</p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324002258.png\" alt=\"\"></p>\n<p>执行<code>ssh -T git@github.com</code> 命令，查看公钥是否配置成功了，如下图所示则表示成功：</p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324213757.png\" alt=\"\"></p>\n</li>\n<li><p><strong>将私钥添加到自己的系统中</strong> </p>\n<p>使用命令： <code>ssh-add ~/.ssh/id_rsa</code>  添加私钥至系统中，若无效的话，建议采取以下两种方法：</p>\n<ol>\n<li>先执行 <code>eval &#39;ssh-agent-s&#39;</code> 再执行 <code>ssh-add ~/.ssh/id_rsa</code> ；</li>\n<li>先执行<code>ssh-agent bash --login -i</code> 启动bash，或者说把bash挂到ssh-agent下面，再执行 <code>ssh-add</code></li>\n</ol>\n<p>当看到下图所示结果时，则表示成功了</p>\n</li>\n</ul>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324003452.png\" alt=\"\"></p>\n<h4 id=\"3-配置远程仓库\"><a href=\"#3-配置远程仓库\" class=\"headerlink\" title=\"3. 配置远程仓库\"></a>3. 配置远程仓库</h4><ul>\n<li><p>登录github账号，新建一个远程仓库。</p>\n</li>\n<li><p>在本地建一个与仓库同名的文件夹，在文件夹中打开Git Bash，执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;# commang&quot; &gt;&gt; README.md</span><br><span class=\"line\">新建一个README.md文件，写入“# commang”</span><br><span class=\"line\">git init</span><br><span class=\"line\">初始化git文件夹，创建master分支和.git文件夹</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">将工作区中的README.md文件添加进暂存区</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">将暂存区的文件提交到master分支上</span><br><span class=\"line\">git remote add origin git@github.com:abc/gitTest.git</span><br><span class=\"line\">配置远程仓库地址命名为origin</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\">将本地master分支的数据push到远程仓库的master分支上</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若没能成功push去服务器的话，可以去检查下本地<code>.git</code> 文件夹下的<code>config</code> 文件，其中的url必须与上述命令中的远程地址相同。</p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324141838.png\" alt=\"\"></p>\n<h4 id=\"4-安装TortoiseGit-2-6-0-0-64bit-msi文件\"><a href=\"#4-安装TortoiseGit-2-6-0-0-64bit-msi文件\" class=\"headerlink\" title=\"4.安装TortoiseGit-2.6.0.0-64bit.msi文件\"></a>4.安装TortoiseGit-2.6.0.0-64bit.msi文件</h4></li>\n</ul>\n<p><a href=\"https://tortoisegit.org/download/\" target=\"_blank\" rel=\"noopener\">下载TortoiseGit和中文语言包</a></p>\n<ul>\n<li><p>默认选项一直next即可。</p>\n</li>\n<li><p>创建本地仓库，在文件夹中<code>右键--&gt;Git在这里创建版本库</code> （我使用的是中文版本），如下图：<br><img src=\"/2018/06/10/Git使用手册/微信截图_20180324214536.png\" alt=\"\"></p>\n<p>不用勾选，直接确定即可。</p>\n</li>\n<li><p><strong>设置网络和远端</strong> </p>\n<p><strong>1. <code>右键--&gt;设置</code> 将本地安装Git的ssh.exe路径地址配置到网络上，如下图：</strong></p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324215326.png\" alt=\"\"></p>\n<p>我的Git是安装在<code>C:\\software\\Git\\</code>路径下 。</p>\n<p><strong>2. 将远程仓库的地址粘贴到<code>URL</code>和<code>推送URL</code> 中，如下图：</strong></p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324214754.png\" alt=\"\"></p>\n</li>\n<li><p>至此，你已经可以愉快的使用右键进行push和update了，但是会时不时遇到需要输入密码，但是你怎么输都不对的情况。</p>\n</li>\n</ul>\n<h4 id=\"5-使用本地Pageant记住你的私钥密码\"><a href=\"#5-使用本地Pageant记住你的私钥密码\" class=\"headerlink\" title=\"5. 使用本地Pageant记住你的私钥密码\"></a>5. 使用本地<code>Pageant</code>记住你的私钥密码</h4><ol>\n<li><p>开始菜单找到TortoiseGit菜单下的puttygen，打开puttygen</p>\n<p><img src=\"/2018/06/10/Git使用手册/1.png\" alt=\"\"></p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>选择导入秘钥</p>\n<p><img src=\"/2018/06/10/Git使用手册/2.png\" alt=\"\"></p>\n</li>\n<li><p>选择C:\\Users\\Administrator.ssh目录下的私钥，并输入秘钥密码</p>\n<p><img src=\"/2018/06/10/Git使用手册/3.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/Git使用手册/3.1.png\" alt=\"\"></p>\n</li>\n<li><p>选择save private key，将私钥另存为ppk格式的秘钥</p>\n<p><img src=\"/2018/06/10/Git使用手册/4.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/Git使用手册/4.1.png\" alt=\"\"></p>\n</li>\n<li><p>开始菜单找到TortoiseGit菜单下的pageant，打开</p>\n<p><img src=\"/2018/06/10/Git使用手册/5.png\" alt=\"\"></p>\n</li>\n<li><p>点击add key，选择ppk秘钥，输入密码</p>\n<p><img src=\"/2018/06/10/Git使用手册/6.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/Git使用手册/6.1.png\" alt=\"\"></p>\n<p>每次开机启动pagent并添加ppk秘钥</p>\n</li>\n<li><p>点击torise git – settings </p>\n<p><img src=\"/2018/06/10/Git使用手册/7.png\" alt=\"\"></p>\n</li>\n<li><p>设置network—ssh的路径，设置为“C:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe” </p>\n<p><img src=\"/2018/06/10/Git使用手册/8.png\" alt=\"\"></p>\n</li>\n</ol>\n<h4 id=\"6-使用过程遇到的问题\"><a href=\"#6-使用过程遇到的问题\" class=\"headerlink\" title=\"6. 使用过程遇到的问题\"></a>6. 使用过程遇到的问题</h4><ol>\n<li><p><strong>在新文件下拉取远程仓库报错：You asked to pull from the remote ‘origin’, but did not specify:a branch. Because this is not the default configured remotefor your current branch, you must specify a branch on the command line.</strong></p>\n<p>找到：<code>.git/config</code>文件 添加如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[branch &quot;master&quot;]</span><br><span class=\"line\">    remote = origin</span><br><span class=\"line\">    merge = refs/heads/master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在设置git远端地址时，尽量修改远端名称</strong> </p>\n<p><img src=\"/2018/06/10/Git使用手册/C:/Users\\banana\\Pictures\\微信截图_20180327222554.png\" alt=\"\"></p>\n<p>如果不设置的话，在同一个文件夹下，新建两个文件夹，在这两个文件夹中分别拉取不同仓库的内容时就会报错</p>\n</li>\n<li><p><strong>当新建了一个空的远程仓库，本地创建了一个关联到远端地址的仓库后，不要尝试拉取，否则会报出<code>Couldn&#39;t find remote ref master</code>错误信息</strong></p>\n</li>\n<li><p><strong>idea使用Git时，需要配置ssh</strong></p>\n<ul>\n<li><strong>设置私钥地址</strong></li>\n</ul>\n<p><img src=\"/2018/06/10/Git使用手册/C:/Users\\banana\\Pictures\\微信截图_20180327233928.png\" alt=\"\"></p>\n<p>​</p>\n<ul>\n<li><strong>设置Git地址和SSH executable 为Native</strong></li>\n</ul>\n<p><img src=\"/2018/06/10/Git使用手册/C:/Users\\banana\\Pictures\\微信截图_20180327234038.png\" alt=\"\"></p>\n<ul>\n<li><p><strong>设置github地址</strong></p>\n<p><img src=\"/2018/06/10/Git使用手册/C:/Users\\banana\\Pictures\\微信截图_20180327234303.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li><p><strong>对于重命名改名字等操作都可以在本地，修改完后添加进版本控制再push到远端仓库即可</strong></p>\n</li>\n<li><p>对于在第2步中修改了本地远端的名称的操作，如果在idea中拉取代码的话，回报出这个错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Can&apos;t Update</span><br><span class=\"line\">\t\t\tNo tracked branch configured for branch master or the branch doesn&apos;t exist.</span><br><span class=\"line\">\t\t\tTo make your branch track a remote branch call, for example,</span><br><span class=\"line\">\t\t\tgit branch --set-upstream-to origin/master master (show balloon)</span><br></pre></td></tr></table></figure>\n<p>此时，可以执行命令<code>git branch --set-upstream-to origin-repo/master master</code> 意思是使我们在git设置的本地远程名称<code>origin-repo/master</code>追踪远程仓库的<code>master</code>分支</p>\n<p>​</p>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"1-下载安装Git-2-8-3-64-bit-exe程序\"><a href=\"#1-下载安装Git-2-8-3-64-bit-exe程序\" class=\"headerlink\" title=\"1. 下载安装Git-2.8.3-64-bit.exe程序\"></a>1. 下载安装Git-2.8.3-64-bit.exe程序</h4><ul>\n<li>默认选项一直next即可。</li>\n</ul>\n<ul>\n<li><p>本地初始化git的配置项，设置username和email，使用如下命令：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"abc\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"123abc@163.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>–global 表示全局属性，所有的git项目都会公用这个属性。因为Git是分布式版本控制系统，需要一个用户名和email作为一个标识。</p>","more":"<h4 id=\"2-配置ssh-key\"><a href=\"#2-配置ssh-key\" class=\"headerlink\" title=\"2. 配置ssh key\"></a>2. 配置ssh key</h4><ul>\n<li><p><strong>生成秘钥对</strong> </p>\n<p>在Git Bash中输入以下命令 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;123abc@163.com&quot;</span><br></pre></td></tr></table></figure>\n<p>之后可以不用设置密码，按下3个回车键即可。接下来可以去默认路径 <code>C:\\Users\\banana\\.ssh</code>下查看生成的两个文件，分别为 私钥：<code>id_rsa</code> 公钥：<code>id_rsa.pub</code> </p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324002602.png\" alt=\"\"></p>\n</li>\n<li><p>​ <strong>添加公钥到远程仓库</strong><br>打开GitHub主页，在<code>Settings</code>–&gt;<code>SSH and GPG keys</code>中，点击<code>New SSH key</code> 按钮；</p>\n<p>再打开公钥文件，将其中的字符串完整复制，粘贴到<code>key</code> 中</p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324002258.png\" alt=\"\"></p>\n<p>执行<code>ssh -T git@github.com</code> 命令，查看公钥是否配置成功了，如下图所示则表示成功：</p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324213757.png\" alt=\"\"></p>\n</li>\n<li><p><strong>将私钥添加到自己的系统中</strong> </p>\n<p>使用命令： <code>ssh-add ~/.ssh/id_rsa</code>  添加私钥至系统中，若无效的话，建议采取以下两种方法：</p>\n<ol>\n<li>先执行 <code>eval &#39;ssh-agent-s&#39;</code> 再执行 <code>ssh-add ~/.ssh/id_rsa</code> ；</li>\n<li>先执行<code>ssh-agent bash --login -i</code> 启动bash，或者说把bash挂到ssh-agent下面，再执行 <code>ssh-add</code></li>\n</ol>\n<p>当看到下图所示结果时，则表示成功了</p>\n</li>\n</ul>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324003452.png\" alt=\"\"></p>\n<h4 id=\"3-配置远程仓库\"><a href=\"#3-配置远程仓库\" class=\"headerlink\" title=\"3. 配置远程仓库\"></a>3. 配置远程仓库</h4><ul>\n<li><p>登录github账号，新建一个远程仓库。</p>\n</li>\n<li><p>在本地建一个与仓库同名的文件夹，在文件夹中打开Git Bash，执行如下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;# commang&quot; &gt;&gt; README.md</span><br><span class=\"line\">新建一个README.md文件，写入“# commang”</span><br><span class=\"line\">git init</span><br><span class=\"line\">初始化git文件夹，创建master分支和.git文件夹</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">将工作区中的README.md文件添加进暂存区</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">将暂存区的文件提交到master分支上</span><br><span class=\"line\">git remote add origin git@github.com:abc/gitTest.git</span><br><span class=\"line\">配置远程仓库地址命名为origin</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\">将本地master分支的数据push到远程仓库的master分支上</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若没能成功push去服务器的话，可以去检查下本地<code>.git</code> 文件夹下的<code>config</code> 文件，其中的url必须与上述命令中的远程地址相同。</p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324141838.png\" alt=\"\"></p>\n<h4 id=\"4-安装TortoiseGit-2-6-0-0-64bit-msi文件\"><a href=\"#4-安装TortoiseGit-2-6-0-0-64bit-msi文件\" class=\"headerlink\" title=\"4.安装TortoiseGit-2.6.0.0-64bit.msi文件\"></a>4.安装TortoiseGit-2.6.0.0-64bit.msi文件</h4></li>\n</ul>\n<p><a href=\"https://tortoisegit.org/download/\" target=\"_blank\" rel=\"noopener\">下载TortoiseGit和中文语言包</a></p>\n<ul>\n<li><p>默认选项一直next即可。</p>\n</li>\n<li><p>创建本地仓库，在文件夹中<code>右键--&gt;Git在这里创建版本库</code> （我使用的是中文版本），如下图：<br><img src=\"/2018/06/10/Git使用手册/微信截图_20180324214536.png\" alt=\"\"></p>\n<p>不用勾选，直接确定即可。</p>\n</li>\n<li><p><strong>设置网络和远端</strong> </p>\n<p><strong>1. <code>右键--&gt;设置</code> 将本地安装Git的ssh.exe路径地址配置到网络上，如下图：</strong></p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324215326.png\" alt=\"\"></p>\n<p>我的Git是安装在<code>C:\\software\\Git\\</code>路径下 。</p>\n<p><strong>2. 将远程仓库的地址粘贴到<code>URL</code>和<code>推送URL</code> 中，如下图：</strong></p>\n<p><img src=\"/2018/06/10/Git使用手册/微信截图_20180324214754.png\" alt=\"\"></p>\n</li>\n<li><p>至此，你已经可以愉快的使用右键进行push和update了，但是会时不时遇到需要输入密码，但是你怎么输都不对的情况。</p>\n</li>\n</ul>\n<h4 id=\"5-使用本地Pageant记住你的私钥密码\"><a href=\"#5-使用本地Pageant记住你的私钥密码\" class=\"headerlink\" title=\"5. 使用本地Pageant记住你的私钥密码\"></a>5. 使用本地<code>Pageant</code>记住你的私钥密码</h4><ol>\n<li><p>开始菜单找到TortoiseGit菜单下的puttygen，打开puttygen</p>\n<p><img src=\"/2018/06/10/Git使用手册/1.png\" alt=\"\"></p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>选择导入秘钥</p>\n<p><img src=\"/2018/06/10/Git使用手册/2.png\" alt=\"\"></p>\n</li>\n<li><p>选择C:\\Users\\Administrator.ssh目录下的私钥，并输入秘钥密码</p>\n<p><img src=\"/2018/06/10/Git使用手册/3.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/Git使用手册/3.1.png\" alt=\"\"></p>\n</li>\n<li><p>选择save private key，将私钥另存为ppk格式的秘钥</p>\n<p><img src=\"/2018/06/10/Git使用手册/4.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/Git使用手册/4.1.png\" alt=\"\"></p>\n</li>\n<li><p>开始菜单找到TortoiseGit菜单下的pageant，打开</p>\n<p><img src=\"/2018/06/10/Git使用手册/5.png\" alt=\"\"></p>\n</li>\n<li><p>点击add key，选择ppk秘钥，输入密码</p>\n<p><img src=\"/2018/06/10/Git使用手册/6.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/Git使用手册/6.1.png\" alt=\"\"></p>\n<p>每次开机启动pagent并添加ppk秘钥</p>\n</li>\n<li><p>点击torise git – settings </p>\n<p><img src=\"/2018/06/10/Git使用手册/7.png\" alt=\"\"></p>\n</li>\n<li><p>设置network—ssh的路径，设置为“C:\\Program Files\\TortoiseGit\\bin\\TortoisePlink.exe” </p>\n<p><img src=\"/2018/06/10/Git使用手册/8.png\" alt=\"\"></p>\n</li>\n</ol>\n<h4 id=\"6-使用过程遇到的问题\"><a href=\"#6-使用过程遇到的问题\" class=\"headerlink\" title=\"6. 使用过程遇到的问题\"></a>6. 使用过程遇到的问题</h4><ol>\n<li><p><strong>在新文件下拉取远程仓库报错：You asked to pull from the remote ‘origin’, but did not specify:a branch. Because this is not the default configured remotefor your current branch, you must specify a branch on the command line.</strong></p>\n<p>找到：<code>.git/config</code>文件 添加如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[branch &quot;master&quot;]</span><br><span class=\"line\">    remote = origin</span><br><span class=\"line\">    merge = refs/heads/master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在设置git远端地址时，尽量修改远端名称</strong> </p>\n<p><img src=\"/2018/06/10/Git使用手册/C:/Users\\banana\\Pictures\\微信截图_20180327222554.png\" alt=\"\"></p>\n<p>如果不设置的话，在同一个文件夹下，新建两个文件夹，在这两个文件夹中分别拉取不同仓库的内容时就会报错</p>\n</li>\n<li><p><strong>当新建了一个空的远程仓库，本地创建了一个关联到远端地址的仓库后，不要尝试拉取，否则会报出<code>Couldn&#39;t find remote ref master</code>错误信息</strong></p>\n</li>\n<li><p><strong>idea使用Git时，需要配置ssh</strong></p>\n<ul>\n<li><strong>设置私钥地址</strong></li>\n</ul>\n<p><img src=\"/2018/06/10/Git使用手册/C:/Users\\banana\\Pictures\\微信截图_20180327233928.png\" alt=\"\"></p>\n<p>​</p>\n<ul>\n<li><strong>设置Git地址和SSH executable 为Native</strong></li>\n</ul>\n<p><img src=\"/2018/06/10/Git使用手册/C:/Users\\banana\\Pictures\\微信截图_20180327234038.png\" alt=\"\"></p>\n<ul>\n<li><p><strong>设置github地址</strong></p>\n<p><img src=\"/2018/06/10/Git使用手册/C:/Users\\banana\\Pictures\\微信截图_20180327234303.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li><p><strong>对于重命名改名字等操作都可以在本地，修改完后添加进版本控制再push到远端仓库即可</strong></p>\n</li>\n<li><p>对于在第2步中修改了本地远端的名称的操作，如果在idea中拉取代码的话，回报出这个错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Can&apos;t Update</span><br><span class=\"line\">\t\t\tNo tracked branch configured for branch master or the branch doesn&apos;t exist.</span><br><span class=\"line\">\t\t\tTo make your branch track a remote branch call, for example,</span><br><span class=\"line\">\t\t\tgit branch --set-upstream-to origin/master master (show balloon)</span><br></pre></td></tr></table></figure>\n<p>此时，可以执行命令<code>git branch --set-upstream-to origin-repo/master master</code> 意思是使我们在git设置的本地远程名称<code>origin-repo/master</code>追踪远程仓库的<code>master</code>分支</p>\n<p>​</p>\n<p>​</p>\n</li>\n</ol>"},{"title":"HashMap源码解析","_content":"\n\n\n# HashMap源码\n\n## 1.构造器\n\n```java\n/**\n构造器默认两个参数：initialCapacity 哈希表（键值对数组）初始化容量（默认为16,2的4次方\n\t\t\t     loadFactor 加载因子 （默认为0.75）\n*/\npublic HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n\n        this.loadFactor = loadFactor;\n        threshold = initialCapacity;\n        init();\n    }\n```\n\n<!--more-->\n\n## 2.方法\n\n```java\n    void addEntry(int hash, K key, V value, int bucketIndex) {\n      //判断是否需要对原先的hash表扩容\n        if ((size >= threshold) && (null != table[bucketIndex])) {\n          //对hash表扩容 并将旧hash表的内容放入新hash表中\n            resize(2 * table.length);\n          //通过hash()方法来获取key的hash值\n            hash = (null != key) ? hash(key) : 0;\n          //根据hash值重新获取Entry在数组中的index\n            bucketIndex = indexFor(hash, table.length);\n        }\n\t\t//新增一个键值对 在hash表中的bucketIndex位置放入一个Entry\n        createEntry(hash, key, value, bucketIndex);\n    }\n```\n\n```java\n    void resize(int newCapacity) {\n        Entry[] oldTable = table;\n        int oldCapacity = oldTable.length;\n        if (oldCapacity == MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return;\n        }\n        Entry[] newTable = new Entry[newCapacity];\n      //将所有的旧hash表的键值对转换到新hash表上\n        transfer(newTable, initHashSeedAsNeeded(newCapacity));\n        table = newTable;\n        threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n    }\n```\n\n```java\n   public void clear() {\n        modCount++;\n     //使用Arrays工具类，将hash表的数据都填充成null\n        Arrays.fill(table, null);\n        size = 0;\n    }\n```\n\n```java\n    final Entry<K,V> getEntry(Object key) {\n        if (size == 0) {\n            return null;\n        }\n\t  //获取key的hash值\n        int hash = (key == null) ? 0 : hash(key);\n      //遍历在hash表中key的hash值所对应位置的链表 通过key.equasls方法来确定key所对应的键值对\n        for (Entry<K,V> e = table[indexFor(hash, table.length)];\n             e != null;\n             e = e.next) {\n            Object k;\n            if (e.hash == hash &&\n                ((k = e.key) == key || (key != null && key.equals(k))))\n                return e;\n        }\n        return null;\n    }\n```\n\n```java\n    public V put(K key, V value) {\n        if (table == EMPTY_TABLE) {\n        //给hash表扩容，若表为空，则按照初始化时的threshold值创建hash表。\n        //threshold=capacity * loadFactor\n        //若不为空，则该方法扩容为原来hash表的2倍\n            inflateTable(threshold);\n        }\n        if (key == null)\n            return putForNullKey(value);\n        int hash = hash(key);\n        int i = indexFor(hash, table.length);\n      //若根据key的hash值计算出的hash表位置已经存在了键值对，则遍历该链表，将新的Entry添加到链表的最后\n        for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n            Object k;\n            if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n                V oldValue = e.value;\n                e.value = value;\n                e.recordAccess(this);\n                return oldValue;\n            }\n        }\n\t //将hash表的修改次数+1 为了实现fast-fail机制\n        modCount++;\n        addEntry(hash, key, value, i);\n        return null;\n    }\n```\n\n```java\n    final Entry<K,V> removeEntryForKey(Object key) {\n        if (size == 0) {\n            return null;\n        }\n        int hash = (key == null) ? 0 : hash(key);\n        int i = indexFor(hash, table.length);\n      //指向链表当前对象前一个对象的引用\n        Entry<K,V> prev = table[i];\n      //指向链表当前对象的引用\n        Entry<K,V> e = prev;\n\n        while (e != null) {\n          //遍历链表数据直至找到key对应的Entry\n          //next为指向链表当前数据下一个对象的引用\n            Entry<K,V> next = e.next;\n            Object k;\n            if (e.hash == hash &&\n                ((k = e.key) == key || (key != null && key.equals(k)))) {\n              //hash表修改次数+1\n                modCount++;\n              //hash表的大小-1\n                size--;\n              //此时当前一个链表前一个数据与当前数据为同一个对象，说明hash表当前位置不存在链表，\n              //直接将key所对应hash表当前数据的next引用指向当前数据的下一个对象。（链表的删除思想）\n                if (prev == e)\n                    table[i] = next;\n                else\n                  //此时说明hash表当前位置存在链表，将前一个数据的next引用指向当前数据的下一个对象\n                    prev.next = next;\n              //这是Entry内部类定义的hook方法，每次删除数据都需要调用一次。\n                e.recordRemoval(this);\n                return e;\n            }\n            prev = e;\n            e = next;\n        }\n        return e;\n    }\n```\n\nhook方法就是钩子方法\n\n## 3. Entry类\n\n```java\n//静态内部类 实现了Map类的内部接口 用于存储键值对\nstatic class Entry<K,V> implements Map.Entry<K,V> {\n        final K key;\n        V value;\n        Entry<K,V> next;\n        int hash;\n\n        /**\n         * Creates new entry.\n         */\n        Entry(int h, K k, V v, Entry<K,V> n) {\n            value = v;\n            next = n;\n            key = k;\n            hash = h;\n        }\n\n        public final K getKey() {\n            return key;\n        }\n\n        public final V getValue() {\n            return value;\n        }\n\n        public final V setValue(V newValue) {\n            V oldValue = value;\n            value = newValue;\n            return oldValue;\n        }\n\t//复写equals方法\n        public final boolean equals(Object o) {\n            if (!(o instanceof Map.Entry))\n                return false;\n            Map.Entry e = (Map.Entry)o;\n            Object k1 = getKey();\n            Object k2 = e.getKey();\n            if (k1 == k2 || (k1 != null && k1.equals(k2))) {\n                Object v1 = getValue();\n                Object v2 = e.getValue();\n                if (v1 == v2 || (v1 != null && v1.equals(v2)))\n                    return true;\n            }\n            return false;\n        }\n\n        public final int hashCode() {\n            return Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());\n        }\n\n        public final String toString() {\n            return getKey() + \"=\" + getValue();\n        }\n\n        /**\n         * This method is invoked whenever the value in an entry is\n         * overwritten by an invocation of put(k,v) for a key k that's already\n         * in the HashMap.\n         */\n        void recordAccess(HashMap<K,V> m) {\n        }\n\n        /**\n         * This method is invoked whenever the entry is\n         * removed from the table.\n         */\n        void recordRemoval(HashMap<K,V> m) {\n        }\n    }\n\n```\n\n\n\n## 4.迭代器\n\n```java\n    //通过一个抽象内部类HashIterator实现了Iterator接口 \n    //HashMap提供的key和value迭代器都是通过继承这个HashIterator实现的\n\tprivate abstract class HashIterator<E> implements Iterator<E> {\n        Entry<K,V> next;        // next entry to return\n        int expectedModCount;   // For fast-fail\n        int index;              // current slot\n        Entry<K,V> current;     // current entry\n\n        HashIterator() {\n            expectedModCount = modCount;\n            if (size > 0) { // advance to first entry\n                Entry[] t = table;\n                while (index < t.length && (next = t[index++]) == null)\n                    ;\n            }\n        }\n\n        public final boolean hasNext() {\n            return next != null;\n        }\n\n        final Entry<K,V> nextEntry() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n            Entry<K,V> e = next;\n            if (e == null)\n                throw new NoSuchElementException();\n\n            if ((next = e.next) == null) {\n                Entry[] t = table;\n              //当next为null时说明e是hash表当前index位置的链表的最后一个元素\n              //通过while语句内的方式实现next往后移位直至不为null的一个元素\n                while (index < t.length && (next = t[index++]) == null)\n                    ;\n            }\n            current = e;\n            return e;\n        }\n\n        public void remove() {\n            if (current == null)\n                throw new IllegalStateException();\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n            Object k = current.key;\n            current = null;\n            HashMap.this.removeEntryForKey(k);\n            expectedModCount = modCount;\n        }\n    }\n```\n\n```java\n\t//value迭代器内部类\n\tprivate final class ValueIterator extends HashIterator<V> {\n        public V next() {\n            return nextEntry().value;\n        }\n    }\n\t//key迭代器内部类\n    private final class KeyIterator extends HashIterator<K> {\n        public K next() {\n            return nextEntry().getKey();\n        }\n    }\n\t//Entry迭代器内部类\n    private final class EntryIterator extends HashIterator<Map.Entry<K,V>> {\n        public Map.Entry<K,V> next() {\n            return nextEntry();\n        }\n    }\n```\n\n## 5.关于hash表的两个问题\n\n- 如何设计才能使减小hash冲突？\n\n针对如何获取在hash表中的位置，HashMap中主要通过三个部分来减小散列冲突：\n\n> 1. 第一部分，首先根据Object.hashcode得到一个散列值，Object.hashCode是一个native方法。一般情况下可以认为是该对象的地址信息散列得到的，也就是相当于是对象的ID，同一个对象有相同的ID。这样得到的散列值还是比较合理的.\n\n```java\n    final int hash(Object k) {\n        int h = hashSeed;\n        //对于String的hashCode需要另外计算\n        if (0 != h && k instanceof String) {\n            return sun.misc.Hashing.stringHash32((String) k);\n        }\n\t  \n        h ^= k.hashCode();\n\n        // This function ensures that hashCodes that differ only by\n        // constant multiples at each bit position have a bounded\n        // number of collisions (approximately 8 at default load factor).\n        //二次散列\n        h ^= (h >>> 20) ^ (h >>> 12);\n        return h ^ (h >>> 7) ^ (h >>> 4);\n    }\n```\n\n> 第二部分，桶的数量设计。一般由哈希值得到桶的位置都是将哈希值除以桶的数量得到的余数就是桶的位置。一般来说想要尽可能的减少散列冲突有两类办法，一类是使用素数数量的桶，例如hashTable，一类是使用2的幂次数量的桶，例如hashmap，hashmap使用2的次幂的桶有个好处，就是可以用位运算来算，只要将散列值和桶的数量-1相与就是桶的位置不需要除。这样相对来说速度快一些。hashmap里有个静态方法indexof就是用来做这个的。具体下文会说到。\n\n```java\n    static int indexFor(int h, int length) {\n        // assert Integer.bitCount(length) == 1 : \"length must be a non-zero power of 2\";\n        //长度为2的幂次的hash表，用位运算来将散列值和桶的数量-1相与 就是数组的index,这样比采用除更快\n      \t//比如length是4，那如果h是0-3则返回的值就是0-3，如果是h=4则返回0，h=5则返回1\n      \t//length-1是因为数组下标从0开始\n        return h & (length-1);\n    }\n\n```\n\n> 第三部分，hashseed，第二部分中曾经说道通过将哈希值与桶的数量-1相与得到桶的位置。但是这样做有一个小的问题。当哈希值非常大，而桶的数量很小的时候回出现仅仅依靠哈希值的低位来散列的结果。这样即使散列值做的很好耶没有办法得到很好的散列。这时hashseed的作用就体现出来的，hashseed通过右移部分哈希值，然后将其亦或得到的结果进行在进行定位桶的位置。这样做就综合考虑了高位和低位的值。从而减小了散列冲突的可能性。此外由于java的语言特性，对于String的情况其hashseed需要额外设计。\n\n```java\nprivate static class Holder {\n\n        /**\n         * Table capacity above which to switch to use alternative hashing.\n         */\n        static final int ALTERNATIVE_HASHING_THRESHOLD;\n\n        static {\n            String altThreshold = java.security.AccessController.doPrivileged(\n                new sun.security.action.GetPropertyAction(\n                    \"jdk.map.althashing.threshold\"));\n\n            int threshold;\n            try {\n                threshold = (null != altThreshold)\n                        ? Integer.parseInt(altThreshold)\n                        : ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;\n\n                // disable alternative hashing if -1\n                if (threshold == -1) {\n                    threshold = Integer.MAX_VALUE;\n                }\n\n                if (threshold < 0) {\n                    throw new IllegalArgumentException(\"value must be positive integer.\");\n                }\n            } catch(IllegalArgumentException failed) {\n                throw new Error(\"Illegal value for 'jdk.map.althashing.threshold'\", failed);\n            }\n\t\t\n            ALTERNATIVE_HASHING_THRESHOLD = threshold;\n        }\n    }\n```\n\n`static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE;`但是这个静态类常量也是可以根据虚拟机参数的设定来更改的。这也就是Holder这个类这段静态代码的意义了。可以通过调整虚拟机的参数来设定这个域值。 \n关于Holder类是参考别人的文章来的，说实话我也没有完全搞清楚。\n\n- 在发生hash冲突时，如何解决？\n\n在发生hash冲突之后，HashMap采用单向链表方式来存储键值对。在前面介绍的`getEntry`、`put`等方法的时候，都有遍历链表。\n\n## 关于final\n\n加上final的仅仅是相当于当前的引用不在改变，但是容器的元素是恶意增删的，元素的内容也是可以改变的。\n\n## 参考链接\n\n[参考文章一](https://blog.csdn.net/u011518120/article/details/53640181)\n\n","source":"_posts/HashMap源码.md","raw":"---\ntitle: HashMap源码解析\ncategories: \"Java基础\"\ntags: \"集合源码\"\n---\n\n\n\n# HashMap源码\n\n## 1.构造器\n\n```java\n/**\n构造器默认两个参数：initialCapacity 哈希表（键值对数组）初始化容量（默认为16,2的4次方\n\t\t\t     loadFactor 加载因子 （默认为0.75）\n*/\npublic HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n\n        this.loadFactor = loadFactor;\n        threshold = initialCapacity;\n        init();\n    }\n```\n\n<!--more-->\n\n## 2.方法\n\n```java\n    void addEntry(int hash, K key, V value, int bucketIndex) {\n      //判断是否需要对原先的hash表扩容\n        if ((size >= threshold) && (null != table[bucketIndex])) {\n          //对hash表扩容 并将旧hash表的内容放入新hash表中\n            resize(2 * table.length);\n          //通过hash()方法来获取key的hash值\n            hash = (null != key) ? hash(key) : 0;\n          //根据hash值重新获取Entry在数组中的index\n            bucketIndex = indexFor(hash, table.length);\n        }\n\t\t//新增一个键值对 在hash表中的bucketIndex位置放入一个Entry\n        createEntry(hash, key, value, bucketIndex);\n    }\n```\n\n```java\n    void resize(int newCapacity) {\n        Entry[] oldTable = table;\n        int oldCapacity = oldTable.length;\n        if (oldCapacity == MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return;\n        }\n        Entry[] newTable = new Entry[newCapacity];\n      //将所有的旧hash表的键值对转换到新hash表上\n        transfer(newTable, initHashSeedAsNeeded(newCapacity));\n        table = newTable;\n        threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n    }\n```\n\n```java\n   public void clear() {\n        modCount++;\n     //使用Arrays工具类，将hash表的数据都填充成null\n        Arrays.fill(table, null);\n        size = 0;\n    }\n```\n\n```java\n    final Entry<K,V> getEntry(Object key) {\n        if (size == 0) {\n            return null;\n        }\n\t  //获取key的hash值\n        int hash = (key == null) ? 0 : hash(key);\n      //遍历在hash表中key的hash值所对应位置的链表 通过key.equasls方法来确定key所对应的键值对\n        for (Entry<K,V> e = table[indexFor(hash, table.length)];\n             e != null;\n             e = e.next) {\n            Object k;\n            if (e.hash == hash &&\n                ((k = e.key) == key || (key != null && key.equals(k))))\n                return e;\n        }\n        return null;\n    }\n```\n\n```java\n    public V put(K key, V value) {\n        if (table == EMPTY_TABLE) {\n        //给hash表扩容，若表为空，则按照初始化时的threshold值创建hash表。\n        //threshold=capacity * loadFactor\n        //若不为空，则该方法扩容为原来hash表的2倍\n            inflateTable(threshold);\n        }\n        if (key == null)\n            return putForNullKey(value);\n        int hash = hash(key);\n        int i = indexFor(hash, table.length);\n      //若根据key的hash值计算出的hash表位置已经存在了键值对，则遍历该链表，将新的Entry添加到链表的最后\n        for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n            Object k;\n            if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n                V oldValue = e.value;\n                e.value = value;\n                e.recordAccess(this);\n                return oldValue;\n            }\n        }\n\t //将hash表的修改次数+1 为了实现fast-fail机制\n        modCount++;\n        addEntry(hash, key, value, i);\n        return null;\n    }\n```\n\n```java\n    final Entry<K,V> removeEntryForKey(Object key) {\n        if (size == 0) {\n            return null;\n        }\n        int hash = (key == null) ? 0 : hash(key);\n        int i = indexFor(hash, table.length);\n      //指向链表当前对象前一个对象的引用\n        Entry<K,V> prev = table[i];\n      //指向链表当前对象的引用\n        Entry<K,V> e = prev;\n\n        while (e != null) {\n          //遍历链表数据直至找到key对应的Entry\n          //next为指向链表当前数据下一个对象的引用\n            Entry<K,V> next = e.next;\n            Object k;\n            if (e.hash == hash &&\n                ((k = e.key) == key || (key != null && key.equals(k)))) {\n              //hash表修改次数+1\n                modCount++;\n              //hash表的大小-1\n                size--;\n              //此时当前一个链表前一个数据与当前数据为同一个对象，说明hash表当前位置不存在链表，\n              //直接将key所对应hash表当前数据的next引用指向当前数据的下一个对象。（链表的删除思想）\n                if (prev == e)\n                    table[i] = next;\n                else\n                  //此时说明hash表当前位置存在链表，将前一个数据的next引用指向当前数据的下一个对象\n                    prev.next = next;\n              //这是Entry内部类定义的hook方法，每次删除数据都需要调用一次。\n                e.recordRemoval(this);\n                return e;\n            }\n            prev = e;\n            e = next;\n        }\n        return e;\n    }\n```\n\nhook方法就是钩子方法\n\n## 3. Entry类\n\n```java\n//静态内部类 实现了Map类的内部接口 用于存储键值对\nstatic class Entry<K,V> implements Map.Entry<K,V> {\n        final K key;\n        V value;\n        Entry<K,V> next;\n        int hash;\n\n        /**\n         * Creates new entry.\n         */\n        Entry(int h, K k, V v, Entry<K,V> n) {\n            value = v;\n            next = n;\n            key = k;\n            hash = h;\n        }\n\n        public final K getKey() {\n            return key;\n        }\n\n        public final V getValue() {\n            return value;\n        }\n\n        public final V setValue(V newValue) {\n            V oldValue = value;\n            value = newValue;\n            return oldValue;\n        }\n\t//复写equals方法\n        public final boolean equals(Object o) {\n            if (!(o instanceof Map.Entry))\n                return false;\n            Map.Entry e = (Map.Entry)o;\n            Object k1 = getKey();\n            Object k2 = e.getKey();\n            if (k1 == k2 || (k1 != null && k1.equals(k2))) {\n                Object v1 = getValue();\n                Object v2 = e.getValue();\n                if (v1 == v2 || (v1 != null && v1.equals(v2)))\n                    return true;\n            }\n            return false;\n        }\n\n        public final int hashCode() {\n            return Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());\n        }\n\n        public final String toString() {\n            return getKey() + \"=\" + getValue();\n        }\n\n        /**\n         * This method is invoked whenever the value in an entry is\n         * overwritten by an invocation of put(k,v) for a key k that's already\n         * in the HashMap.\n         */\n        void recordAccess(HashMap<K,V> m) {\n        }\n\n        /**\n         * This method is invoked whenever the entry is\n         * removed from the table.\n         */\n        void recordRemoval(HashMap<K,V> m) {\n        }\n    }\n\n```\n\n\n\n## 4.迭代器\n\n```java\n    //通过一个抽象内部类HashIterator实现了Iterator接口 \n    //HashMap提供的key和value迭代器都是通过继承这个HashIterator实现的\n\tprivate abstract class HashIterator<E> implements Iterator<E> {\n        Entry<K,V> next;        // next entry to return\n        int expectedModCount;   // For fast-fail\n        int index;              // current slot\n        Entry<K,V> current;     // current entry\n\n        HashIterator() {\n            expectedModCount = modCount;\n            if (size > 0) { // advance to first entry\n                Entry[] t = table;\n                while (index < t.length && (next = t[index++]) == null)\n                    ;\n            }\n        }\n\n        public final boolean hasNext() {\n            return next != null;\n        }\n\n        final Entry<K,V> nextEntry() {\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n            Entry<K,V> e = next;\n            if (e == null)\n                throw new NoSuchElementException();\n\n            if ((next = e.next) == null) {\n                Entry[] t = table;\n              //当next为null时说明e是hash表当前index位置的链表的最后一个元素\n              //通过while语句内的方式实现next往后移位直至不为null的一个元素\n                while (index < t.length && (next = t[index++]) == null)\n                    ;\n            }\n            current = e;\n            return e;\n        }\n\n        public void remove() {\n            if (current == null)\n                throw new IllegalStateException();\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n            Object k = current.key;\n            current = null;\n            HashMap.this.removeEntryForKey(k);\n            expectedModCount = modCount;\n        }\n    }\n```\n\n```java\n\t//value迭代器内部类\n\tprivate final class ValueIterator extends HashIterator<V> {\n        public V next() {\n            return nextEntry().value;\n        }\n    }\n\t//key迭代器内部类\n    private final class KeyIterator extends HashIterator<K> {\n        public K next() {\n            return nextEntry().getKey();\n        }\n    }\n\t//Entry迭代器内部类\n    private final class EntryIterator extends HashIterator<Map.Entry<K,V>> {\n        public Map.Entry<K,V> next() {\n            return nextEntry();\n        }\n    }\n```\n\n## 5.关于hash表的两个问题\n\n- 如何设计才能使减小hash冲突？\n\n针对如何获取在hash表中的位置，HashMap中主要通过三个部分来减小散列冲突：\n\n> 1. 第一部分，首先根据Object.hashcode得到一个散列值，Object.hashCode是一个native方法。一般情况下可以认为是该对象的地址信息散列得到的，也就是相当于是对象的ID，同一个对象有相同的ID。这样得到的散列值还是比较合理的.\n\n```java\n    final int hash(Object k) {\n        int h = hashSeed;\n        //对于String的hashCode需要另外计算\n        if (0 != h && k instanceof String) {\n            return sun.misc.Hashing.stringHash32((String) k);\n        }\n\t  \n        h ^= k.hashCode();\n\n        // This function ensures that hashCodes that differ only by\n        // constant multiples at each bit position have a bounded\n        // number of collisions (approximately 8 at default load factor).\n        //二次散列\n        h ^= (h >>> 20) ^ (h >>> 12);\n        return h ^ (h >>> 7) ^ (h >>> 4);\n    }\n```\n\n> 第二部分，桶的数量设计。一般由哈希值得到桶的位置都是将哈希值除以桶的数量得到的余数就是桶的位置。一般来说想要尽可能的减少散列冲突有两类办法，一类是使用素数数量的桶，例如hashTable，一类是使用2的幂次数量的桶，例如hashmap，hashmap使用2的次幂的桶有个好处，就是可以用位运算来算，只要将散列值和桶的数量-1相与就是桶的位置不需要除。这样相对来说速度快一些。hashmap里有个静态方法indexof就是用来做这个的。具体下文会说到。\n\n```java\n    static int indexFor(int h, int length) {\n        // assert Integer.bitCount(length) == 1 : \"length must be a non-zero power of 2\";\n        //长度为2的幂次的hash表，用位运算来将散列值和桶的数量-1相与 就是数组的index,这样比采用除更快\n      \t//比如length是4，那如果h是0-3则返回的值就是0-3，如果是h=4则返回0，h=5则返回1\n      \t//length-1是因为数组下标从0开始\n        return h & (length-1);\n    }\n\n```\n\n> 第三部分，hashseed，第二部分中曾经说道通过将哈希值与桶的数量-1相与得到桶的位置。但是这样做有一个小的问题。当哈希值非常大，而桶的数量很小的时候回出现仅仅依靠哈希值的低位来散列的结果。这样即使散列值做的很好耶没有办法得到很好的散列。这时hashseed的作用就体现出来的，hashseed通过右移部分哈希值，然后将其亦或得到的结果进行在进行定位桶的位置。这样做就综合考虑了高位和低位的值。从而减小了散列冲突的可能性。此外由于java的语言特性，对于String的情况其hashseed需要额外设计。\n\n```java\nprivate static class Holder {\n\n        /**\n         * Table capacity above which to switch to use alternative hashing.\n         */\n        static final int ALTERNATIVE_HASHING_THRESHOLD;\n\n        static {\n            String altThreshold = java.security.AccessController.doPrivileged(\n                new sun.security.action.GetPropertyAction(\n                    \"jdk.map.althashing.threshold\"));\n\n            int threshold;\n            try {\n                threshold = (null != altThreshold)\n                        ? Integer.parseInt(altThreshold)\n                        : ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;\n\n                // disable alternative hashing if -1\n                if (threshold == -1) {\n                    threshold = Integer.MAX_VALUE;\n                }\n\n                if (threshold < 0) {\n                    throw new IllegalArgumentException(\"value must be positive integer.\");\n                }\n            } catch(IllegalArgumentException failed) {\n                throw new Error(\"Illegal value for 'jdk.map.althashing.threshold'\", failed);\n            }\n\t\t\n            ALTERNATIVE_HASHING_THRESHOLD = threshold;\n        }\n    }\n```\n\n`static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE;`但是这个静态类常量也是可以根据虚拟机参数的设定来更改的。这也就是Holder这个类这段静态代码的意义了。可以通过调整虚拟机的参数来设定这个域值。 \n关于Holder类是参考别人的文章来的，说实话我也没有完全搞清楚。\n\n- 在发生hash冲突时，如何解决？\n\n在发生hash冲突之后，HashMap采用单向链表方式来存储键值对。在前面介绍的`getEntry`、`put`等方法的时候，都有遍历链表。\n\n## 关于final\n\n加上final的仅仅是相当于当前的引用不在改变，但是容器的元素是恶意增删的，元素的内容也是可以改变的。\n\n## 参考链接\n\n[参考文章一](https://blog.csdn.net/u011518120/article/details/53640181)\n\n","slug":"HashMap源码","published":1,"date":"2018-08-01T16:05:19.138Z","updated":"2018-05-15T03:06:35.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbcbg830007v8w0cpx82ibx","content":"<h1 id=\"HashMap源码\"><a href=\"#HashMap源码\" class=\"headerlink\" title=\"HashMap源码\"></a>HashMap源码</h1><h2 id=\"1-构造器\"><a href=\"#1-构造器\" class=\"headerlink\" title=\"1.构造器\"></a>1.构造器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">构造器默认两个参数：initialCapacity 哈希表（键值对数组）初始化容量（默认为16,2的4次方</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t     loadFactor 加载因子 （默认为0.75）</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</span><br><span class=\"line\">                                               initialCapacity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</span><br><span class=\"line\">                                               loadFactor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">        threshold = initialCapacity;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2.方法\"></a>2.方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEntry</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">int</span> bucketIndex)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否需要对原先的hash表扩容</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((size &gt;= threshold) &amp;&amp; (<span class=\"keyword\">null</span> != table[bucketIndex])) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//对hash表扩容 并将旧hash表的内容放入新hash表中</span></span><br><span class=\"line\">          resize(<span class=\"number\">2</span> * table.length);</span><br><span class=\"line\">        <span class=\"comment\">//通过hash()方法来获取key的hash值</span></span><br><span class=\"line\">          hash = (<span class=\"keyword\">null</span> != key) ? hash(key) : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//根据hash值重新获取Entry在数组中的index</span></span><br><span class=\"line\">          bucketIndex = indexFor(hash, table.length);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"comment\">//新增一个键值对 在hash表中的bucketIndex位置放入一个Entry</span></span><br><span class=\"line\">      createEntry(hash, key, value, bucketIndex);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newCapacity)</span> </span>&#123;</span><br><span class=\"line\">    Entry[] oldTable = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = oldTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">        threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Entry[] newTable = <span class=\"keyword\">new</span> Entry[newCapacity];</span><br><span class=\"line\">  <span class=\"comment\">//将所有的旧hash表的键值对转换到新hash表上</span></span><br><span class=\"line\">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class=\"line\">    table = newTable;</span><br><span class=\"line\">    threshold = (<span class=\"keyword\">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     modCount++;</span><br><span class=\"line\">  <span class=\"comment\">//使用Arrays工具类，将hash表的数据都填充成null</span></span><br><span class=\"line\">     Arrays.fill(table, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">     size = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> Entry&lt;K,V&gt; <span class=\"title\">getEntry</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"><span class=\"comment\">//获取key的hash值</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> hash = (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : hash(key);</span><br><span class=\"line\">   <span class=\"comment\">//遍历在hash表中key的hash值所对应位置的链表 通过key.equasls方法来确定key所对应的键值对</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class=\"line\">          e != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          e = e.next) &#123;</span><br><span class=\"line\">         Object k;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">             ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">             <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//给hash表扩容，若表为空，则按照初始化时的threshold值创建hash表。</span></span><br><span class=\"line\">      <span class=\"comment\">//threshold=capacity * loadFactor</span></span><br><span class=\"line\">      <span class=\"comment\">//若不为空，则该方法扩容为原来hash表的2倍</span></span><br><span class=\"line\">          inflateTable(threshold);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> putForNullKey(value);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> i = indexFor(hash, table.length);</span><br><span class=\"line\">    <span class=\"comment\">//若根据key的hash值计算出的hash表位置已经存在了键值对，则遍历该链表，将新的Entry添加到链表的最后</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">          Object k;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class=\"line\">              V oldValue = e.value;</span><br><span class=\"line\">              e.value = value;</span><br><span class=\"line\">              e.recordAccess(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"comment\">//将hash表的修改次数+1 为了实现fast-fail机制</span></span><br><span class=\"line\">      modCount++;</span><br><span class=\"line\">      addEntry(hash, key, value, i);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Entry&lt;K,V&gt; <span class=\"title\">removeEntryForKey</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : hash(key);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(hash, table.length);</span><br><span class=\"line\">  <span class=\"comment\">//指向链表当前对象前一个对象的引用</span></span><br><span class=\"line\">    Entry&lt;K,V&gt; prev = table[i];</span><br><span class=\"line\">  <span class=\"comment\">//指向链表当前对象的引用</span></span><br><span class=\"line\">    Entry&lt;K,V&gt; e = prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//遍历链表数据直至找到key对应的Entry</span></span><br><span class=\"line\">      <span class=\"comment\">//next为指向链表当前数据下一个对象的引用</span></span><br><span class=\"line\">        Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">        Object k;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//hash表修改次数+1</span></span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">          <span class=\"comment\">//hash表的大小-1</span></span><br><span class=\"line\">            size--;</span><br><span class=\"line\">          <span class=\"comment\">//此时当前一个链表前一个数据与当前数据为同一个对象，说明hash表当前位置不存在链表，</span></span><br><span class=\"line\">          <span class=\"comment\">//直接将key所对应hash表当前数据的next引用指向当前数据的下一个对象。（链表的删除思想）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev == e)</span><br><span class=\"line\">                table[i] = next;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">              <span class=\"comment\">//此时说明hash表当前位置存在链表，将前一个数据的next引用指向当前数据的下一个对象</span></span><br><span class=\"line\">                prev.next = next;</span><br><span class=\"line\">          <span class=\"comment\">//这是Entry内部类定义的hook方法，每次删除数据都需要调用一次。</span></span><br><span class=\"line\">            e.recordRemoval(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prev = e;</span><br><span class=\"line\">        e = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hook方法就是钩子方法</p>\n<h2 id=\"3-Entry类\"><a href=\"#3-Entry类\" class=\"headerlink\" title=\"3. Entry类\"></a>3. Entry类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态内部类 实现了Map类的内部接口 用于存储键值对</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Entry&lt;K,V&gt; next;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Creates new entry.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        Entry(<span class=\"keyword\">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class=\"line\">            value = v;</span><br><span class=\"line\">            next = n;</span><br><span class=\"line\">            key = k;</span><br><span class=\"line\">            hash = h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123;</span><br><span class=\"line\">            V oldValue = value;</span><br><span class=\"line\">            value = newValue;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//复写equals方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Map.Entry))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            Map.Entry e = (Map.Entry)o;</span><br><span class=\"line\">            Object k1 = getKey();</span><br><span class=\"line\">            Object k2 = e.getKey();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k1 == k2 || (k1 != <span class=\"keyword\">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class=\"line\">                Object v1 = getValue();</span><br><span class=\"line\">                Object v2 = e.getValue();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1 == v2 || (v1 != <span class=\"keyword\">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getKey() + <span class=\"string\">\"=\"</span> + getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * This method is invoked whenever the value in an entry is</span></span><br><span class=\"line\"><span class=\"comment\">         * overwritten by an invocation of put(k,v) for a key k that's already</span></span><br><span class=\"line\"><span class=\"comment\">         * in the HashMap.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recordAccess</span><span class=\"params\">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * This method is invoked whenever the entry is</span></span><br><span class=\"line\"><span class=\"comment\">         * removed from the table.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recordRemoval</span><span class=\"params\">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-迭代器\"><a href=\"#4-迭代器\" class=\"headerlink\" title=\"4.迭代器\"></a>4.迭代器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//通过一个抽象内部类HashIterator实现了Iterator接口 </span></span><br><span class=\"line\">   <span class=\"comment\">//HashMap提供的key和value迭代器都是通过继承这个HashIterator实现的</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashIterator</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">       Entry&lt;K,V&gt; next;        <span class=\"comment\">// next entry to return</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> expectedModCount;   <span class=\"comment\">// For fast-fail</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> index;              <span class=\"comment\">// current slot</span></span><br><span class=\"line\">       Entry&lt;K,V&gt; current;     <span class=\"comment\">// current entry</span></span><br><span class=\"line\"></span><br><span class=\"line\">       HashIterator() &#123;</span><br><span class=\"line\">           expectedModCount = modCount;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// advance to first entry</span></span><br><span class=\"line\">               Entry[] t = table;</span><br><span class=\"line\">               <span class=\"keyword\">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                   ;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">final</span> Entry&lt;K,V&gt; <span class=\"title\">nextEntry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">           Entry&lt;K,V&gt; e = next;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (e == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((next = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               Entry[] t = table;</span><br><span class=\"line\">             <span class=\"comment\">//当next为null时说明e是hash表当前index位置的链表的最后一个元素</span></span><br><span class=\"line\">             <span class=\"comment\">//通过while语句内的方式实现next往后移位直至不为null的一个元素</span></span><br><span class=\"line\">               <span class=\"keyword\">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                   ;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           current = e;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">           Object k = current.key;</span><br><span class=\"line\">           current = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           HashMap.<span class=\"keyword\">this</span>.removeEntryForKey(k);</span><br><span class=\"line\">           expectedModCount = modCount;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//value迭代器内部类</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ValueIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">HashIterator</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> nextEntry().value;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">//key迭代器内部类</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeyIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">HashIterator</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> nextEntry().getKey();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">//Entry迭代器内部类</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EntryIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">HashIterator</span>&lt;<span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> Map.<span class=\"function\">Entry&lt;K,V&gt; <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> nextEntry();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-关于hash表的两个问题\"><a href=\"#5-关于hash表的两个问题\" class=\"headerlink\" title=\"5.关于hash表的两个问题\"></a>5.关于hash表的两个问题</h2><ul>\n<li>如何设计才能使减小hash冲突？</li>\n</ul>\n<p>针对如何获取在hash表中的位置，HashMap中主要通过三个部分来减小散列冲突：</p>\n<blockquote>\n<ol>\n<li>第一部分，首先根据Object.hashcode得到一个散列值，Object.hashCode是一个native方法。一般情况下可以认为是该对象的地址信息散列得到的，也就是相当于是对象的ID，同一个对象有相同的ID。这样得到的散列值还是比较合理的.</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hashSeed;</span><br><span class=\"line\">    <span class=\"comment\">//对于String的hashCode需要另外计算</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != h &amp;&amp; k <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">    h ^= k.hashCode();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This function ensures that hashCodes that differ only by</span></span><br><span class=\"line\">    <span class=\"comment\">// constant multiples at each bit position have a bounded</span></span><br><span class=\"line\">    <span class=\"comment\">// number of collisions (approximately 8 at default load factor).</span></span><br><span class=\"line\">    <span class=\"comment\">//二次散列</span></span><br><span class=\"line\">    h ^= (h &gt;&gt;&gt; <span class=\"number\">20</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h ^ (h &gt;&gt;&gt; <span class=\"number\">7</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二部分，桶的数量设计。一般由哈希值得到桶的位置都是将哈希值除以桶的数量得到的余数就是桶的位置。一般来说想要尽可能的减少散列冲突有两类办法，一类是使用素数数量的桶，例如hashTable，一类是使用2的幂次数量的桶，例如hashmap，hashmap使用2的次幂的桶有个好处，就是可以用位运算来算，只要将散列值和桶的数量-1相与就是桶的位置不需要除。这样相对来说速度快一些。hashmap里有个静态方法indexof就是用来做这个的。具体下文会说到。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert Integer.bitCount(length) == 1 : \"length must be a non-zero power of 2\";</span></span><br><span class=\"line\">    <span class=\"comment\">//长度为2的幂次的hash表，用位运算来将散列值和桶的数量-1相与 就是数组的index,这样比采用除更快</span></span><br><span class=\"line\">  \t<span class=\"comment\">//比如length是4，那如果h是0-3则返回的值就是0-3，如果是h=4则返回0，h=5则返回1</span></span><br><span class=\"line\">  \t<span class=\"comment\">//length-1是因为数组下标从0开始</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第三部分，hashseed，第二部分中曾经说道通过将哈希值与桶的数量-1相与得到桶的位置。但是这样做有一个小的问题。当哈希值非常大，而桶的数量很小的时候回出现仅仅依靠哈希值的低位来散列的结果。这样即使散列值做的很好耶没有办法得到很好的散列。这时hashseed的作用就体现出来的，hashseed通过右移部分哈希值，然后将其亦或得到的结果进行在进行定位桶的位置。这样做就综合考虑了高位和低位的值。从而减小了散列冲突的可能性。此外由于java的语言特性，对于String的情况其hashseed需要额外设计。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Table capacity above which to switch to use alternative hashing.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ALTERNATIVE_HASHING_THRESHOLD;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">            String altThreshold = java.security.AccessController.doPrivileged(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> sun.security.action.GetPropertyAction(</span><br><span class=\"line\">                    <span class=\"string\">\"jdk.map.althashing.threshold\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                threshold = (<span class=\"keyword\">null</span> != altThreshold)</span><br><span class=\"line\">                        ? Integer.parseInt(altThreshold)</span><br><span class=\"line\">                        : ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// disable alternative hashing if -1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (threshold == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (threshold &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"value must be positive integer.\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(IllegalArgumentException failed) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Illegal value for 'jdk.map.althashing.threshold'\"</span>, failed);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">            ALTERNATIVE_HASHING_THRESHOLD = threshold;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE;</code>但是这个静态类常量也是可以根据虚拟机参数的设定来更改的。这也就是Holder这个类这段静态代码的意义了。可以通过调整虚拟机的参数来设定这个域值。<br>关于Holder类是参考别人的文章来的，说实话我也没有完全搞清楚。</p>\n<ul>\n<li>在发生hash冲突时，如何解决？</li>\n</ul>\n<p>在发生hash冲突之后，HashMap采用单向链表方式来存储键值对。在前面介绍的<code>getEntry</code>、<code>put</code>等方法的时候，都有遍历链表。</p>\n<h2 id=\"关于final\"><a href=\"#关于final\" class=\"headerlink\" title=\"关于final\"></a>关于final</h2><p>加上final的仅仅是相当于当前的引用不在改变，但是容器的元素是恶意增删的，元素的内容也是可以改变的。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://blog.csdn.net/u011518120/article/details/53640181\" target=\"_blank\" rel=\"noopener\">参考文章一</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"HashMap源码\"><a href=\"#HashMap源码\" class=\"headerlink\" title=\"HashMap源码\"></a>HashMap源码</h1><h2 id=\"1-构造器\"><a href=\"#1-构造器\" class=\"headerlink\" title=\"1.构造器\"></a>1.构造器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">构造器默认两个参数：initialCapacity 哈希表（键值对数组）初始化容量（默认为16,2的4次方</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t     loadFactor 加载因子 （默认为0.75）</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal initial capacity: \"</span> +</span><br><span class=\"line\">                                               initialCapacity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal load factor: \"</span> +</span><br><span class=\"line\">                                               loadFactor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">        threshold = initialCapacity;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"2-方法\"><a href=\"#2-方法\" class=\"headerlink\" title=\"2.方法\"></a>2.方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addEntry</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">int</span> bucketIndex)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否需要对原先的hash表扩容</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((size &gt;= threshold) &amp;&amp; (<span class=\"keyword\">null</span> != table[bucketIndex])) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//对hash表扩容 并将旧hash表的内容放入新hash表中</span></span><br><span class=\"line\">          resize(<span class=\"number\">2</span> * table.length);</span><br><span class=\"line\">        <span class=\"comment\">//通过hash()方法来获取key的hash值</span></span><br><span class=\"line\">          hash = (<span class=\"keyword\">null</span> != key) ? hash(key) : <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//根据hash值重新获取Entry在数组中的index</span></span><br><span class=\"line\">          bucketIndex = indexFor(hash, table.length);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"comment\">//新增一个键值对 在hash表中的bucketIndex位置放入一个Entry</span></span><br><span class=\"line\">      createEntry(hash, key, value, bucketIndex);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newCapacity)</span> </span>&#123;</span><br><span class=\"line\">    Entry[] oldTable = table;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = oldTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">        threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Entry[] newTable = <span class=\"keyword\">new</span> Entry[newCapacity];</span><br><span class=\"line\">  <span class=\"comment\">//将所有的旧hash表的键值对转换到新hash表上</span></span><br><span class=\"line\">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class=\"line\">    table = newTable;</span><br><span class=\"line\">    threshold = (<span class=\"keyword\">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     modCount++;</span><br><span class=\"line\">  <span class=\"comment\">//使用Arrays工具类，将hash表的数据都填充成null</span></span><br><span class=\"line\">     Arrays.fill(table, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">     size = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">final</span> Entry&lt;K,V&gt; <span class=\"title\">getEntry</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"><span class=\"comment\">//获取key的hash值</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> hash = (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : hash(key);</span><br><span class=\"line\">   <span class=\"comment\">//遍历在hash表中key的hash值所对应位置的链表 通过key.equasls方法来确定key所对应的键值对</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class=\"line\">          e != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">          e = e.next) &#123;</span><br><span class=\"line\">         Object k;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">             ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">             <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//给hash表扩容，若表为空，则按照初始化时的threshold值创建hash表。</span></span><br><span class=\"line\">      <span class=\"comment\">//threshold=capacity * loadFactor</span></span><br><span class=\"line\">      <span class=\"comment\">//若不为空，则该方法扩容为原来hash表的2倍</span></span><br><span class=\"line\">          inflateTable(threshold);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> putForNullKey(value);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> hash = hash(key);</span><br><span class=\"line\">      <span class=\"keyword\">int</span> i = indexFor(hash, table.length);</span><br><span class=\"line\">    <span class=\"comment\">//若根据key的hash值计算出的hash表位置已经存在了键值对，则遍历该链表，将新的Entry添加到链表的最后</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">          Object k;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class=\"line\">              V oldValue = e.value;</span><br><span class=\"line\">              e.value = value;</span><br><span class=\"line\">              e.recordAccess(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"comment\">//将hash表的修改次数+1 为了实现fast-fail机制</span></span><br><span class=\"line\">      modCount++;</span><br><span class=\"line\">      addEntry(hash, key, value, i);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Entry&lt;K,V&gt; <span class=\"title\">removeEntryForKey</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash = (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : hash(key);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(hash, table.length);</span><br><span class=\"line\">  <span class=\"comment\">//指向链表当前对象前一个对象的引用</span></span><br><span class=\"line\">    Entry&lt;K,V&gt; prev = table[i];</span><br><span class=\"line\">  <span class=\"comment\">//指向链表当前对象的引用</span></span><br><span class=\"line\">    Entry&lt;K,V&gt; e = prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//遍历链表数据直至找到key对应的Entry</span></span><br><span class=\"line\">      <span class=\"comment\">//next为指向链表当前数据下一个对象的引用</span></span><br><span class=\"line\">        Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">        Object k;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//hash表修改次数+1</span></span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">          <span class=\"comment\">//hash表的大小-1</span></span><br><span class=\"line\">            size--;</span><br><span class=\"line\">          <span class=\"comment\">//此时当前一个链表前一个数据与当前数据为同一个对象，说明hash表当前位置不存在链表，</span></span><br><span class=\"line\">          <span class=\"comment\">//直接将key所对应hash表当前数据的next引用指向当前数据的下一个对象。（链表的删除思想）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev == e)</span><br><span class=\"line\">                table[i] = next;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">              <span class=\"comment\">//此时说明hash表当前位置存在链表，将前一个数据的next引用指向当前数据的下一个对象</span></span><br><span class=\"line\">                prev.next = next;</span><br><span class=\"line\">          <span class=\"comment\">//这是Entry内部类定义的hook方法，每次删除数据都需要调用一次。</span></span><br><span class=\"line\">            e.recordRemoval(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prev = e;</span><br><span class=\"line\">        e = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hook方法就是钩子方法</p>\n<h2 id=\"3-Entry类\"><a href=\"#3-Entry类\" class=\"headerlink\" title=\"3. Entry类\"></a>3. Entry类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态内部类 实现了Map类的内部接口 用于存储键值对</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Entry&lt;K,V&gt; next;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Creates new entry.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        Entry(<span class=\"keyword\">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class=\"line\">            value = v;</span><br><span class=\"line\">            next = n;</span><br><span class=\"line\">            key = k;</span><br><span class=\"line\">            hash = h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123;</span><br><span class=\"line\">            V oldValue = value;</span><br><span class=\"line\">            value = newValue;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//复写equals方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Map.Entry))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            Map.Entry e = (Map.Entry)o;</span><br><span class=\"line\">            Object k1 = getKey();</span><br><span class=\"line\">            Object k2 = e.getKey();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k1 == k2 || (k1 != <span class=\"keyword\">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class=\"line\">                Object v1 = getValue();</span><br><span class=\"line\">                Object v2 = e.getValue();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1 == v2 || (v1 != <span class=\"keyword\">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getKey() + <span class=\"string\">\"=\"</span> + getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * This method is invoked whenever the value in an entry is</span></span><br><span class=\"line\"><span class=\"comment\">         * overwritten by an invocation of put(k,v) for a key k that's already</span></span><br><span class=\"line\"><span class=\"comment\">         * in the HashMap.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recordAccess</span><span class=\"params\">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * This method is invoked whenever the entry is</span></span><br><span class=\"line\"><span class=\"comment\">         * removed from the table.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">recordRemoval</span><span class=\"params\">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-迭代器\"><a href=\"#4-迭代器\" class=\"headerlink\" title=\"4.迭代器\"></a>4.迭代器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//通过一个抽象内部类HashIterator实现了Iterator接口 </span></span><br><span class=\"line\">   <span class=\"comment\">//HashMap提供的key和value迭代器都是通过继承这个HashIterator实现的</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashIterator</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">       Entry&lt;K,V&gt; next;        <span class=\"comment\">// next entry to return</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> expectedModCount;   <span class=\"comment\">// For fast-fail</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> index;              <span class=\"comment\">// current slot</span></span><br><span class=\"line\">       Entry&lt;K,V&gt; current;     <span class=\"comment\">// current entry</span></span><br><span class=\"line\"></span><br><span class=\"line\">       HashIterator() &#123;</span><br><span class=\"line\">           expectedModCount = modCount;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (size &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// advance to first entry</span></span><br><span class=\"line\">               Entry[] t = table;</span><br><span class=\"line\">               <span class=\"keyword\">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                   ;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">final</span> Entry&lt;K,V&gt; <span class=\"title\">nextEntry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">           Entry&lt;K,V&gt; e = next;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (e == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> ((next = e.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               Entry[] t = table;</span><br><span class=\"line\">             <span class=\"comment\">//当next为null时说明e是hash表当前index位置的链表的最后一个元素</span></span><br><span class=\"line\">             <span class=\"comment\">//通过while语句内的方式实现next往后移位直至不为null的一个元素</span></span><br><span class=\"line\">               <span class=\"keyword\">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                   ;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           current = e;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (current == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">           Object k = current.key;</span><br><span class=\"line\">           current = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">           HashMap.<span class=\"keyword\">this</span>.removeEntryForKey(k);</span><br><span class=\"line\">           expectedModCount = modCount;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//value迭代器内部类</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ValueIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">HashIterator</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> nextEntry().value;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">//key迭代器内部类</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeyIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">HashIterator</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> nextEntry().getKey();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"comment\">//Entry迭代器内部类</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EntryIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">HashIterator</span>&lt;<span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> Map.<span class=\"function\">Entry&lt;K,V&gt; <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> nextEntry();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-关于hash表的两个问题\"><a href=\"#5-关于hash表的两个问题\" class=\"headerlink\" title=\"5.关于hash表的两个问题\"></a>5.关于hash表的两个问题</h2><ul>\n<li>如何设计才能使减小hash冲突？</li>\n</ul>\n<p>针对如何获取在hash表中的位置，HashMap中主要通过三个部分来减小散列冲突：</p>\n<blockquote>\n<ol>\n<li>第一部分，首先根据Object.hashcode得到一个散列值，Object.hashCode是一个native方法。一般情况下可以认为是该对象的地址信息散列得到的，也就是相当于是对象的ID，同一个对象有相同的ID。这样得到的散列值还是比较合理的.</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hashSeed;</span><br><span class=\"line\">    <span class=\"comment\">//对于String的hashCode需要另外计算</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != h &amp;&amp; k <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">    h ^= k.hashCode();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This function ensures that hashCodes that differ only by</span></span><br><span class=\"line\">    <span class=\"comment\">// constant multiples at each bit position have a bounded</span></span><br><span class=\"line\">    <span class=\"comment\">// number of collisions (approximately 8 at default load factor).</span></span><br><span class=\"line\">    <span class=\"comment\">//二次散列</span></span><br><span class=\"line\">    h ^= (h &gt;&gt;&gt; <span class=\"number\">20</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h ^ (h &gt;&gt;&gt; <span class=\"number\">7</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二部分，桶的数量设计。一般由哈希值得到桶的位置都是将哈希值除以桶的数量得到的余数就是桶的位置。一般来说想要尽可能的减少散列冲突有两类办法，一类是使用素数数量的桶，例如hashTable，一类是使用2的幂次数量的桶，例如hashmap，hashmap使用2的次幂的桶有个好处，就是可以用位运算来算，只要将散列值和桶的数量-1相与就是桶的位置不需要除。这样相对来说速度快一些。hashmap里有个静态方法indexof就是用来做这个的。具体下文会说到。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert Integer.bitCount(length) == 1 : \"length must be a non-zero power of 2\";</span></span><br><span class=\"line\">    <span class=\"comment\">//长度为2的幂次的hash表，用位运算来将散列值和桶的数量-1相与 就是数组的index,这样比采用除更快</span></span><br><span class=\"line\">  \t<span class=\"comment\">//比如length是4，那如果h是0-3则返回的值就是0-3，如果是h=4则返回0，h=5则返回1</span></span><br><span class=\"line\">  \t<span class=\"comment\">//length-1是因为数组下标从0开始</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第三部分，hashseed，第二部分中曾经说道通过将哈希值与桶的数量-1相与得到桶的位置。但是这样做有一个小的问题。当哈希值非常大，而桶的数量很小的时候回出现仅仅依靠哈希值的低位来散列的结果。这样即使散列值做的很好耶没有办法得到很好的散列。这时hashseed的作用就体现出来的，hashseed通过右移部分哈希值，然后将其亦或得到的结果进行在进行定位桶的位置。这样做就综合考虑了高位和低位的值。从而减小了散列冲突的可能性。此外由于java的语言特性，对于String的情况其hashseed需要额外设计。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Holder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Table capacity above which to switch to use alternative hashing.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ALTERNATIVE_HASHING_THRESHOLD;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">            String altThreshold = java.security.AccessController.doPrivileged(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> sun.security.action.GetPropertyAction(</span><br><span class=\"line\">                    <span class=\"string\">\"jdk.map.althashing.threshold\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                threshold = (<span class=\"keyword\">null</span> != altThreshold)</span><br><span class=\"line\">                        ? Integer.parseInt(altThreshold)</span><br><span class=\"line\">                        : ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// disable alternative hashing if -1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (threshold == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (threshold &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"value must be positive integer.\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(IllegalArgumentException failed) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Illegal value for 'jdk.map.althashing.threshold'\"</span>, failed);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">            ALTERNATIVE_HASHING_THRESHOLD = threshold;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE;</code>但是这个静态类常量也是可以根据虚拟机参数的设定来更改的。这也就是Holder这个类这段静态代码的意义了。可以通过调整虚拟机的参数来设定这个域值。<br>关于Holder类是参考别人的文章来的，说实话我也没有完全搞清楚。</p>\n<ul>\n<li>在发生hash冲突时，如何解决？</li>\n</ul>\n<p>在发生hash冲突之后，HashMap采用单向链表方式来存储键值对。在前面介绍的<code>getEntry</code>、<code>put</code>等方法的时候，都有遍历链表。</p>\n<h2 id=\"关于final\"><a href=\"#关于final\" class=\"headerlink\" title=\"关于final\"></a>关于final</h2><p>加上final的仅仅是相当于当前的引用不在改变，但是容器的元素是恶意增删的，元素的内容也是可以改变的。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://blog.csdn.net/u011518120/article/details/53640181\" target=\"_blank\" rel=\"noopener\">参考文章一</a></p>"},{"title":"Nginx安装部署web工程","_content":"\n\n\n## Nginx安装\n\n### 1. 下载依赖包\n\n- 如果你的服务器可以连接网络的话可以直接通过命令的方式下载tar包\n\n  1. 下载PCRE库\n\n     `wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz  `\n\n  2. 下载zlib库\n\n     `wget http://zlib.net/zlib-1.2.10.tar.gz `\n\n  3. 下载OpenSSL库\n\n     `wget https://www.openssl.org/source/openssl-1.0.2o.tar.gz `\n\n  <!--more-->\n\n- 如果你的服务器无法联网，可以自行去上面的`wget`命令后面的地址下载对应的tar包文件，ftp路径也可以直接通过浏览器打开，再将他们传到服务器中。\n\n### 2. 安装依赖包\n\n- 安装PCRE库\n\n  - `tar -zxvf pcre-8.37.tar.gz ` 先使用命令解压tar包\n\n  - `cd pcre-8.38` 进去解压后的文件目录\n\n  - `./configure` 运行初始化脚本\n\n    **如果此时你不是用root用户安装，或者希望指定安装根路径，可以使用`--prefix=`参数来指定安装路径** \n\n    如：使用`./configure --prefix=/home/test/pcre`命令来指定将pcre安装到`/home/tese/pcre`目录下\n\n  - `make` 使用make命令尝试编译\n\n  - `make install` 编译安装\n\n- 安装zlib库\n\n  - `tar -zxvf zlib-1.2.10.tar.gz ` 先使用命令解压tar包\n\n  - `cd zlib-1.2.10` 进去解压后的文件目录\n\n  - `./configure` 运行初始化脚本\n\n    **如果此时你不是用root用户安装，或者希望指定安装根路径，可以使用`--prefix=`参数来指定安装路径** \n\n    如：使用`./configure --prefix=/home/test/zlib`命令来指定将zlib安装到`/home/test/zlib`目录下\n\n  - `make` 使用make命令尝试编译\n\n  - `make install` 编译安装\n\n- 安装OpenSSL库\n\n  - `tar -zxvf openssl-1.0.2o.tar.gz ` 使用命令解压tar包即可\n\n### 3. 安装Nginx\n\n#### 3.1 安装步骤\n\n- 先下载Nginx的tar包，我这里选择的是最新的稳定版`nginx-1.14.0.tar.gz`\n\n  跟上面安装依赖包一样，如果你的服务器可以联网的话建议使用`wget http://nginx.org/download/nginx-1.14.0.tar.gz `命令来下载tar包；如果不能联网的话建议自己通过浏览器访问http地址下载\n\n- `tar -zxvf nginx-1.14.0.tar.gz ` 解压Nginx的tar包\n\n- `cd nginx-1.14.0` 进入解压后的目录\n\n- `./configure`运行初始化脚本\n\n  **注意：Nginx默认的安装路径是`/usr/local/nginx`,如果你不是使用root用户的话，就不能使用该路径。这里同样可以使用`--prefix=`参数来指定安装路径** \n\n  同时，你可以使用`--with-pcre=/home/test/pcre-8.38`来指定pcre安装路径\n\n  使用`--with-zlib=/home/test/zlib`来指定zlib的安装路径\n\n- `make` 使用make命令尝试编译\n\n- `make install` 编译安装\n\n- `cd sbin` 进入sbin目录下\n\n- `./nginx` 启动Nginx  同时可以使用 `./nginx -s reload` 重启Nginx 使用`./nginx -s stop` 关停Nginx\n\n#### 3.2 Nginx常用编译选项\n\n> make是用来编译的，它从Makefile中读取指令，然后编译。\n>\n> make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。\n>\n> configure命令是用来检测你的安装平台的目标特征的。它定义了系统的各个方面，包括nginx的被允许使用的连接处理的方法，比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本，执行结束时，它会创建一个Makefile文件。nginx的configure命令支持以下参数：\n>\n> - `--prefix=*path*`    定义一个目录，存放服务器上的文件 ，也就是nginx的安装目录。默认使用 `/usr/local/nginx。`\n>\n> - `--sbin-path=*path*` 设置nginx的可执行文件的路径，默认为  `*prefix*/sbin/nginx`.\n>\n> - `--conf-path=*path*`  设置在nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为`*prefix*/conf/nginx.conf`.\n>\n> - `--pid-path=*path*  设置nginx.pid文件，将存储的主进程的进程号。安装完成后，可以随时改变的文件名 ， 在nginx.conf配置文件中使用 PID指令。默认情况下，文件名 为``*prefix*/logs/nginx.pid`.\n>\n> - `--error-log-path=*path*` 设置主错误，警告，和诊断文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的error_log指令。默认情况下，文件名 为`*prefix*/logs/error.log`.\n>\n> - `--http-log-path=*path*`  设置主请求的HTTP服务器的日志文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的access_log指令。默认情况下，文件名 为`*prefix*/logs/access.log`.\n>\n> - `--user=*name*`  设置nginx工作进程的用户。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的用户名是nobody。\n>\n> - `--group=*name*`  设置nginx工作进程的用户组。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的为非特权用户。\n>\n> - `--with-select_module` `--without-select_module 启用或禁用构建一个模块来允许服务器使用select()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。`\n>\n> - `--with-poll_module` `--without-poll_module` 启用或禁用构建一个模块来允许服务器使用poll()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。\n>\n> - `--without-http_gzip_module` — 不编译压缩的HTTP服务器的响应模块。编译并运行此模块需要zlib库。\n>\n> - `--without-http_rewrite_module`  不编译重写模块。编译并运行此模块需要PCRE库支持。\n>\n> - `--without-http_proxy_module` — 不编译http_proxy模块。\n>\n> - `--with-http_ssl_module` — 使用https协议模块。默认情况下，该模块没有被构建。建立并运行此模块的OpenSSL库是必需的。\n>\n> - `--with-pcre=*path*` — 设置PCRE库的源码路径。PCRE库的源码（版本4.4 - 8.30）需要从PCRE网站下载并解压。其余的工作是Nginx的./ configure和make来完成。正则表达式使用在location指令和 ngx_http_rewrite_module 模块中。\n>\n> - `--with-pcre-jit` —编译PCRE包含“just-in-time compilation”（1.1.12中， pcre_jit指令）。\n>\n> - `--with-zlib=*path*` —设置的zlib库的源码路径。要下载从 zlib（版本1.1.3 - 1.2.5）的并解压。其余的工作是Nginx的./ configure和make完成。ngx_http_gzip_module模块需要使用zlib 。\n>\n> - `--with-cc-opt=*parameters*` — 设置额外的参数将被添加到CFLAGS变量。例如,当你在FreeBSD上使用PCRE库时需要使用:`--with-cc-opt=\"-I /usr/local/include。`.如需要需要增加 `select()支持的文件数量`:`--with-cc-opt=\"-D FD_SETSIZE=2048\".`\n>\n> - `--with-ld-opt=*parameters*` —设置附加的参数，将用于在链接期间。例如，当在FreeBSD下使用该系统的PCRE库,应指定:`--with-ld-opt=\"-L /usr/local/lib\".`\n>\n> - 典型实例(下面为了展示需要写在多行，执行时内容需要在同一行)\n>\n>   ```\n>   ./configure\n>       --sbin-path=/usr/local/nginx/nginx\n>       --conf-path=/usr/local/nginx/nginx.conf\n>       --pid-path=/usr/local/nginx/nginx.pid\n>       --with-http_ssl_module\n>       --with-pcre=../pcre-4.4\n>       --with-zlib=../zlib-1.1.3\n>   ```\n\n## 部署web工程\n\n### 1. 关于Nginx配置文件\n\n在部署web工程前，我们需要了解Nginx的配置文件。Nginx的配置文件存放在`nginx/conf/nginx.conf`。我们需要打开这个文件根据自己的web工程需求配置这个文件。\n\n> 在nginx配置文件中主要分为四部分：`main` 全局设置，`server`主机设置，`upstream`（上游服务器设置，主要为反向代理、负载均衡相关配置）和 `location`（URL匹配特定位置后的设置） main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。 \n\n先贴一个配置文件，再来按照这个文件进行说明\n\n```\n#user  nobody;\n\n#在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。\n\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n#写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    #access_log  logs/access.log  main;\n\t#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\t减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用\t磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n    sendfile        on;\n    # tcp_nopush     on;\n\t#长连接超时时间，单位是秒。长连接请求大量小文件的时候，可以减少重建连接的开销，\t但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时\t 间保持连接会占用大量资源。\n    keepalive_timeout  65;\n\n  # gzip压缩功能设置\n\t# 开启gzip压缩输出，减少网络传输\n    gzip on;\n\t#设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大\n    gzip_min_length 1k;\n\t#设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。\n    gzip_buffers    4 16k;\n\t#gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)\n    gzip_comp_level 6;\n\t#匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。\n    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    #和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。\n\tgzip_vary on;\n  \n  # http_proxy 设置\n\t#允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值\n    client_max_body_size   10m;\n\t#缓冲区代理缓冲用户端请求的最大字节数\n    client_body_buffer_size   128k;\n\t#nginx跟后端服务器连接超时时间(代理连接超时)\n    proxy_connect_timeout   75;\n\t#连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)\n    proxy_read_timeout   75;\n\t#设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认\t\t与proxy_buffers大小相同，其实可以将这个指令值设的小一点\n    proxy_buffer_size   4k;\n\t#proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均\t  在32k以下的话，这样设置\n    proxy_buffers   4 32k;\n\t#高负荷下缓冲大小（proxy_buffers*2）\n    proxy_busy_buffers_size   64k;\n\t#当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。\t\tproxy_temp_path（可以在编译的时候）指定写到哪那个目录。。\n    proxy_temp_file_write_size  64k;\n\t#指定将上面的临时文件写到哪那个目录。\n    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;\n\n  # 设定负载均衡后台服务器列表 \n    upstream  arc  { \n              #ip_hash; \n              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  \n              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  \n    }\n\n  # 很重要的虚拟主机配置\n    server {\n\t\t#虚拟主机监听的端口\n        listen       8001;\n\t\t#服务器名\n        server_name  localhost;\n\n        #charset utf-8;\n        #access_log  logs/host.access.log  main;\n\n        #对 / 所有做负载均衡+反向代理\n        location / {\n\t\t   #定义服务器的默认网站根目录位置。\n            root   html;\n\t\t   #定义路径下默认访问的文件名\n            index  index.jsp index.html index.htm;\n\t\t   #请求转向arc定义的服务器列表，即反向代理，对应upstream负载均衡器。\n            proxy_pass        http://arc;\n\t\t   #下面这几个就这么设置吧  具体的我也不清楚\n            proxy_redirect off;\n            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header  Host  $host;\n            proxy_set_header  X-Real-IP  $remote_addr;  \n            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n            \n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n  ## 其它虚拟主机，server 指令开始\n}\n```\n\n### 2. 部署前端工程\n\n将web项目上传到Nginx的安装目录中的`html`文件夹中。修改`nginx.conf`配置文件。\n\n## 遇到的问题\n\n1. web端不能访问\n\n   检查防火墙是否关闭！关闭防火墙：`service iptables stop`\n\n2. 非root用户报出`bind() to 0.0.0.0:80 failed (13:Permission denied)`错误\n\n   这是由于非root用户启动时，`nginx.conf`文件中配置的端口为`80`，而在Linux中只有root用户才能使用1024以下的端口。所以只要讲配置文件中的端口修改为1024以上即可。\n\n## 参考链接\n\n[Nginx安装](http://www.nginx.cn/install)\n\n[Nging下部署项目，配置文件修改](https://blog.csdn.net/tototuzuoquan/article/details/47381907)\n\n[nginx服务器安装及配置文件详解](http://seanlook.com/2015/05/17/nginx-install-and-config/)","source":"_posts/Nginx安装部署web工程.md","raw":"---\ntitle: Nginx安装部署web工程\n\ncategories: \"Linux环境\"\n\ntags: \"Nginx\"\n---\n\n\n\n## Nginx安装\n\n### 1. 下载依赖包\n\n- 如果你的服务器可以连接网络的话可以直接通过命令的方式下载tar包\n\n  1. 下载PCRE库\n\n     `wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz  `\n\n  2. 下载zlib库\n\n     `wget http://zlib.net/zlib-1.2.10.tar.gz `\n\n  3. 下载OpenSSL库\n\n     `wget https://www.openssl.org/source/openssl-1.0.2o.tar.gz `\n\n  <!--more-->\n\n- 如果你的服务器无法联网，可以自行去上面的`wget`命令后面的地址下载对应的tar包文件，ftp路径也可以直接通过浏览器打开，再将他们传到服务器中。\n\n### 2. 安装依赖包\n\n- 安装PCRE库\n\n  - `tar -zxvf pcre-8.37.tar.gz ` 先使用命令解压tar包\n\n  - `cd pcre-8.38` 进去解压后的文件目录\n\n  - `./configure` 运行初始化脚本\n\n    **如果此时你不是用root用户安装，或者希望指定安装根路径，可以使用`--prefix=`参数来指定安装路径** \n\n    如：使用`./configure --prefix=/home/test/pcre`命令来指定将pcre安装到`/home/tese/pcre`目录下\n\n  - `make` 使用make命令尝试编译\n\n  - `make install` 编译安装\n\n- 安装zlib库\n\n  - `tar -zxvf zlib-1.2.10.tar.gz ` 先使用命令解压tar包\n\n  - `cd zlib-1.2.10` 进去解压后的文件目录\n\n  - `./configure` 运行初始化脚本\n\n    **如果此时你不是用root用户安装，或者希望指定安装根路径，可以使用`--prefix=`参数来指定安装路径** \n\n    如：使用`./configure --prefix=/home/test/zlib`命令来指定将zlib安装到`/home/test/zlib`目录下\n\n  - `make` 使用make命令尝试编译\n\n  - `make install` 编译安装\n\n- 安装OpenSSL库\n\n  - `tar -zxvf openssl-1.0.2o.tar.gz ` 使用命令解压tar包即可\n\n### 3. 安装Nginx\n\n#### 3.1 安装步骤\n\n- 先下载Nginx的tar包，我这里选择的是最新的稳定版`nginx-1.14.0.tar.gz`\n\n  跟上面安装依赖包一样，如果你的服务器可以联网的话建议使用`wget http://nginx.org/download/nginx-1.14.0.tar.gz `命令来下载tar包；如果不能联网的话建议自己通过浏览器访问http地址下载\n\n- `tar -zxvf nginx-1.14.0.tar.gz ` 解压Nginx的tar包\n\n- `cd nginx-1.14.0` 进入解压后的目录\n\n- `./configure`运行初始化脚本\n\n  **注意：Nginx默认的安装路径是`/usr/local/nginx`,如果你不是使用root用户的话，就不能使用该路径。这里同样可以使用`--prefix=`参数来指定安装路径** \n\n  同时，你可以使用`--with-pcre=/home/test/pcre-8.38`来指定pcre安装路径\n\n  使用`--with-zlib=/home/test/zlib`来指定zlib的安装路径\n\n- `make` 使用make命令尝试编译\n\n- `make install` 编译安装\n\n- `cd sbin` 进入sbin目录下\n\n- `./nginx` 启动Nginx  同时可以使用 `./nginx -s reload` 重启Nginx 使用`./nginx -s stop` 关停Nginx\n\n#### 3.2 Nginx常用编译选项\n\n> make是用来编译的，它从Makefile中读取指令，然后编译。\n>\n> make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。\n>\n> configure命令是用来检测你的安装平台的目标特征的。它定义了系统的各个方面，包括nginx的被允许使用的连接处理的方法，比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本，执行结束时，它会创建一个Makefile文件。nginx的configure命令支持以下参数：\n>\n> - `--prefix=*path*`    定义一个目录，存放服务器上的文件 ，也就是nginx的安装目录。默认使用 `/usr/local/nginx。`\n>\n> - `--sbin-path=*path*` 设置nginx的可执行文件的路径，默认为  `*prefix*/sbin/nginx`.\n>\n> - `--conf-path=*path*`  设置在nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为`*prefix*/conf/nginx.conf`.\n>\n> - `--pid-path=*path*  设置nginx.pid文件，将存储的主进程的进程号。安装完成后，可以随时改变的文件名 ， 在nginx.conf配置文件中使用 PID指令。默认情况下，文件名 为``*prefix*/logs/nginx.pid`.\n>\n> - `--error-log-path=*path*` 设置主错误，警告，和诊断文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的error_log指令。默认情况下，文件名 为`*prefix*/logs/error.log`.\n>\n> - `--http-log-path=*path*`  设置主请求的HTTP服务器的日志文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的access_log指令。默认情况下，文件名 为`*prefix*/logs/access.log`.\n>\n> - `--user=*name*`  设置nginx工作进程的用户。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的用户名是nobody。\n>\n> - `--group=*name*`  设置nginx工作进程的用户组。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的为非特权用户。\n>\n> - `--with-select_module` `--without-select_module 启用或禁用构建一个模块来允许服务器使用select()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。`\n>\n> - `--with-poll_module` `--without-poll_module` 启用或禁用构建一个模块来允许服务器使用poll()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。\n>\n> - `--without-http_gzip_module` — 不编译压缩的HTTP服务器的响应模块。编译并运行此模块需要zlib库。\n>\n> - `--without-http_rewrite_module`  不编译重写模块。编译并运行此模块需要PCRE库支持。\n>\n> - `--without-http_proxy_module` — 不编译http_proxy模块。\n>\n> - `--with-http_ssl_module` — 使用https协议模块。默认情况下，该模块没有被构建。建立并运行此模块的OpenSSL库是必需的。\n>\n> - `--with-pcre=*path*` — 设置PCRE库的源码路径。PCRE库的源码（版本4.4 - 8.30）需要从PCRE网站下载并解压。其余的工作是Nginx的./ configure和make来完成。正则表达式使用在location指令和 ngx_http_rewrite_module 模块中。\n>\n> - `--with-pcre-jit` —编译PCRE包含“just-in-time compilation”（1.1.12中， pcre_jit指令）。\n>\n> - `--with-zlib=*path*` —设置的zlib库的源码路径。要下载从 zlib（版本1.1.3 - 1.2.5）的并解压。其余的工作是Nginx的./ configure和make完成。ngx_http_gzip_module模块需要使用zlib 。\n>\n> - `--with-cc-opt=*parameters*` — 设置额外的参数将被添加到CFLAGS变量。例如,当你在FreeBSD上使用PCRE库时需要使用:`--with-cc-opt=\"-I /usr/local/include。`.如需要需要增加 `select()支持的文件数量`:`--with-cc-opt=\"-D FD_SETSIZE=2048\".`\n>\n> - `--with-ld-opt=*parameters*` —设置附加的参数，将用于在链接期间。例如，当在FreeBSD下使用该系统的PCRE库,应指定:`--with-ld-opt=\"-L /usr/local/lib\".`\n>\n> - 典型实例(下面为了展示需要写在多行，执行时内容需要在同一行)\n>\n>   ```\n>   ./configure\n>       --sbin-path=/usr/local/nginx/nginx\n>       --conf-path=/usr/local/nginx/nginx.conf\n>       --pid-path=/usr/local/nginx/nginx.pid\n>       --with-http_ssl_module\n>       --with-pcre=../pcre-4.4\n>       --with-zlib=../zlib-1.1.3\n>   ```\n\n## 部署web工程\n\n### 1. 关于Nginx配置文件\n\n在部署web工程前，我们需要了解Nginx的配置文件。Nginx的配置文件存放在`nginx/conf/nginx.conf`。我们需要打开这个文件根据自己的web工程需求配置这个文件。\n\n> 在nginx配置文件中主要分为四部分：`main` 全局设置，`server`主机设置，`upstream`（上游服务器设置，主要为反向代理、负载均衡相关配置）和 `location`（URL匹配特定位置后的设置） main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。 \n\n先贴一个配置文件，再来按照这个文件进行说明\n\n```\n#user  nobody;\n\n#在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。\n\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n#写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    #access_log  logs/access.log  main;\n\t#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\t减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用\t磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n    sendfile        on;\n    # tcp_nopush     on;\n\t#长连接超时时间，单位是秒。长连接请求大量小文件的时候，可以减少重建连接的开销，\t但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时\t 间保持连接会占用大量资源。\n    keepalive_timeout  65;\n\n  # gzip压缩功能设置\n\t# 开启gzip压缩输出，减少网络传输\n    gzip on;\n\t#设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大\n    gzip_min_length 1k;\n\t#设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。\n    gzip_buffers    4 16k;\n\t#gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)\n    gzip_comp_level 6;\n\t#匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。\n    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    #和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。\n\tgzip_vary on;\n  \n  # http_proxy 设置\n\t#允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值\n    client_max_body_size   10m;\n\t#缓冲区代理缓冲用户端请求的最大字节数\n    client_body_buffer_size   128k;\n\t#nginx跟后端服务器连接超时时间(代理连接超时)\n    proxy_connect_timeout   75;\n\t#连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)\n    proxy_read_timeout   75;\n\t#设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认\t\t与proxy_buffers大小相同，其实可以将这个指令值设的小一点\n    proxy_buffer_size   4k;\n\t#proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均\t  在32k以下的话，这样设置\n    proxy_buffers   4 32k;\n\t#高负荷下缓冲大小（proxy_buffers*2）\n    proxy_busy_buffers_size   64k;\n\t#当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。\t\tproxy_temp_path（可以在编译的时候）指定写到哪那个目录。。\n    proxy_temp_file_write_size  64k;\n\t#指定将上面的临时文件写到哪那个目录。\n    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;\n\n  # 设定负载均衡后台服务器列表 \n    upstream  arc  { \n              #ip_hash; \n              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  \n              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  \n    }\n\n  # 很重要的虚拟主机配置\n    server {\n\t\t#虚拟主机监听的端口\n        listen       8001;\n\t\t#服务器名\n        server_name  localhost;\n\n        #charset utf-8;\n        #access_log  logs/host.access.log  main;\n\n        #对 / 所有做负载均衡+反向代理\n        location / {\n\t\t   #定义服务器的默认网站根目录位置。\n            root   html;\n\t\t   #定义路径下默认访问的文件名\n            index  index.jsp index.html index.htm;\n\t\t   #请求转向arc定义的服务器列表，即反向代理，对应upstream负载均衡器。\n            proxy_pass        http://arc;\n\t\t   #下面这几个就这么设置吧  具体的我也不清楚\n            proxy_redirect off;\n            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header  Host  $host;\n            proxy_set_header  X-Real-IP  $remote_addr;  \n            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n            \n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n  ## 其它虚拟主机，server 指令开始\n}\n```\n\n### 2. 部署前端工程\n\n将web项目上传到Nginx的安装目录中的`html`文件夹中。修改`nginx.conf`配置文件。\n\n## 遇到的问题\n\n1. web端不能访问\n\n   检查防火墙是否关闭！关闭防火墙：`service iptables stop`\n\n2. 非root用户报出`bind() to 0.0.0.0:80 failed (13:Permission denied)`错误\n\n   这是由于非root用户启动时，`nginx.conf`文件中配置的端口为`80`，而在Linux中只有root用户才能使用1024以下的端口。所以只要讲配置文件中的端口修改为1024以上即可。\n\n## 参考链接\n\n[Nginx安装](http://www.nginx.cn/install)\n\n[Nging下部署项目，配置文件修改](https://blog.csdn.net/tototuzuoquan/article/details/47381907)\n\n[nginx服务器安装及配置文件详解](http://seanlook.com/2015/05/17/nginx-install-and-config/)","slug":"Nginx安装部署web工程","published":1,"date":"2018-08-01T16:05:19.155Z","updated":"2018-05-31T13:46:12.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbcbg83000bv8w06o58b7vj","content":"<h2 id=\"Nginx安装\"><a href=\"#Nginx安装\" class=\"headerlink\" title=\"Nginx安装\"></a>Nginx安装</h2><h3 id=\"1-下载依赖包\"><a href=\"#1-下载依赖包\" class=\"headerlink\" title=\"1. 下载依赖包\"></a>1. 下载依赖包</h3><ul>\n<li><p>如果你的服务器可以连接网络的话可以直接通过命令的方式下载tar包</p>\n<ol>\n<li><p>下载PCRE库</p>\n<p><code>wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz</code></p>\n</li>\n<li><p>下载zlib库</p>\n<p><code>wget http://zlib.net/zlib-1.2.10.tar.gz</code></p>\n</li>\n<li><p>下载OpenSSL库</p>\n<p><code>wget https://www.openssl.org/source/openssl-1.0.2o.tar.gz</code></p>\n</li>\n</ol>\n<a id=\"more\"></a>\n</li>\n<li><p>如果你的服务器无法联网，可以自行去上面的<code>wget</code>命令后面的地址下载对应的tar包文件，ftp路径也可以直接通过浏览器打开，再将他们传到服务器中。</p>\n</li>\n</ul>\n<h3 id=\"2-安装依赖包\"><a href=\"#2-安装依赖包\" class=\"headerlink\" title=\"2. 安装依赖包\"></a>2. 安装依赖包</h3><ul>\n<li><p>安装PCRE库</p>\n<ul>\n<li><p><code>tar -zxvf pcre-8.37.tar.gz</code> 先使用命令解压tar包</p>\n</li>\n<li><p><code>cd pcre-8.38</code> 进去解压后的文件目录</p>\n</li>\n<li><p><code>./configure</code> 运行初始化脚本</p>\n<p><strong>如果此时你不是用root用户安装，或者希望指定安装根路径，可以使用<code>--prefix=</code>参数来指定安装路径</strong> </p>\n<p>如：使用<code>./configure --prefix=/home/test/pcre</code>命令来指定将pcre安装到<code>/home/tese/pcre</code>目录下</p>\n</li>\n<li><p><code>make</code> 使用make命令尝试编译</p>\n</li>\n<li><p><code>make install</code> 编译安装</p>\n</li>\n</ul>\n</li>\n<li><p>安装zlib库</p>\n<ul>\n<li><p><code>tar -zxvf zlib-1.2.10.tar.gz</code> 先使用命令解压tar包</p>\n</li>\n<li><p><code>cd zlib-1.2.10</code> 进去解压后的文件目录</p>\n</li>\n<li><p><code>./configure</code> 运行初始化脚本</p>\n<p><strong>如果此时你不是用root用户安装，或者希望指定安装根路径，可以使用<code>--prefix=</code>参数来指定安装路径</strong> </p>\n<p>如：使用<code>./configure --prefix=/home/test/zlib</code>命令来指定将zlib安装到<code>/home/test/zlib</code>目录下</p>\n</li>\n<li><p><code>make</code> 使用make命令尝试编译</p>\n</li>\n<li><p><code>make install</code> 编译安装</p>\n</li>\n</ul>\n</li>\n<li><p>安装OpenSSL库</p>\n<ul>\n<li><code>tar -zxvf openssl-1.0.2o.tar.gz</code> 使用命令解压tar包即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-安装Nginx\"><a href=\"#3-安装Nginx\" class=\"headerlink\" title=\"3. 安装Nginx\"></a>3. 安装Nginx</h3><h4 id=\"3-1-安装步骤\"><a href=\"#3-1-安装步骤\" class=\"headerlink\" title=\"3.1 安装步骤\"></a>3.1 安装步骤</h4><ul>\n<li><p>先下载Nginx的tar包，我这里选择的是最新的稳定版<code>nginx-1.14.0.tar.gz</code></p>\n<p>跟上面安装依赖包一样，如果你的服务器可以联网的话建议使用<code>wget http://nginx.org/download/nginx-1.14.0.tar.gz</code>命令来下载tar包；如果不能联网的话建议自己通过浏览器访问http地址下载</p>\n</li>\n<li><p><code>tar -zxvf nginx-1.14.0.tar.gz</code> 解压Nginx的tar包</p>\n</li>\n<li><p><code>cd nginx-1.14.0</code> 进入解压后的目录</p>\n</li>\n<li><p><code>./configure</code>运行初始化脚本</p>\n<p><strong>注意：Nginx默认的安装路径是<code>/usr/local/nginx</code>,如果你不是使用root用户的话，就不能使用该路径。这里同样可以使用<code>--prefix=</code>参数来指定安装路径</strong> </p>\n<p>同时，你可以使用<code>--with-pcre=/home/test/pcre-8.38</code>来指定pcre安装路径</p>\n<p>使用<code>--with-zlib=/home/test/zlib</code>来指定zlib的安装路径</p>\n</li>\n<li><p><code>make</code> 使用make命令尝试编译</p>\n</li>\n<li><p><code>make install</code> 编译安装</p>\n</li>\n<li><p><code>cd sbin</code> 进入sbin目录下</p>\n</li>\n<li><p><code>./nginx</code> 启动Nginx  同时可以使用 <code>./nginx -s reload</code> 重启Nginx 使用<code>./nginx -s stop</code> 关停Nginx</p>\n</li>\n</ul>\n<h4 id=\"3-2-Nginx常用编译选项\"><a href=\"#3-2-Nginx常用编译选项\" class=\"headerlink\" title=\"3.2 Nginx常用编译选项\"></a>3.2 Nginx常用编译选项</h4><blockquote>\n<p>make是用来编译的，它从Makefile中读取指令，然后编译。</p>\n<p>make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。</p>\n<p>configure命令是用来检测你的安装平台的目标特征的。它定义了系统的各个方面，包括nginx的被允许使用的连接处理的方法，比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本，执行结束时，它会创建一个Makefile文件。nginx的configure命令支持以下参数：</p>\n<ul>\n<li><p><code>--prefix=*path*</code>    定义一个目录，存放服务器上的文件 ，也就是nginx的安装目录。默认使用 <code>/usr/local/nginx。</code></p>\n</li>\n<li><p><code>--sbin-path=*path*</code> 设置nginx的可执行文件的路径，默认为  <code>*prefix*/sbin/nginx</code>.</p>\n</li>\n<li><p><code>--conf-path=*path*</code>  设置在nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为<code>*prefix*/conf/nginx.conf</code>.</p>\n</li>\n<li><p><code>--pid-path=*path*  设置nginx.pid文件，将存储的主进程的进程号。安装完成后，可以随时改变的文件名 ， 在nginx.conf配置文件中使用 PID指令。默认情况下，文件名 为`</code><em>prefix</em>/logs/nginx.pid`.</p>\n</li>\n<li><p><code>--error-log-path=*path*</code> 设置主错误，警告，和诊断文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的error_log指令。默认情况下，文件名 为<code>*prefix*/logs/error.log</code>.</p>\n</li>\n<li><p><code>--http-log-path=*path*</code>  设置主请求的HTTP服务器的日志文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的access_log指令。默认情况下，文件名 为<code>*prefix*/logs/access.log</code>.</p>\n</li>\n<li><p><code>--user=*name*</code>  设置nginx工作进程的用户。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的用户名是nobody。</p>\n</li>\n<li><p><code>--group=*name*</code>  设置nginx工作进程的用户组。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的为非特权用户。</p>\n</li>\n<li><p><code>--with-select_module</code> <code>--without-select_module 启用或禁用构建一个模块来允许服务器使用select()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。</code></p>\n</li>\n<li><p><code>--with-poll_module</code> <code>--without-poll_module</code> 启用或禁用构建一个模块来允许服务器使用poll()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。</p>\n</li>\n<li><p><code>--without-http_gzip_module</code> — 不编译压缩的HTTP服务器的响应模块。编译并运行此模块需要zlib库。</p>\n</li>\n<li><p><code>--without-http_rewrite_module</code>  不编译重写模块。编译并运行此模块需要PCRE库支持。</p>\n</li>\n<li><p><code>--without-http_proxy_module</code> — 不编译http_proxy模块。</p>\n</li>\n<li><p><code>--with-http_ssl_module</code> — 使用https协议模块。默认情况下，该模块没有被构建。建立并运行此模块的OpenSSL库是必需的。</p>\n</li>\n<li><p><code>--with-pcre=*path*</code> — 设置PCRE库的源码路径。PCRE库的源码（版本4.4 - 8.30）需要从PCRE网站下载并解压。其余的工作是Nginx的./ configure和make来完成。正则表达式使用在location指令和 ngx_http_rewrite_module 模块中。</p>\n</li>\n<li><p><code>--with-pcre-jit</code> —编译PCRE包含“just-in-time compilation”（1.1.12中， pcre_jit指令）。</p>\n</li>\n<li><p><code>--with-zlib=*path*</code> —设置的zlib库的源码路径。要下载从 zlib（版本1.1.3 - 1.2.5）的并解压。其余的工作是Nginx的./ configure和make完成。ngx_http_gzip_module模块需要使用zlib 。</p>\n</li>\n<li><p><code>--with-cc-opt=*parameters*</code> — 设置额外的参数将被添加到CFLAGS变量。例如,当你在FreeBSD上使用PCRE库时需要使用:<code>--with-cc-opt=&quot;-I /usr/local/include。</code>.如需要需要增加 <code>select()支持的文件数量</code>:<code>--with-cc-opt=&quot;-D FD_SETSIZE=2048&quot;.</code></p>\n</li>\n<li><p><code>--with-ld-opt=*parameters*</code> —设置附加的参数，将用于在链接期间。例如，当在FreeBSD下使用该系统的PCRE库,应指定:<code>--with-ld-opt=&quot;-L /usr/local/lib&quot;.</code></p>\n</li>\n<li><p>典型实例(下面为了展示需要写在多行，执行时内容需要在同一行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   ./configure</span><br><span class=\"line\">&gt;       --sbin-path=/usr/local/nginx/nginx</span><br><span class=\"line\">&gt;       --conf-path=/usr/local/nginx/nginx.conf</span><br><span class=\"line\">&gt;       --pid-path=/usr/local/nginx/nginx.pid</span><br><span class=\"line\">&gt;       --with-http_ssl_module</span><br><span class=\"line\">&gt;       --with-pcre=../pcre-4.4</span><br><span class=\"line\">&gt;       --with-zlib=../zlib-1.1.3</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"部署web工程\"><a href=\"#部署web工程\" class=\"headerlink\" title=\"部署web工程\"></a>部署web工程</h2><h3 id=\"1-关于Nginx配置文件\"><a href=\"#1-关于Nginx配置文件\" class=\"headerlink\" title=\"1. 关于Nginx配置文件\"></a>1. 关于Nginx配置文件</h3><p>在部署web工程前，我们需要了解Nginx的配置文件。Nginx的配置文件存放在<code>nginx/conf/nginx.conf</code>。我们需要打开这个文件根据自己的web工程需求配置这个文件。</p>\n<blockquote>\n<p>在nginx配置文件中主要分为四部分：<code>main</code> 全局设置，<code>server</code>主机设置，<code>upstream</code>（上游服务器设置，主要为反向代理、负载均衡相关配置）和 <code>location</code>（URL匹配特定位置后的设置） main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。 </p>\n</blockquote>\n<p>先贴一个配置文件，再来按照这个文件进行说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#user  nobody;</span><br><span class=\"line\"></span><br><span class=\"line\">#在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</span><br><span class=\"line\"></span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">#写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\">\t#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\t减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用\t磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    # tcp_nopush     on;</span><br><span class=\"line\">\t#长连接超时时间，单位是秒。长连接请求大量小文件的时候，可以减少重建连接的开销，\t但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时\t 间保持连接会占用大量资源。</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">  # gzip压缩功能设置</span><br><span class=\"line\">\t# 开启gzip压缩输出，减少网络传输</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">\t#设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">\t#设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</span><br><span class=\"line\">    gzip_buffers    4 16k;</span><br><span class=\"line\">\t#gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">\t#匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</span><br><span class=\"line\">    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class=\"line\">    #和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。</span><br><span class=\"line\">\tgzip_vary on;</span><br><span class=\"line\">  </span><br><span class=\"line\">  # http_proxy 设置</span><br><span class=\"line\">\t#允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</span><br><span class=\"line\">    client_max_body_size   10m;</span><br><span class=\"line\">\t#缓冲区代理缓冲用户端请求的最大字节数</span><br><span class=\"line\">    client_body_buffer_size   128k;</span><br><span class=\"line\">\t#nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">    proxy_connect_timeout   75;</span><br><span class=\"line\">\t#连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</span><br><span class=\"line\">    proxy_read_timeout   75;</span><br><span class=\"line\">\t#设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认\t\t与proxy_buffers大小相同，其实可以将这个指令值设的小一点</span><br><span class=\"line\">    proxy_buffer_size   4k;</span><br><span class=\"line\">\t#proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均\t  在32k以下的话，这样设置</span><br><span class=\"line\">    proxy_buffers   4 32k;</span><br><span class=\"line\">\t#高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">    proxy_busy_buffers_size   64k;</span><br><span class=\"line\">\t#当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。\t\tproxy_temp_path（可以在编译的时候）指定写到哪那个目录。。</span><br><span class=\"line\">    proxy_temp_file_write_size  64k;</span><br><span class=\"line\">\t#指定将上面的临时文件写到哪那个目录。</span><br><span class=\"line\">    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 设定负载均衡后台服务器列表 </span><br><span class=\"line\">    upstream  arc  &#123; </span><br><span class=\"line\">              #ip_hash; </span><br><span class=\"line\">              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  </span><br><span class=\"line\">              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 很重要的虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">\t\t#虚拟主机监听的端口</span><br><span class=\"line\">        listen       8001;</span><br><span class=\"line\">\t\t#服务器名</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset utf-8;</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对 / 所有做负载均衡+反向代理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">\t\t   #定义服务器的默认网站根目录位置。</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">\t\t   #定义路径下默认访问的文件名</span><br><span class=\"line\">            index  index.jsp index.html index.htm;</span><br><span class=\"line\">\t\t   #请求转向arc定义的服务器列表，即反向代理，对应upstream负载均衡器。</span><br><span class=\"line\">            proxy_pass        http://arc;</span><br><span class=\"line\">\t\t   #下面这几个就这么设置吧  具体的我也不清楚</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">            proxy_set_header  Host  $host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;  </span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ## 其它虚拟主机，server 指令开始</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-部署前端工程\"><a href=\"#2-部署前端工程\" class=\"headerlink\" title=\"2. 部署前端工程\"></a>2. 部署前端工程</h3><p>将web项目上传到Nginx的安装目录中的<code>html</code>文件夹中。修改<code>nginx.conf</code>配置文件。</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ol>\n<li><p>web端不能访问</p>\n<p>检查防火墙是否关闭！关闭防火墙：<code>service iptables stop</code></p>\n</li>\n<li><p>非root用户报出<code>bind() to 0.0.0.0:80 failed (13:Permission denied)</code>错误</p>\n<p>这是由于非root用户启动时，<code>nginx.conf</code>文件中配置的端口为<code>80</code>，而在Linux中只有root用户才能使用1024以下的端口。所以只要讲配置文件中的端口修改为1024以上即可。</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://www.nginx.cn/install\" target=\"_blank\" rel=\"noopener\">Nginx安装</a></p>\n<p><a href=\"https://blog.csdn.net/tototuzuoquan/article/details/47381907\" target=\"_blank\" rel=\"noopener\">Nging下部署项目，配置文件修改</a></p>\n<p><a href=\"http://seanlook.com/2015/05/17/nginx-install-and-config/\" target=\"_blank\" rel=\"noopener\">nginx服务器安装及配置文件详解</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Nginx安装\"><a href=\"#Nginx安装\" class=\"headerlink\" title=\"Nginx安装\"></a>Nginx安装</h2><h3 id=\"1-下载依赖包\"><a href=\"#1-下载依赖包\" class=\"headerlink\" title=\"1. 下载依赖包\"></a>1. 下载依赖包</h3><ul>\n<li><p>如果你的服务器可以连接网络的话可以直接通过命令的方式下载tar包</p>\n<ol>\n<li><p>下载PCRE库</p>\n<p><code>wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz</code></p>\n</li>\n<li><p>下载zlib库</p>\n<p><code>wget http://zlib.net/zlib-1.2.10.tar.gz</code></p>\n</li>\n<li><p>下载OpenSSL库</p>\n<p><code>wget https://www.openssl.org/source/openssl-1.0.2o.tar.gz</code></p>\n</li>\n</ol></li></ul>","more":"\n<li><p>如果你的服务器无法联网，可以自行去上面的<code>wget</code>命令后面的地址下载对应的tar包文件，ftp路径也可以直接通过浏览器打开，再将他们传到服务器中。</p>\n</li>\n\n<h3 id=\"2-安装依赖包\"><a href=\"#2-安装依赖包\" class=\"headerlink\" title=\"2. 安装依赖包\"></a>2. 安装依赖包</h3><ul>\n<li><p>安装PCRE库</p>\n<ul>\n<li><p><code>tar -zxvf pcre-8.37.tar.gz</code> 先使用命令解压tar包</p>\n</li>\n<li><p><code>cd pcre-8.38</code> 进去解压后的文件目录</p>\n</li>\n<li><p><code>./configure</code> 运行初始化脚本</p>\n<p><strong>如果此时你不是用root用户安装，或者希望指定安装根路径，可以使用<code>--prefix=</code>参数来指定安装路径</strong> </p>\n<p>如：使用<code>./configure --prefix=/home/test/pcre</code>命令来指定将pcre安装到<code>/home/tese/pcre</code>目录下</p>\n</li>\n<li><p><code>make</code> 使用make命令尝试编译</p>\n</li>\n<li><p><code>make install</code> 编译安装</p>\n</li>\n</ul>\n</li>\n<li><p>安装zlib库</p>\n<ul>\n<li><p><code>tar -zxvf zlib-1.2.10.tar.gz</code> 先使用命令解压tar包</p>\n</li>\n<li><p><code>cd zlib-1.2.10</code> 进去解压后的文件目录</p>\n</li>\n<li><p><code>./configure</code> 运行初始化脚本</p>\n<p><strong>如果此时你不是用root用户安装，或者希望指定安装根路径，可以使用<code>--prefix=</code>参数来指定安装路径</strong> </p>\n<p>如：使用<code>./configure --prefix=/home/test/zlib</code>命令来指定将zlib安装到<code>/home/test/zlib</code>目录下</p>\n</li>\n<li><p><code>make</code> 使用make命令尝试编译</p>\n</li>\n<li><p><code>make install</code> 编译安装</p>\n</li>\n</ul>\n</li>\n<li><p>安装OpenSSL库</p>\n<ul>\n<li><code>tar -zxvf openssl-1.0.2o.tar.gz</code> 使用命令解压tar包即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-安装Nginx\"><a href=\"#3-安装Nginx\" class=\"headerlink\" title=\"3. 安装Nginx\"></a>3. 安装Nginx</h3><h4 id=\"3-1-安装步骤\"><a href=\"#3-1-安装步骤\" class=\"headerlink\" title=\"3.1 安装步骤\"></a>3.1 安装步骤</h4><ul>\n<li><p>先下载Nginx的tar包，我这里选择的是最新的稳定版<code>nginx-1.14.0.tar.gz</code></p>\n<p>跟上面安装依赖包一样，如果你的服务器可以联网的话建议使用<code>wget http://nginx.org/download/nginx-1.14.0.tar.gz</code>命令来下载tar包；如果不能联网的话建议自己通过浏览器访问http地址下载</p>\n</li>\n<li><p><code>tar -zxvf nginx-1.14.0.tar.gz</code> 解压Nginx的tar包</p>\n</li>\n<li><p><code>cd nginx-1.14.0</code> 进入解压后的目录</p>\n</li>\n<li><p><code>./configure</code>运行初始化脚本</p>\n<p><strong>注意：Nginx默认的安装路径是<code>/usr/local/nginx</code>,如果你不是使用root用户的话，就不能使用该路径。这里同样可以使用<code>--prefix=</code>参数来指定安装路径</strong> </p>\n<p>同时，你可以使用<code>--with-pcre=/home/test/pcre-8.38</code>来指定pcre安装路径</p>\n<p>使用<code>--with-zlib=/home/test/zlib</code>来指定zlib的安装路径</p>\n</li>\n<li><p><code>make</code> 使用make命令尝试编译</p>\n</li>\n<li><p><code>make install</code> 编译安装</p>\n</li>\n<li><p><code>cd sbin</code> 进入sbin目录下</p>\n</li>\n<li><p><code>./nginx</code> 启动Nginx  同时可以使用 <code>./nginx -s reload</code> 重启Nginx 使用<code>./nginx -s stop</code> 关停Nginx</p>\n</li>\n</ul>\n<h4 id=\"3-2-Nginx常用编译选项\"><a href=\"#3-2-Nginx常用编译选项\" class=\"headerlink\" title=\"3.2 Nginx常用编译选项\"></a>3.2 Nginx常用编译选项</h4><blockquote>\n<p>make是用来编译的，它从Makefile中读取指令，然后编译。</p>\n<p>make install是用来安装的，它也从Makefile中读取指令，安装到指定的位置。</p>\n<p>configure命令是用来检测你的安装平台的目标特征的。它定义了系统的各个方面，包括nginx的被允许使用的连接处理的方法，比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本，执行结束时，它会创建一个Makefile文件。nginx的configure命令支持以下参数：</p>\n<ul>\n<li><p><code>--prefix=*path*</code>    定义一个目录，存放服务器上的文件 ，也就是nginx的安装目录。默认使用 <code>/usr/local/nginx。</code></p>\n</li>\n<li><p><code>--sbin-path=*path*</code> 设置nginx的可执行文件的路径，默认为  <code>*prefix*/sbin/nginx</code>.</p>\n</li>\n<li><p><code>--conf-path=*path*</code>  设置在nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为<code>*prefix*/conf/nginx.conf</code>.</p>\n</li>\n<li><p><code>--pid-path=*path*  设置nginx.pid文件，将存储的主进程的进程号。安装完成后，可以随时改变的文件名 ， 在nginx.conf配置文件中使用 PID指令。默认情况下，文件名 为`</code><em>prefix</em>/logs/nginx.pid`.</p>\n</li>\n<li><p><code>--error-log-path=*path*</code> 设置主错误，警告，和诊断文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的error_log指令。默认情况下，文件名 为<code>*prefix*/logs/error.log</code>.</p>\n</li>\n<li><p><code>--http-log-path=*path*</code>  设置主请求的HTTP服务器的日志文件的名称。安装完成后，可以随时改变的文件名 ，在nginx.conf配置文件中 使用 的access_log指令。默认情况下，文件名 为<code>*prefix*/logs/access.log</code>.</p>\n</li>\n<li><p><code>--user=*name*</code>  设置nginx工作进程的用户。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的用户名是nobody。</p>\n</li>\n<li><p><code>--group=*name*</code>  设置nginx工作进程的用户组。安装完成后，可以随时更改的名称在nginx.conf配置文件中 使用的 user指令。默认的为非特权用户。</p>\n</li>\n<li><p><code>--with-select_module</code> <code>--without-select_module 启用或禁用构建一个模块来允许服务器使用select()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。</code></p>\n</li>\n<li><p><code>--with-poll_module</code> <code>--without-poll_module</code> 启用或禁用构建一个模块来允许服务器使用poll()方法。该模块将自动建立，如果平台不支持的kqueue，epoll，rtsig或/dev/poll。</p>\n</li>\n<li><p><code>--without-http_gzip_module</code> — 不编译压缩的HTTP服务器的响应模块。编译并运行此模块需要zlib库。</p>\n</li>\n<li><p><code>--without-http_rewrite_module</code>  不编译重写模块。编译并运行此模块需要PCRE库支持。</p>\n</li>\n<li><p><code>--without-http_proxy_module</code> — 不编译http_proxy模块。</p>\n</li>\n<li><p><code>--with-http_ssl_module</code> — 使用https协议模块。默认情况下，该模块没有被构建。建立并运行此模块的OpenSSL库是必需的。</p>\n</li>\n<li><p><code>--with-pcre=*path*</code> — 设置PCRE库的源码路径。PCRE库的源码（版本4.4 - 8.30）需要从PCRE网站下载并解压。其余的工作是Nginx的./ configure和make来完成。正则表达式使用在location指令和 ngx_http_rewrite_module 模块中。</p>\n</li>\n<li><p><code>--with-pcre-jit</code> —编译PCRE包含“just-in-time compilation”（1.1.12中， pcre_jit指令）。</p>\n</li>\n<li><p><code>--with-zlib=*path*</code> —设置的zlib库的源码路径。要下载从 zlib（版本1.1.3 - 1.2.5）的并解压。其余的工作是Nginx的./ configure和make完成。ngx_http_gzip_module模块需要使用zlib 。</p>\n</li>\n<li><p><code>--with-cc-opt=*parameters*</code> — 设置额外的参数将被添加到CFLAGS变量。例如,当你在FreeBSD上使用PCRE库时需要使用:<code>--with-cc-opt=&quot;-I /usr/local/include。</code>.如需要需要增加 <code>select()支持的文件数量</code>:<code>--with-cc-opt=&quot;-D FD_SETSIZE=2048&quot;.</code></p>\n</li>\n<li><p><code>--with-ld-opt=*parameters*</code> —设置附加的参数，将用于在链接期间。例如，当在FreeBSD下使用该系统的PCRE库,应指定:<code>--with-ld-opt=&quot;-L /usr/local/lib&quot;.</code></p>\n</li>\n<li><p>典型实例(下面为了展示需要写在多行，执行时内容需要在同一行)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;   ./configure</span><br><span class=\"line\">&gt;       --sbin-path=/usr/local/nginx/nginx</span><br><span class=\"line\">&gt;       --conf-path=/usr/local/nginx/nginx.conf</span><br><span class=\"line\">&gt;       --pid-path=/usr/local/nginx/nginx.pid</span><br><span class=\"line\">&gt;       --with-http_ssl_module</span><br><span class=\"line\">&gt;       --with-pcre=../pcre-4.4</span><br><span class=\"line\">&gt;       --with-zlib=../zlib-1.1.3</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"部署web工程\"><a href=\"#部署web工程\" class=\"headerlink\" title=\"部署web工程\"></a>部署web工程</h2><h3 id=\"1-关于Nginx配置文件\"><a href=\"#1-关于Nginx配置文件\" class=\"headerlink\" title=\"1. 关于Nginx配置文件\"></a>1. 关于Nginx配置文件</h3><p>在部署web工程前，我们需要了解Nginx的配置文件。Nginx的配置文件存放在<code>nginx/conf/nginx.conf</code>。我们需要打开这个文件根据自己的web工程需求配置这个文件。</p>\n<blockquote>\n<p>在nginx配置文件中主要分为四部分：<code>main</code> 全局设置，<code>server</code>主机设置，<code>upstream</code>（上游服务器设置，主要为反向代理、负载均衡相关配置）和 <code>location</code>（URL匹配特定位置后的设置） main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。 </p>\n</blockquote>\n<p>先贴一个配置文件，再来按照这个文件进行说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#user  nobody;</span><br><span class=\"line\"></span><br><span class=\"line\">#在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</span><br><span class=\"line\"></span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#error_log  logs/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">#写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\">    #access_log  logs/access.log  main;</span><br><span class=\"line\">\t#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\t减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用\t磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    # tcp_nopush     on;</span><br><span class=\"line\">\t#长连接超时时间，单位是秒。长连接请求大量小文件的时候，可以减少重建连接的开销，\t但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时\t 间保持连接会占用大量资源。</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">  # gzip压缩功能设置</span><br><span class=\"line\">\t# 开启gzip压缩输出，减少网络传输</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">\t#设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">\t#设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。</span><br><span class=\"line\">    gzip_buffers    4 16k;</span><br><span class=\"line\">\t#gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">\t#匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。</span><br><span class=\"line\">    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class=\"line\">    #和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。</span><br><span class=\"line\">\tgzip_vary on;</span><br><span class=\"line\">  </span><br><span class=\"line\">  # http_proxy 设置</span><br><span class=\"line\">\t#允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</span><br><span class=\"line\">    client_max_body_size   10m;</span><br><span class=\"line\">\t#缓冲区代理缓冲用户端请求的最大字节数</span><br><span class=\"line\">    client_body_buffer_size   128k;</span><br><span class=\"line\">\t#nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">    proxy_connect_timeout   75;</span><br><span class=\"line\">\t#连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</span><br><span class=\"line\">    proxy_read_timeout   75;</span><br><span class=\"line\">\t#设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认\t\t与proxy_buffers大小相同，其实可以将这个指令值设的小一点</span><br><span class=\"line\">    proxy_buffer_size   4k;</span><br><span class=\"line\">\t#proxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均\t  在32k以下的话，这样设置</span><br><span class=\"line\">    proxy_buffers   4 32k;</span><br><span class=\"line\">\t#高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">    proxy_busy_buffers_size   64k;</span><br><span class=\"line\">\t#当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。\t\tproxy_temp_path（可以在编译的时候）指定写到哪那个目录。。</span><br><span class=\"line\">    proxy_temp_file_write_size  64k;</span><br><span class=\"line\">\t#指定将上面的临时文件写到哪那个目录。</span><br><span class=\"line\">    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 设定负载均衡后台服务器列表 </span><br><span class=\"line\">    upstream  arc  &#123; </span><br><span class=\"line\">              #ip_hash; </span><br><span class=\"line\">              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  </span><br><span class=\"line\">              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 很重要的虚拟主机配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">\t\t#虚拟主机监听的端口</span><br><span class=\"line\">        listen       8001;</span><br><span class=\"line\">\t\t#服务器名</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset utf-8;</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #对 / 所有做负载均衡+反向代理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">\t\t   #定义服务器的默认网站根目录位置。</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">\t\t   #定义路径下默认访问的文件名</span><br><span class=\"line\">            index  index.jsp index.html index.htm;</span><br><span class=\"line\">\t\t   #请求转向arc定义的服务器列表，即反向代理，对应upstream负载均衡器。</span><br><span class=\"line\">            proxy_pass        http://arc;</span><br><span class=\"line\">\t\t   #下面这几个就这么设置吧  具体的我也不清楚</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">            proxy_set_header  Host  $host;</span><br><span class=\"line\">            proxy_set_header  X-Real-IP  $remote_addr;  </span><br><span class=\"line\">            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ## 其它虚拟主机，server 指令开始</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-部署前端工程\"><a href=\"#2-部署前端工程\" class=\"headerlink\" title=\"2. 部署前端工程\"></a>2. 部署前端工程</h3><p>将web项目上传到Nginx的安装目录中的<code>html</code>文件夹中。修改<code>nginx.conf</code>配置文件。</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ol>\n<li><p>web端不能访问</p>\n<p>检查防火墙是否关闭！关闭防火墙：<code>service iptables stop</code></p>\n</li>\n<li><p>非root用户报出<code>bind() to 0.0.0.0:80 failed (13:Permission denied)</code>错误</p>\n<p>这是由于非root用户启动时，<code>nginx.conf</code>文件中配置的端口为<code>80</code>，而在Linux中只有root用户才能使用1024以下的端口。所以只要讲配置文件中的端口修改为1024以上即可。</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"http://www.nginx.cn/install\" target=\"_blank\" rel=\"noopener\">Nginx安装</a></p>\n<p><a href=\"https://blog.csdn.net/tototuzuoquan/article/details/47381907\" target=\"_blank\" rel=\"noopener\">Nging下部署项目，配置文件修改</a></p>\n<p><a href=\"http://seanlook.com/2015/05/17/nginx-install-and-config/\" target=\"_blank\" rel=\"noopener\">nginx服务器安装及配置文件详解</a></p>"},{"title":"星际穿越","date":"2018-06-10T12:20:29.000Z","_content":"\n诺兰大神14年的电影，上周末又拿出来再刷一遍，看得我好几次起鸡皮疙瘩，非常感动。看完觉得从另一个角度理解了时间，空间，虫洞，黑洞，同时诺兰又在电影里加上了人性和爱。\n\n![](星际穿越\\p1839451104.jpg)![](星际穿越\\p2205519883.jpg)\n\n<!--more-->\n\n![](星际穿越\\微信截图_20180603135030.png)\n\n![](星际穿越\\微信截图_20180603135057.png)\n\n老物理学家说他害怕的是时间。是的，他已经解出了那个方程式，知道一切无望。只有B计划才是唯一能将人类种族繁衍下去的办法。他直到临终前都一直在说`Do not go gentle into that good night` 。诗里的night或许指的是地球上人类的灭亡，所以他即使已经算出了方程式，也希望可以找到一些方法拯救留在这个星球上的人类。所以他说自己害怕的是时间。在临终前，告诉了墨菲真相，他希望墨菲可以`Do not go gentle into that good night`,或许她可以拯救留在这个星球上的人类。\n\n![](星际穿越\\微信截图_20180603143045.png)\n\n![](星际穿越\\微信截图_20180603143100.png)\n\n![](星际穿越\\微信截图_20180603143109.png)\n\n![](星际穿越\\微信截图_20180603143126.png)\n\n>不要温和地走入那良夜 \n>\n>\n>不要温和地走入那良夜， \n>老年人应该燃烧并对着日暮呼喊； \n>怒斥、怒斥那光明的微灭。 \n>\n>尽管聪明人临终时知道黑暗真确， \n>是因为他们的话语没有迸射闪电， \n>他们并不温和地走入那良夜。 \n>\n>好人，当最后一浪涌过，号呼他们脆弱的功业 \n>本可以很光辉地起舞于绿色的海湾， \n>也怒斥、怒斥那光明的微灭。 \n>\n>狂放的人碰见并歌唱过太阳的飞越， \n>意识到，太晚了，他们曾使它在途中哀叹， \n>他们也并不温和地走入那良夜。 \n>\n>沉肃的人，临死时用目眩的视觉 \n>看到瞎眼也能像流星般闪耀而欣欢， \n>也怒斥、怒斥那光明的微灭。 \n>\n>而您呀，我的父亲，身处高度的悲切， \n>请用您的热泪诅咒、祝福我，我祈愿。 \n>不要温和地走入那良夜， \n>怒斥、怒斥那光明的微灭。 \n\n上面是这首诗的一个翻译版本。这首诗原本是诗人写给临危的父亲的，诺兰将这首诗作为电影的主题，是写给临危的地球和人类的。`Do not go gentle into that good night`像是老教授对人类的呐喊，而库珀和墨菲则像是在`rage against the dying of the light` \n\n最后，男主马修麦康纳和安妮海瑟薇的新片《宁静》最近曝光了预告片，期待一波~\n\n","source":"_posts/星际穿越.md","raw":"---\ntitle: 星际穿越\ndate: 2018-06-10 20:20:29\ncategories: \"电影\"\ntags: \"诺兰\"\n---\n\n诺兰大神14年的电影，上周末又拿出来再刷一遍，看得我好几次起鸡皮疙瘩，非常感动。看完觉得从另一个角度理解了时间，空间，虫洞，黑洞，同时诺兰又在电影里加上了人性和爱。\n\n![](星际穿越\\p1839451104.jpg)![](星际穿越\\p2205519883.jpg)\n\n<!--more-->\n\n![](星际穿越\\微信截图_20180603135030.png)\n\n![](星际穿越\\微信截图_20180603135057.png)\n\n老物理学家说他害怕的是时间。是的，他已经解出了那个方程式，知道一切无望。只有B计划才是唯一能将人类种族繁衍下去的办法。他直到临终前都一直在说`Do not go gentle into that good night` 。诗里的night或许指的是地球上人类的灭亡，所以他即使已经算出了方程式，也希望可以找到一些方法拯救留在这个星球上的人类。所以他说自己害怕的是时间。在临终前，告诉了墨菲真相，他希望墨菲可以`Do not go gentle into that good night`,或许她可以拯救留在这个星球上的人类。\n\n![](星际穿越\\微信截图_20180603143045.png)\n\n![](星际穿越\\微信截图_20180603143100.png)\n\n![](星际穿越\\微信截图_20180603143109.png)\n\n![](星际穿越\\微信截图_20180603143126.png)\n\n>不要温和地走入那良夜 \n>\n>\n>不要温和地走入那良夜， \n>老年人应该燃烧并对着日暮呼喊； \n>怒斥、怒斥那光明的微灭。 \n>\n>尽管聪明人临终时知道黑暗真确， \n>是因为他们的话语没有迸射闪电， \n>他们并不温和地走入那良夜。 \n>\n>好人，当最后一浪涌过，号呼他们脆弱的功业 \n>本可以很光辉地起舞于绿色的海湾， \n>也怒斥、怒斥那光明的微灭。 \n>\n>狂放的人碰见并歌唱过太阳的飞越， \n>意识到，太晚了，他们曾使它在途中哀叹， \n>他们也并不温和地走入那良夜。 \n>\n>沉肃的人，临死时用目眩的视觉 \n>看到瞎眼也能像流星般闪耀而欣欢， \n>也怒斥、怒斥那光明的微灭。 \n>\n>而您呀，我的父亲，身处高度的悲切， \n>请用您的热泪诅咒、祝福我，我祈愿。 \n>不要温和地走入那良夜， \n>怒斥、怒斥那光明的微灭。 \n\n上面是这首诗的一个翻译版本。这首诗原本是诗人写给临危的父亲的，诺兰将这首诗作为电影的主题，是写给临危的地球和人类的。`Do not go gentle into that good night`像是老教授对人类的呐喊，而库珀和墨菲则像是在`rage against the dying of the light` \n\n最后，男主马修麦康纳和安妮海瑟薇的新片《宁静》最近曝光了预告片，期待一波~\n\n","slug":"星际穿越","published":1,"updated":"2018-06-10T13:12:37.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbcbg83000ev8w0357bqlz0","content":"<p>诺兰大神14年的电影，上周末又拿出来再刷一遍，看得我好几次起鸡皮疙瘩，非常感动。看完觉得从另一个角度理解了时间，空间，虫洞，黑洞，同时诺兰又在电影里加上了人性和爱。</p>\n<p><img src=\"/2018/06/10/星际穿越/p1839451104.jpg\" alt=\"\"><img src=\"/2018/06/10/星际穿越/p2205519883.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603135030.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603135057.png\" alt=\"\"></p>\n<p>老物理学家说他害怕的是时间。是的，他已经解出了那个方程式，知道一切无望。只有B计划才是唯一能将人类种族繁衍下去的办法。他直到临终前都一直在说<code>Do not go gentle into that good night</code> 。诗里的night或许指的是地球上人类的灭亡，所以他即使已经算出了方程式，也希望可以找到一些方法拯救留在这个星球上的人类。所以他说自己害怕的是时间。在临终前，告诉了墨菲真相，他希望墨菲可以<code>Do not go gentle into that good night</code>,或许她可以拯救留在这个星球上的人类。</p>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603143045.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603143100.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603143109.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603143126.png\" alt=\"\"></p>\n<blockquote>\n<p>不要温和地走入那良夜 </p>\n<p>不要温和地走入那良夜，<br>老年人应该燃烧并对着日暮呼喊；<br>怒斥、怒斥那光明的微灭。 </p>\n<p>尽管聪明人临终时知道黑暗真确，<br>是因为他们的话语没有迸射闪电，<br>他们并不温和地走入那良夜。 </p>\n<p>好人，当最后一浪涌过，号呼他们脆弱的功业<br>本可以很光辉地起舞于绿色的海湾，<br>也怒斥、怒斥那光明的微灭。 </p>\n<p>狂放的人碰见并歌唱过太阳的飞越，<br>意识到，太晚了，他们曾使它在途中哀叹，<br>他们也并不温和地走入那良夜。 </p>\n<p>沉肃的人，临死时用目眩的视觉<br>看到瞎眼也能像流星般闪耀而欣欢，<br>也怒斥、怒斥那光明的微灭。 </p>\n<p>而您呀，我的父亲，身处高度的悲切，<br>请用您的热泪诅咒、祝福我，我祈愿。<br>不要温和地走入那良夜，<br>怒斥、怒斥那光明的微灭。 </p>\n</blockquote>\n<p>上面是这首诗的一个翻译版本。这首诗原本是诗人写给临危的父亲的，诺兰将这首诗作为电影的主题，是写给临危的地球和人类的。<code>Do not go gentle into that good night</code>像是老教授对人类的呐喊，而库珀和墨菲则像是在<code>rage against the dying of the light</code> </p>\n<p>最后，男主马修麦康纳和安妮海瑟薇的新片《宁静》最近曝光了预告片，期待一波~</p>\n","site":{"data":{}},"excerpt":"<p>诺兰大神14年的电影，上周末又拿出来再刷一遍，看得我好几次起鸡皮疙瘩，非常感动。看完觉得从另一个角度理解了时间，空间，虫洞，黑洞，同时诺兰又在电影里加上了人性和爱。</p>\n<p><img src=\"/2018/06/10/星际穿越/p1839451104.jpg\" alt=\"\"><img src=\"/2018/06/10/星际穿越/p2205519883.jpg\" alt=\"\"></p>","more":"<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603135030.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603135057.png\" alt=\"\"></p>\n<p>老物理学家说他害怕的是时间。是的，他已经解出了那个方程式，知道一切无望。只有B计划才是唯一能将人类种族繁衍下去的办法。他直到临终前都一直在说<code>Do not go gentle into that good night</code> 。诗里的night或许指的是地球上人类的灭亡，所以他即使已经算出了方程式，也希望可以找到一些方法拯救留在这个星球上的人类。所以他说自己害怕的是时间。在临终前，告诉了墨菲真相，他希望墨菲可以<code>Do not go gentle into that good night</code>,或许她可以拯救留在这个星球上的人类。</p>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603143045.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603143100.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603143109.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/10/星际穿越/微信截图_20180603143126.png\" alt=\"\"></p>\n<blockquote>\n<p>不要温和地走入那良夜 </p>\n<p>不要温和地走入那良夜，<br>老年人应该燃烧并对着日暮呼喊；<br>怒斥、怒斥那光明的微灭。 </p>\n<p>尽管聪明人临终时知道黑暗真确，<br>是因为他们的话语没有迸射闪电，<br>他们并不温和地走入那良夜。 </p>\n<p>好人，当最后一浪涌过，号呼他们脆弱的功业<br>本可以很光辉地起舞于绿色的海湾，<br>也怒斥、怒斥那光明的微灭。 </p>\n<p>狂放的人碰见并歌唱过太阳的飞越，<br>意识到，太晚了，他们曾使它在途中哀叹，<br>他们也并不温和地走入那良夜。 </p>\n<p>沉肃的人，临死时用目眩的视觉<br>看到瞎眼也能像流星般闪耀而欣欢，<br>也怒斥、怒斥那光明的微灭。 </p>\n<p>而您呀，我的父亲，身处高度的悲切，<br>请用您的热泪诅咒、祝福我，我祈愿。<br>不要温和地走入那良夜，<br>怒斥、怒斥那光明的微灭。 </p>\n</blockquote>\n<p>上面是这首诗的一个翻译版本。这首诗原本是诗人写给临危的父亲的，诺兰将这首诗作为电影的主题，是写给临危的地球和人类的。<code>Do not go gentle into that good night</code>像是老教授对人类的呐喊，而库珀和墨菲则像是在<code>rage against the dying of the light</code> </p>\n<p>最后，男主马修麦康纳和安妮海瑟薇的新片《宁静》最近曝光了预告片，期待一波~</p>"},{"title":"关于第一次换工作的面试经验","_content":"\n\n\n因为一直想去南方的城市。所以我决定离开恒生去深圳发展，于是在2018年3月份的时候开始计划准备离职，那时候我还在北京。当时已经跟我的主管老大提出离职的意向。离职的流程大概要走一个月左右，在这一个月的时间内，我开始准备一些面试的东西，主要还是java基础这一块。所以从那个时候起，我开始写一些笔记，然后参加一些面试，主要是想通过这种方式，来增加自己的面试经验,了解自己有哪些不足的地方。然后当时恒生也在招人，所以就跟着几个老同事一起面了几个开发。在这里记录一下，我从2018年4月份至2018年5月份，这一个多月的时间里，参加过的所有面试经历，还有碰到的一些的面试题以及我个人对面试这件事情的看法和总结。\n\n<!--more-->\n\n## 先锋支付\n**面试流程**\n先锋支付的面试流程是先参加笔试，笔试之后紧接着参加面试。这也是大多数公司都会采用的一种面试流程。当然也有很多公司追求效率直接让你参加面试。 \n**笔试和面试题**\n\n1. 内连接，左连接，全连接之间的区别。\n\n2. chmod 给文件授权和find命令的使用\n\n3. 如何在数据库每一秒钟都有数据写入的时候进行拆表。\n\n4. spring scope？\n\n   这个问题经常遇到，我在目前工作的这家公司笔试的时候也遇到过。\n\n5. spring动态代理 实现方式和配置\n\n6. java的几种加密方式\n\n7. 定时任务的实现方式\n\n8. final,finally,finalize这三者之间的区别。\n\n9. 策略模式，命令模式与模板模式之间的区别。\n\n## 灵狮区块链\n**面试流程**\n这家公司是约的电话面试。面试官人很好，面试问到的内容，基本上都是关于java基础然后跟面试官聊的也比较久，双方对彼此都有一个比较好的了解。\n**面试题**\n\n1. java内存模型，堆内存和栈内存的区别。\n\n2. spring aop使用了什么设计模式? 关于spring aop的考察也是会经常遇到的问题。主要需要了解的就是spring aop的实现方式，它是通过动态代理实现的，然后面试官又会扩展的问道，动态代理有几种实现方式？\n\n3. socket网络编程\n\n4. 如何实现线程之间的通信。\n\n   这里主要是看一下juc包的源码\n\n5. hashmap的数据结构，以及实现方式。\n\n   关于这一块，我有写过它的源码分析文章。\n\n6. mongodb与传统数据库有什么区别？\n\n   以及mangodb常用的命令这个问题我也遇到过很多次其实问的都不难，是一些比较基础的东西。\n\n7. 关于jpa的了解。\n\n   其实这里暴露了我的一个问题。我当时不知道jpa是啥。包括在后来的面试中，一个面试官问我关于orm的理解。其实我也不太清楚，orm是什么东西。所以在面试的时候，关于这些特别基础的常识性的东西，还是需要了解清楚。否则答不上来的话，会让人觉得你比较业余。而我当时，只顾着复习java基础的东西，关于框架这一块学习的不多。之前在公司，都是使用现成的框架，也没有去折腾过jpa，orm\n\n8. 查询sql语句优化。关于sq优化的问题我在很多面试中都遇到过。  \n\n9. 左连接，右连接，与内连接之间的区别？\n\n   这个问题我在之前的面试中就已经遇到过。\n\n10. 平时喜欢钻研的技术？\n\n    这个问题其实在很多公司面试的时候都会问到。很多面试官其实就是项目组的技术负责人，然后他们会考察你作为一个开发人员对于技术的热情。所以这个时候，如果你有写过一些，技术博客，或者看过一些源码，或者直接把github账号展现给面试官看的话，会是一个优势。\n\n## 嘉联支付\n**面试流程**\n嘉联支付的面试流程是先笔试，然后紧接着跟技术负责人聊。\n**笔试和面试题**\n\n1. mybatis分页实现。\n\n   这个我之前在恒生的时候已经看过mybatis分页的源代码。这一块主要是通过分页插件拦截器实现的。\n\n2. springaop原理。\n\n   这个问题我在上面遇到过。\n\n3. 对spring mvc和severlet的了解。\n\n   关于spring mvc这一块的东西在面试中还是会经常遇到的。因为我之前一直是做后台的开发，所以对前台mvc的东西了解的不多。去找工作面试的话，还是应该要全面一点，至少要了解一些常用的东西。要做到你知道这是一个什么东西，即使你不精通，但是哪怕你写过一个简单的demo。也比直接说，我不知道要强。\n\n4. 单例模式手写。\n\n   嘉联支付的笔试要求手写出单例模式。当时我并没有完整的写出来。程序里面忘了加static关键字。\n\n5. zk分布式锁的实现。\n\n6. sql去重有哪些方法。\n\n## 软通动力\n**面试流程**\n软通动力的面试也是先笔试再面试的形式。但是软通动力的面试官真的很不专业。所以不建议大家以后去这种，外包公司去面试，其实对于你刷面试经验并没有太大的帮助。因为你极有可能碰到的是一个非常不靠谱的面试官，他不懂得怎么面试。\n\n**笔试和面试题** \n\n1. 说一下nginx如何部署。\n\n   这个我不会，没答上来。\n\n2. 为什么选用mongodb。\n\n   这个问题我当时直接说了一下mangodb，它解决了我们哪些业务场景的问题\n\n3. 查看数据库表用户命令。\n\n   这个问题我也没有答上来。\n\n4. 说一下spring MVC\n\n5. 说一下serverlet\n\n6. 说一下java这门语言\n\n   当面试官问出这些问题的时候，我其实是比较反感的。首先，面试一定是面试者和公司双方之间的交流。并不是单纯的面试官问面试者问题。所以，对于面试者来说，在一场面试中，他需要从面试官那里充分了解这个公司。所以经常有一些面试官会问，你有些什么想要从我这里获知的。对于面试官来说，他想要知道的是，面试者是否达到了自己这个岗位的要求。\n\n   因此当面试官问我怎么看java这门语言的时候。我觉得这种问题除了让面试官秀自己的优越感以外，其他毫无意义。即使我这个问题回答的再好，也并不能体现我开发技能有多好，最多只能体现出我对java这门语言的理解水平。\n\n\n7. 说一下java并发和多线程。\n\n   在回答这一题的时候，我直接说出了一种最简单的实现方式。后来我反思了一下，觉得我说得并不好，因为其实面试官肯定知道这种简单的东西，他希望的是你要答出他的痛点。你需要讲出多线程并发编程的时候，哪些需要注意的事项。这个也是我后来跟一个猎头朋友，还有一个技术负责人聊天的时候，他们给我的一点提示，对我的帮助还是很大的。\n\n**关于软通动力面试后的总结**\n在经过了软通动力的面试之后，我自己反思了一下在这场面试中有哪些不足的地方？最后我得到的收获是，第一点对于自己原本就，不是太有兴趣的公司，应该直接不去面试，否则其实是浪费自己的时间。本来我是想通过面试来刷一下自己的面试经验。但是后来我发现，会经常碰到一些不太靠谱的面试官。就像软通动力的这个面试官一样，甚至我答完了面试官的问题之后，我还没有来得及问他一些关于公司的事情，他就直接让我在那里等结果。结果等了一个小时也没有结果。非常不尊重面试者。所以从那之后，任何外包公司的面试我一律不去。\n第二点是，我没有回答好面试官的说一下XXX系列问题，其实这种问题很难回答，你可以往简单的说，也可以往复杂了说。而且因为这个问题不具体，你不知道面试官的痛点在哪里，很难把这个问题回答的很好。有水平的面试官，他会根据你说出的答案，不断的进行深挖。这样才能体现出你对一个技术点，了解的深度。然而在像软通动力这种外包公司里他们并不注重技术，所以他们的面试官，也不太会注重深挖你的技术。这也是我不建议大家去外包公司面试的原因。因为你有很大的概率会遇到这种麻瓜面试官。\n\n## 赢时胜\n**面试流程**\n赢时胜的面试流程也是先笔试再面试。\n**面试过程**\n面试官没有问太多技术性的问题，主要是针对笔试题问了些简单的问题，大多数时间聊的还是业务上的事情。因为我之前做的是银行的开发，刚好跟他们的一个现有的项目对口。所以后来赢时胜还是给我发了offer。但是这些大公司都会压你的工资。他们根据工作经验划分出不同的薪资水平，然后根据面试者的面试情况，压低面试者的薪资。他们的这种做法让我觉得很不喜欢，所以虽然后来拿了offer，但是也不是我期望的薪资，当时作为一个保底就先接受了。\n这里也说一下关于，期望薪资的问题。我之前刷面试经验的时候会去面很多做外包的小公司，然后这些公司出于人力成本的考虑，本来就不会给岗位开出很高的薪资，但是他们会在，招聘信息上把薪资上限的很高。比如三年工作经验以内，给的薪资水平是9k到18k这种。其实他们真正能跟岗位开出的工资也就是9k左右，即使你面试的情况再好，也不可能到18k。当我带着13k期望薪资去面试他们这种岗位的时候，面试官看到你的期望薪资，其实就已经觉得你不太合适了。然后如果他们觉得你的面试情况好的话，肯定会压低你的薪资。\n\n## 木槿科技\n\n**面试流程**\n木槿科技的面试时先HR面，人力会跟你大体上聊一些离职原因，之前负责的工作，期望薪资这些。然后是技术负责人面试，他们没有笔试环节。\n**面试题**\n\n1. 你对ORM的了解\n\n   这里就再次丢脸了，没答出来\n\n2. zk如何实现分布式锁\n\n   这个问题也是之前遇到过的\n\n3. 简述Jdbc的编程过程\n\n   这个我之前一直没有自己写过，都是通过使用Mybatis框架来做的这个事情。\n\n4. Redis的几种数据结构\n\n5. Hash型数据存储的基本使用命令\n\n   这个我之前看过这些简单的命令，但是当时忘了也没答上来。\n\n**木槿科技面试总结**\n\n在面试木槿的时候遇到过几次很基础，很简单的问题没有答出来。而在这之前我准备的面试方向都是Java基础比较深入的应用。面试了这几家公司发现他们大多数其实问的内容都很简单，根本不会涉及到很深的原理性问题，也不会深挖技术细节。而很多很简单的概念其实我不是很清楚，之前也没关注过这些，所以导致了我很受挫，在面试的时候这种问题答不出来显得很业余。\n\n## 华锐金融\n**面试流程**\n华锐的面试也是采用先笔试后面试的方式进行\n**面试和笔试题**\n\n1. 一个文件里面包含很多个乱序不重复的电话号码，需要在20兆内存的空间内，将这些电话号码进行排序，并重新输出到另一个文件内。\n\n   这一题我没有做出来。\n\n2. java内存模型中，堆内存和栈内存的区别。\n\n3. 垃圾回收算法\n\n4. 如何复制一个对内存中的对象？\n\n**华锐面试的总结**\n其实一开始我笔试题做得并不好，技术面之后，我一度以为自己已经挂了。没想到后来人力资源，和面试官一起讨论了一下，觉得我还可以。紧接着后来就是人力资源给我介绍一下这家公司详细情况。介绍完之后，立马就进行了ceo面。跟ceo聊的很好，然后也了解了这个公司的团队情况，觉得非常厉害，也是我期望的那种工作团队。从面试体验也可以看出来，整个公司团队的，效率和执行力是非常高的。CEO非常尊重工程师，面试结束之后，亲自把我送到了电梯门口。面试是当天上午十点开始的，等结束的时候，快下午1点了。后来我回到家里，下午两三点的时候，人力给我发来录用通知，开出的薪资条件，远远超过了我的期望。可以看出来他们非常的有诚意，也非常尊重工程师文化。通过华锐的面试，给我的感觉是，运气也非常的重要。所以在找工作面试的时候，不要因为，有几家面试失败了，就轻易的看低自己，一定要坚持下去，尽量去一家你想去的公司。如果这家公司从一开始就压榨你的薪资的话，也不用指望你入职之后能有多大的改善","source":"_posts/关于第一次换工作的面试经验.md","raw":"---\ntitle: 关于第一次换工作的面试经验\ncategories: \"面试\"\ntags: \"面试总结\"\n---\n\n\n\n因为一直想去南方的城市。所以我决定离开恒生去深圳发展，于是在2018年3月份的时候开始计划准备离职，那时候我还在北京。当时已经跟我的主管老大提出离职的意向。离职的流程大概要走一个月左右，在这一个月的时间内，我开始准备一些面试的东西，主要还是java基础这一块。所以从那个时候起，我开始写一些笔记，然后参加一些面试，主要是想通过这种方式，来增加自己的面试经验,了解自己有哪些不足的地方。然后当时恒生也在招人，所以就跟着几个老同事一起面了几个开发。在这里记录一下，我从2018年4月份至2018年5月份，这一个多月的时间里，参加过的所有面试经历，还有碰到的一些的面试题以及我个人对面试这件事情的看法和总结。\n\n<!--more-->\n\n## 先锋支付\n**面试流程**\n先锋支付的面试流程是先参加笔试，笔试之后紧接着参加面试。这也是大多数公司都会采用的一种面试流程。当然也有很多公司追求效率直接让你参加面试。 \n**笔试和面试题**\n\n1. 内连接，左连接，全连接之间的区别。\n\n2. chmod 给文件授权和find命令的使用\n\n3. 如何在数据库每一秒钟都有数据写入的时候进行拆表。\n\n4. spring scope？\n\n   这个问题经常遇到，我在目前工作的这家公司笔试的时候也遇到过。\n\n5. spring动态代理 实现方式和配置\n\n6. java的几种加密方式\n\n7. 定时任务的实现方式\n\n8. final,finally,finalize这三者之间的区别。\n\n9. 策略模式，命令模式与模板模式之间的区别。\n\n## 灵狮区块链\n**面试流程**\n这家公司是约的电话面试。面试官人很好，面试问到的内容，基本上都是关于java基础然后跟面试官聊的也比较久，双方对彼此都有一个比较好的了解。\n**面试题**\n\n1. java内存模型，堆内存和栈内存的区别。\n\n2. spring aop使用了什么设计模式? 关于spring aop的考察也是会经常遇到的问题。主要需要了解的就是spring aop的实现方式，它是通过动态代理实现的，然后面试官又会扩展的问道，动态代理有几种实现方式？\n\n3. socket网络编程\n\n4. 如何实现线程之间的通信。\n\n   这里主要是看一下juc包的源码\n\n5. hashmap的数据结构，以及实现方式。\n\n   关于这一块，我有写过它的源码分析文章。\n\n6. mongodb与传统数据库有什么区别？\n\n   以及mangodb常用的命令这个问题我也遇到过很多次其实问的都不难，是一些比较基础的东西。\n\n7. 关于jpa的了解。\n\n   其实这里暴露了我的一个问题。我当时不知道jpa是啥。包括在后来的面试中，一个面试官问我关于orm的理解。其实我也不太清楚，orm是什么东西。所以在面试的时候，关于这些特别基础的常识性的东西，还是需要了解清楚。否则答不上来的话，会让人觉得你比较业余。而我当时，只顾着复习java基础的东西，关于框架这一块学习的不多。之前在公司，都是使用现成的框架，也没有去折腾过jpa，orm\n\n8. 查询sql语句优化。关于sq优化的问题我在很多面试中都遇到过。  \n\n9. 左连接，右连接，与内连接之间的区别？\n\n   这个问题我在之前的面试中就已经遇到过。\n\n10. 平时喜欢钻研的技术？\n\n    这个问题其实在很多公司面试的时候都会问到。很多面试官其实就是项目组的技术负责人，然后他们会考察你作为一个开发人员对于技术的热情。所以这个时候，如果你有写过一些，技术博客，或者看过一些源码，或者直接把github账号展现给面试官看的话，会是一个优势。\n\n## 嘉联支付\n**面试流程**\n嘉联支付的面试流程是先笔试，然后紧接着跟技术负责人聊。\n**笔试和面试题**\n\n1. mybatis分页实现。\n\n   这个我之前在恒生的时候已经看过mybatis分页的源代码。这一块主要是通过分页插件拦截器实现的。\n\n2. springaop原理。\n\n   这个问题我在上面遇到过。\n\n3. 对spring mvc和severlet的了解。\n\n   关于spring mvc这一块的东西在面试中还是会经常遇到的。因为我之前一直是做后台的开发，所以对前台mvc的东西了解的不多。去找工作面试的话，还是应该要全面一点，至少要了解一些常用的东西。要做到你知道这是一个什么东西，即使你不精通，但是哪怕你写过一个简单的demo。也比直接说，我不知道要强。\n\n4. 单例模式手写。\n\n   嘉联支付的笔试要求手写出单例模式。当时我并没有完整的写出来。程序里面忘了加static关键字。\n\n5. zk分布式锁的实现。\n\n6. sql去重有哪些方法。\n\n## 软通动力\n**面试流程**\n软通动力的面试也是先笔试再面试的形式。但是软通动力的面试官真的很不专业。所以不建议大家以后去这种，外包公司去面试，其实对于你刷面试经验并没有太大的帮助。因为你极有可能碰到的是一个非常不靠谱的面试官，他不懂得怎么面试。\n\n**笔试和面试题** \n\n1. 说一下nginx如何部署。\n\n   这个我不会，没答上来。\n\n2. 为什么选用mongodb。\n\n   这个问题我当时直接说了一下mangodb，它解决了我们哪些业务场景的问题\n\n3. 查看数据库表用户命令。\n\n   这个问题我也没有答上来。\n\n4. 说一下spring MVC\n\n5. 说一下serverlet\n\n6. 说一下java这门语言\n\n   当面试官问出这些问题的时候，我其实是比较反感的。首先，面试一定是面试者和公司双方之间的交流。并不是单纯的面试官问面试者问题。所以，对于面试者来说，在一场面试中，他需要从面试官那里充分了解这个公司。所以经常有一些面试官会问，你有些什么想要从我这里获知的。对于面试官来说，他想要知道的是，面试者是否达到了自己这个岗位的要求。\n\n   因此当面试官问我怎么看java这门语言的时候。我觉得这种问题除了让面试官秀自己的优越感以外，其他毫无意义。即使我这个问题回答的再好，也并不能体现我开发技能有多好，最多只能体现出我对java这门语言的理解水平。\n\n\n7. 说一下java并发和多线程。\n\n   在回答这一题的时候，我直接说出了一种最简单的实现方式。后来我反思了一下，觉得我说得并不好，因为其实面试官肯定知道这种简单的东西，他希望的是你要答出他的痛点。你需要讲出多线程并发编程的时候，哪些需要注意的事项。这个也是我后来跟一个猎头朋友，还有一个技术负责人聊天的时候，他们给我的一点提示，对我的帮助还是很大的。\n\n**关于软通动力面试后的总结**\n在经过了软通动力的面试之后，我自己反思了一下在这场面试中有哪些不足的地方？最后我得到的收获是，第一点对于自己原本就，不是太有兴趣的公司，应该直接不去面试，否则其实是浪费自己的时间。本来我是想通过面试来刷一下自己的面试经验。但是后来我发现，会经常碰到一些不太靠谱的面试官。就像软通动力的这个面试官一样，甚至我答完了面试官的问题之后，我还没有来得及问他一些关于公司的事情，他就直接让我在那里等结果。结果等了一个小时也没有结果。非常不尊重面试者。所以从那之后，任何外包公司的面试我一律不去。\n第二点是，我没有回答好面试官的说一下XXX系列问题，其实这种问题很难回答，你可以往简单的说，也可以往复杂了说。而且因为这个问题不具体，你不知道面试官的痛点在哪里，很难把这个问题回答的很好。有水平的面试官，他会根据你说出的答案，不断的进行深挖。这样才能体现出你对一个技术点，了解的深度。然而在像软通动力这种外包公司里他们并不注重技术，所以他们的面试官，也不太会注重深挖你的技术。这也是我不建议大家去外包公司面试的原因。因为你有很大的概率会遇到这种麻瓜面试官。\n\n## 赢时胜\n**面试流程**\n赢时胜的面试流程也是先笔试再面试。\n**面试过程**\n面试官没有问太多技术性的问题，主要是针对笔试题问了些简单的问题，大多数时间聊的还是业务上的事情。因为我之前做的是银行的开发，刚好跟他们的一个现有的项目对口。所以后来赢时胜还是给我发了offer。但是这些大公司都会压你的工资。他们根据工作经验划分出不同的薪资水平，然后根据面试者的面试情况，压低面试者的薪资。他们的这种做法让我觉得很不喜欢，所以虽然后来拿了offer，但是也不是我期望的薪资，当时作为一个保底就先接受了。\n这里也说一下关于，期望薪资的问题。我之前刷面试经验的时候会去面很多做外包的小公司，然后这些公司出于人力成本的考虑，本来就不会给岗位开出很高的薪资，但是他们会在，招聘信息上把薪资上限的很高。比如三年工作经验以内，给的薪资水平是9k到18k这种。其实他们真正能跟岗位开出的工资也就是9k左右，即使你面试的情况再好，也不可能到18k。当我带着13k期望薪资去面试他们这种岗位的时候，面试官看到你的期望薪资，其实就已经觉得你不太合适了。然后如果他们觉得你的面试情况好的话，肯定会压低你的薪资。\n\n## 木槿科技\n\n**面试流程**\n木槿科技的面试时先HR面，人力会跟你大体上聊一些离职原因，之前负责的工作，期望薪资这些。然后是技术负责人面试，他们没有笔试环节。\n**面试题**\n\n1. 你对ORM的了解\n\n   这里就再次丢脸了，没答出来\n\n2. zk如何实现分布式锁\n\n   这个问题也是之前遇到过的\n\n3. 简述Jdbc的编程过程\n\n   这个我之前一直没有自己写过，都是通过使用Mybatis框架来做的这个事情。\n\n4. Redis的几种数据结构\n\n5. Hash型数据存储的基本使用命令\n\n   这个我之前看过这些简单的命令，但是当时忘了也没答上来。\n\n**木槿科技面试总结**\n\n在面试木槿的时候遇到过几次很基础，很简单的问题没有答出来。而在这之前我准备的面试方向都是Java基础比较深入的应用。面试了这几家公司发现他们大多数其实问的内容都很简单，根本不会涉及到很深的原理性问题，也不会深挖技术细节。而很多很简单的概念其实我不是很清楚，之前也没关注过这些，所以导致了我很受挫，在面试的时候这种问题答不出来显得很业余。\n\n## 华锐金融\n**面试流程**\n华锐的面试也是采用先笔试后面试的方式进行\n**面试和笔试题**\n\n1. 一个文件里面包含很多个乱序不重复的电话号码，需要在20兆内存的空间内，将这些电话号码进行排序，并重新输出到另一个文件内。\n\n   这一题我没有做出来。\n\n2. java内存模型中，堆内存和栈内存的区别。\n\n3. 垃圾回收算法\n\n4. 如何复制一个对内存中的对象？\n\n**华锐面试的总结**\n其实一开始我笔试题做得并不好，技术面之后，我一度以为自己已经挂了。没想到后来人力资源，和面试官一起讨论了一下，觉得我还可以。紧接着后来就是人力资源给我介绍一下这家公司详细情况。介绍完之后，立马就进行了ceo面。跟ceo聊的很好，然后也了解了这个公司的团队情况，觉得非常厉害，也是我期望的那种工作团队。从面试体验也可以看出来，整个公司团队的，效率和执行力是非常高的。CEO非常尊重工程师，面试结束之后，亲自把我送到了电梯门口。面试是当天上午十点开始的，等结束的时候，快下午1点了。后来我回到家里，下午两三点的时候，人力给我发来录用通知，开出的薪资条件，远远超过了我的期望。可以看出来他们非常的有诚意，也非常尊重工程师文化。通过华锐的面试，给我的感觉是，运气也非常的重要。所以在找工作面试的时候，不要因为，有几家面试失败了，就轻易的看低自己，一定要坚持下去，尽量去一家你想去的公司。如果这家公司从一开始就压榨你的薪资的话，也不用指望你入职之后能有多大的改善","slug":"关于第一次换工作的面试经验","published":1,"date":"2018-08-01T16:05:19.168Z","updated":"2018-05-27T11:22:33.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbcbg83000fv8w0mfy899w0","content":"<p>因为一直想去南方的城市。所以我决定离开恒生去深圳发展，于是在2018年3月份的时候开始计划准备离职，那时候我还在北京。当时已经跟我的主管老大提出离职的意向。离职的流程大概要走一个月左右，在这一个月的时间内，我开始准备一些面试的东西，主要还是java基础这一块。所以从那个时候起，我开始写一些笔记，然后参加一些面试，主要是想通过这种方式，来增加自己的面试经验,了解自己有哪些不足的地方。然后当时恒生也在招人，所以就跟着几个老同事一起面了几个开发。在这里记录一下，我从2018年4月份至2018年5月份，这一个多月的时间里，参加过的所有面试经历，还有碰到的一些的面试题以及我个人对面试这件事情的看法和总结。</p>\n<a id=\"more\"></a>\n<h2 id=\"先锋支付\"><a href=\"#先锋支付\" class=\"headerlink\" title=\"先锋支付\"></a>先锋支付</h2><p><strong>面试流程</strong><br>先锋支付的面试流程是先参加笔试，笔试之后紧接着参加面试。这也是大多数公司都会采用的一种面试流程。当然也有很多公司追求效率直接让你参加面试。<br><strong>笔试和面试题</strong></p>\n<ol>\n<li><p>内连接，左连接，全连接之间的区别。</p>\n</li>\n<li><p>chmod 给文件授权和find命令的使用</p>\n</li>\n<li><p>如何在数据库每一秒钟都有数据写入的时候进行拆表。</p>\n</li>\n<li><p>spring scope？</p>\n<p>这个问题经常遇到，我在目前工作的这家公司笔试的时候也遇到过。</p>\n</li>\n<li><p>spring动态代理 实现方式和配置</p>\n</li>\n<li><p>java的几种加密方式</p>\n</li>\n<li><p>定时任务的实现方式</p>\n</li>\n<li><p>final,finally,finalize这三者之间的区别。</p>\n</li>\n<li><p>策略模式，命令模式与模板模式之间的区别。</p>\n</li>\n</ol>\n<h2 id=\"灵狮区块链\"><a href=\"#灵狮区块链\" class=\"headerlink\" title=\"灵狮区块链\"></a>灵狮区块链</h2><p><strong>面试流程</strong><br>这家公司是约的电话面试。面试官人很好，面试问到的内容，基本上都是关于java基础然后跟面试官聊的也比较久，双方对彼此都有一个比较好的了解。<br><strong>面试题</strong></p>\n<ol>\n<li><p>java内存模型，堆内存和栈内存的区别。</p>\n</li>\n<li><p>spring aop使用了什么设计模式? 关于spring aop的考察也是会经常遇到的问题。主要需要了解的就是spring aop的实现方式，它是通过动态代理实现的，然后面试官又会扩展的问道，动态代理有几种实现方式？</p>\n</li>\n<li><p>socket网络编程</p>\n</li>\n<li><p>如何实现线程之间的通信。</p>\n<p>这里主要是看一下juc包的源码</p>\n</li>\n<li><p>hashmap的数据结构，以及实现方式。</p>\n<p>关于这一块，我有写过它的源码分析文章。</p>\n</li>\n<li><p>mongodb与传统数据库有什么区别？</p>\n<p>以及mangodb常用的命令这个问题我也遇到过很多次其实问的都不难，是一些比较基础的东西。</p>\n</li>\n<li><p>关于jpa的了解。</p>\n<p>其实这里暴露了我的一个问题。我当时不知道jpa是啥。包括在后来的面试中，一个面试官问我关于orm的理解。其实我也不太清楚，orm是什么东西。所以在面试的时候，关于这些特别基础的常识性的东西，还是需要了解清楚。否则答不上来的话，会让人觉得你比较业余。而我当时，只顾着复习java基础的东西，关于框架这一块学习的不多。之前在公司，都是使用现成的框架，也没有去折腾过jpa，orm</p>\n</li>\n<li><p>查询sql语句优化。关于sq优化的问题我在很多面试中都遇到过。  </p>\n</li>\n<li><p>左连接，右连接，与内连接之间的区别？</p>\n<p>这个问题我在之前的面试中就已经遇到过。</p>\n</li>\n<li><p>平时喜欢钻研的技术？</p>\n<p>这个问题其实在很多公司面试的时候都会问到。很多面试官其实就是项目组的技术负责人，然后他们会考察你作为一个开发人员对于技术的热情。所以这个时候，如果你有写过一些，技术博客，或者看过一些源码，或者直接把github账号展现给面试官看的话，会是一个优势。</p>\n</li>\n</ol>\n<h2 id=\"嘉联支付\"><a href=\"#嘉联支付\" class=\"headerlink\" title=\"嘉联支付\"></a>嘉联支付</h2><p><strong>面试流程</strong><br>嘉联支付的面试流程是先笔试，然后紧接着跟技术负责人聊。<br><strong>笔试和面试题</strong></p>\n<ol>\n<li><p>mybatis分页实现。</p>\n<p>这个我之前在恒生的时候已经看过mybatis分页的源代码。这一块主要是通过分页插件拦截器实现的。</p>\n</li>\n<li><p>springaop原理。</p>\n<p>这个问题我在上面遇到过。</p>\n</li>\n<li><p>对spring mvc和severlet的了解。</p>\n<p>关于spring mvc这一块的东西在面试中还是会经常遇到的。因为我之前一直是做后台的开发，所以对前台mvc的东西了解的不多。去找工作面试的话，还是应该要全面一点，至少要了解一些常用的东西。要做到你知道这是一个什么东西，即使你不精通，但是哪怕你写过一个简单的demo。也比直接说，我不知道要强。</p>\n</li>\n<li><p>单例模式手写。</p>\n<p>嘉联支付的笔试要求手写出单例模式。当时我并没有完整的写出来。程序里面忘了加static关键字。</p>\n</li>\n<li><p>zk分布式锁的实现。</p>\n</li>\n<li><p>sql去重有哪些方法。</p>\n</li>\n</ol>\n<h2 id=\"软通动力\"><a href=\"#软通动力\" class=\"headerlink\" title=\"软通动力\"></a>软通动力</h2><p><strong>面试流程</strong><br>软通动力的面试也是先笔试再面试的形式。但是软通动力的面试官真的很不专业。所以不建议大家以后去这种，外包公司去面试，其实对于你刷面试经验并没有太大的帮助。因为你极有可能碰到的是一个非常不靠谱的面试官，他不懂得怎么面试。</p>\n<p><strong>笔试和面试题</strong> </p>\n<ol>\n<li><p>说一下nginx如何部署。</p>\n<p>这个我不会，没答上来。</p>\n</li>\n<li><p>为什么选用mongodb。</p>\n<p>这个问题我当时直接说了一下mangodb，它解决了我们哪些业务场景的问题</p>\n</li>\n<li><p>查看数据库表用户命令。</p>\n<p>这个问题我也没有答上来。</p>\n</li>\n<li><p>说一下spring MVC</p>\n</li>\n<li><p>说一下serverlet</p>\n</li>\n<li><p>说一下java这门语言</p>\n<p>当面试官问出这些问题的时候，我其实是比较反感的。首先，面试一定是面试者和公司双方之间的交流。并不是单纯的面试官问面试者问题。所以，对于面试者来说，在一场面试中，他需要从面试官那里充分了解这个公司。所以经常有一些面试官会问，你有些什么想要从我这里获知的。对于面试官来说，他想要知道的是，面试者是否达到了自己这个岗位的要求。</p>\n<p>因此当面试官问我怎么看java这门语言的时候。我觉得这种问题除了让面试官秀自己的优越感以外，其他毫无意义。即使我这个问题回答的再好，也并不能体现我开发技能有多好，最多只能体现出我对java这门语言的理解水平。</p>\n</li>\n</ol>\n<ol start=\"7\">\n<li><p>说一下java并发和多线程。</p>\n<p>在回答这一题的时候，我直接说出了一种最简单的实现方式。后来我反思了一下，觉得我说得并不好，因为其实面试官肯定知道这种简单的东西，他希望的是你要答出他的痛点。你需要讲出多线程并发编程的时候，哪些需要注意的事项。这个也是我后来跟一个猎头朋友，还有一个技术负责人聊天的时候，他们给我的一点提示，对我的帮助还是很大的。</p>\n</li>\n</ol>\n<p><strong>关于软通动力面试后的总结</strong><br>在经过了软通动力的面试之后，我自己反思了一下在这场面试中有哪些不足的地方？最后我得到的收获是，第一点对于自己原本就，不是太有兴趣的公司，应该直接不去面试，否则其实是浪费自己的时间。本来我是想通过面试来刷一下自己的面试经验。但是后来我发现，会经常碰到一些不太靠谱的面试官。就像软通动力的这个面试官一样，甚至我答完了面试官的问题之后，我还没有来得及问他一些关于公司的事情，他就直接让我在那里等结果。结果等了一个小时也没有结果。非常不尊重面试者。所以从那之后，任何外包公司的面试我一律不去。<br>第二点是，我没有回答好面试官的说一下XXX系列问题，其实这种问题很难回答，你可以往简单的说，也可以往复杂了说。而且因为这个问题不具体，你不知道面试官的痛点在哪里，很难把这个问题回答的很好。有水平的面试官，他会根据你说出的答案，不断的进行深挖。这样才能体现出你对一个技术点，了解的深度。然而在像软通动力这种外包公司里他们并不注重技术，所以他们的面试官，也不太会注重深挖你的技术。这也是我不建议大家去外包公司面试的原因。因为你有很大的概率会遇到这种麻瓜面试官。</p>\n<h2 id=\"赢时胜\"><a href=\"#赢时胜\" class=\"headerlink\" title=\"赢时胜\"></a>赢时胜</h2><p><strong>面试流程</strong><br>赢时胜的面试流程也是先笔试再面试。<br><strong>面试过程</strong><br>面试官没有问太多技术性的问题，主要是针对笔试题问了些简单的问题，大多数时间聊的还是业务上的事情。因为我之前做的是银行的开发，刚好跟他们的一个现有的项目对口。所以后来赢时胜还是给我发了offer。但是这些大公司都会压你的工资。他们根据工作经验划分出不同的薪资水平，然后根据面试者的面试情况，压低面试者的薪资。他们的这种做法让我觉得很不喜欢，所以虽然后来拿了offer，但是也不是我期望的薪资，当时作为一个保底就先接受了。<br>这里也说一下关于，期望薪资的问题。我之前刷面试经验的时候会去面很多做外包的小公司，然后这些公司出于人力成本的考虑，本来就不会给岗位开出很高的薪资，但是他们会在，招聘信息上把薪资上限的很高。比如三年工作经验以内，给的薪资水平是9k到18k这种。其实他们真正能跟岗位开出的工资也就是9k左右，即使你面试的情况再好，也不可能到18k。当我带着13k期望薪资去面试他们这种岗位的时候，面试官看到你的期望薪资，其实就已经觉得你不太合适了。然后如果他们觉得你的面试情况好的话，肯定会压低你的薪资。</p>\n<h2 id=\"木槿科技\"><a href=\"#木槿科技\" class=\"headerlink\" title=\"木槿科技\"></a>木槿科技</h2><p><strong>面试流程</strong><br>木槿科技的面试时先HR面，人力会跟你大体上聊一些离职原因，之前负责的工作，期望薪资这些。然后是技术负责人面试，他们没有笔试环节。<br><strong>面试题</strong></p>\n<ol>\n<li><p>你对ORM的了解</p>\n<p>这里就再次丢脸了，没答出来</p>\n</li>\n<li><p>zk如何实现分布式锁</p>\n<p>这个问题也是之前遇到过的</p>\n</li>\n<li><p>简述Jdbc的编程过程</p>\n<p>这个我之前一直没有自己写过，都是通过使用Mybatis框架来做的这个事情。</p>\n</li>\n<li><p>Redis的几种数据结构</p>\n</li>\n<li><p>Hash型数据存储的基本使用命令</p>\n<p>这个我之前看过这些简单的命令，但是当时忘了也没答上来。</p>\n</li>\n</ol>\n<p><strong>木槿科技面试总结</strong></p>\n<p>在面试木槿的时候遇到过几次很基础，很简单的问题没有答出来。而在这之前我准备的面试方向都是Java基础比较深入的应用。面试了这几家公司发现他们大多数其实问的内容都很简单，根本不会涉及到很深的原理性问题，也不会深挖技术细节。而很多很简单的概念其实我不是很清楚，之前也没关注过这些，所以导致了我很受挫，在面试的时候这种问题答不出来显得很业余。</p>\n<h2 id=\"华锐金融\"><a href=\"#华锐金融\" class=\"headerlink\" title=\"华锐金融\"></a>华锐金融</h2><p><strong>面试流程</strong><br>华锐的面试也是采用先笔试后面试的方式进行<br><strong>面试和笔试题</strong></p>\n<ol>\n<li><p>一个文件里面包含很多个乱序不重复的电话号码，需要在20兆内存的空间内，将这些电话号码进行排序，并重新输出到另一个文件内。</p>\n<p>这一题我没有做出来。</p>\n</li>\n<li><p>java内存模型中，堆内存和栈内存的区别。</p>\n</li>\n<li><p>垃圾回收算法</p>\n</li>\n<li><p>如何复制一个对内存中的对象？</p>\n</li>\n</ol>\n<p><strong>华锐面试的总结</strong><br>其实一开始我笔试题做得并不好，技术面之后，我一度以为自己已经挂了。没想到后来人力资源，和面试官一起讨论了一下，觉得我还可以。紧接着后来就是人力资源给我介绍一下这家公司详细情况。介绍完之后，立马就进行了ceo面。跟ceo聊的很好，然后也了解了这个公司的团队情况，觉得非常厉害，也是我期望的那种工作团队。从面试体验也可以看出来，整个公司团队的，效率和执行力是非常高的。CEO非常尊重工程师，面试结束之后，亲自把我送到了电梯门口。面试是当天上午十点开始的，等结束的时候，快下午1点了。后来我回到家里，下午两三点的时候，人力给我发来录用通知，开出的薪资条件，远远超过了我的期望。可以看出来他们非常的有诚意，也非常尊重工程师文化。通过华锐的面试，给我的感觉是，运气也非常的重要。所以在找工作面试的时候，不要因为，有几家面试失败了，就轻易的看低自己，一定要坚持下去，尽量去一家你想去的公司。如果这家公司从一开始就压榨你的薪资的话，也不用指望你入职之后能有多大的改善</p>\n","site":{"data":{}},"excerpt":"<p>因为一直想去南方的城市。所以我决定离开恒生去深圳发展，于是在2018年3月份的时候开始计划准备离职，那时候我还在北京。当时已经跟我的主管老大提出离职的意向。离职的流程大概要走一个月左右，在这一个月的时间内，我开始准备一些面试的东西，主要还是java基础这一块。所以从那个时候起，我开始写一些笔记，然后参加一些面试，主要是想通过这种方式，来增加自己的面试经验,了解自己有哪些不足的地方。然后当时恒生也在招人，所以就跟着几个老同事一起面了几个开发。在这里记录一下，我从2018年4月份至2018年5月份，这一个多月的时间里，参加过的所有面试经历，还有碰到的一些的面试题以及我个人对面试这件事情的看法和总结。</p>","more":"<h2 id=\"先锋支付\"><a href=\"#先锋支付\" class=\"headerlink\" title=\"先锋支付\"></a>先锋支付</h2><p><strong>面试流程</strong><br>先锋支付的面试流程是先参加笔试，笔试之后紧接着参加面试。这也是大多数公司都会采用的一种面试流程。当然也有很多公司追求效率直接让你参加面试。<br><strong>笔试和面试题</strong></p>\n<ol>\n<li><p>内连接，左连接，全连接之间的区别。</p>\n</li>\n<li><p>chmod 给文件授权和find命令的使用</p>\n</li>\n<li><p>如何在数据库每一秒钟都有数据写入的时候进行拆表。</p>\n</li>\n<li><p>spring scope？</p>\n<p>这个问题经常遇到，我在目前工作的这家公司笔试的时候也遇到过。</p>\n</li>\n<li><p>spring动态代理 实现方式和配置</p>\n</li>\n<li><p>java的几种加密方式</p>\n</li>\n<li><p>定时任务的实现方式</p>\n</li>\n<li><p>final,finally,finalize这三者之间的区别。</p>\n</li>\n<li><p>策略模式，命令模式与模板模式之间的区别。</p>\n</li>\n</ol>\n<h2 id=\"灵狮区块链\"><a href=\"#灵狮区块链\" class=\"headerlink\" title=\"灵狮区块链\"></a>灵狮区块链</h2><p><strong>面试流程</strong><br>这家公司是约的电话面试。面试官人很好，面试问到的内容，基本上都是关于java基础然后跟面试官聊的也比较久，双方对彼此都有一个比较好的了解。<br><strong>面试题</strong></p>\n<ol>\n<li><p>java内存模型，堆内存和栈内存的区别。</p>\n</li>\n<li><p>spring aop使用了什么设计模式? 关于spring aop的考察也是会经常遇到的问题。主要需要了解的就是spring aop的实现方式，它是通过动态代理实现的，然后面试官又会扩展的问道，动态代理有几种实现方式？</p>\n</li>\n<li><p>socket网络编程</p>\n</li>\n<li><p>如何实现线程之间的通信。</p>\n<p>这里主要是看一下juc包的源码</p>\n</li>\n<li><p>hashmap的数据结构，以及实现方式。</p>\n<p>关于这一块，我有写过它的源码分析文章。</p>\n</li>\n<li><p>mongodb与传统数据库有什么区别？</p>\n<p>以及mangodb常用的命令这个问题我也遇到过很多次其实问的都不难，是一些比较基础的东西。</p>\n</li>\n<li><p>关于jpa的了解。</p>\n<p>其实这里暴露了我的一个问题。我当时不知道jpa是啥。包括在后来的面试中，一个面试官问我关于orm的理解。其实我也不太清楚，orm是什么东西。所以在面试的时候，关于这些特别基础的常识性的东西，还是需要了解清楚。否则答不上来的话，会让人觉得你比较业余。而我当时，只顾着复习java基础的东西，关于框架这一块学习的不多。之前在公司，都是使用现成的框架，也没有去折腾过jpa，orm</p>\n</li>\n<li><p>查询sql语句优化。关于sq优化的问题我在很多面试中都遇到过。  </p>\n</li>\n<li><p>左连接，右连接，与内连接之间的区别？</p>\n<p>这个问题我在之前的面试中就已经遇到过。</p>\n</li>\n<li><p>平时喜欢钻研的技术？</p>\n<p>这个问题其实在很多公司面试的时候都会问到。很多面试官其实就是项目组的技术负责人，然后他们会考察你作为一个开发人员对于技术的热情。所以这个时候，如果你有写过一些，技术博客，或者看过一些源码，或者直接把github账号展现给面试官看的话，会是一个优势。</p>\n</li>\n</ol>\n<h2 id=\"嘉联支付\"><a href=\"#嘉联支付\" class=\"headerlink\" title=\"嘉联支付\"></a>嘉联支付</h2><p><strong>面试流程</strong><br>嘉联支付的面试流程是先笔试，然后紧接着跟技术负责人聊。<br><strong>笔试和面试题</strong></p>\n<ol>\n<li><p>mybatis分页实现。</p>\n<p>这个我之前在恒生的时候已经看过mybatis分页的源代码。这一块主要是通过分页插件拦截器实现的。</p>\n</li>\n<li><p>springaop原理。</p>\n<p>这个问题我在上面遇到过。</p>\n</li>\n<li><p>对spring mvc和severlet的了解。</p>\n<p>关于spring mvc这一块的东西在面试中还是会经常遇到的。因为我之前一直是做后台的开发，所以对前台mvc的东西了解的不多。去找工作面试的话，还是应该要全面一点，至少要了解一些常用的东西。要做到你知道这是一个什么东西，即使你不精通，但是哪怕你写过一个简单的demo。也比直接说，我不知道要强。</p>\n</li>\n<li><p>单例模式手写。</p>\n<p>嘉联支付的笔试要求手写出单例模式。当时我并没有完整的写出来。程序里面忘了加static关键字。</p>\n</li>\n<li><p>zk分布式锁的实现。</p>\n</li>\n<li><p>sql去重有哪些方法。</p>\n</li>\n</ol>\n<h2 id=\"软通动力\"><a href=\"#软通动力\" class=\"headerlink\" title=\"软通动力\"></a>软通动力</h2><p><strong>面试流程</strong><br>软通动力的面试也是先笔试再面试的形式。但是软通动力的面试官真的很不专业。所以不建议大家以后去这种，外包公司去面试，其实对于你刷面试经验并没有太大的帮助。因为你极有可能碰到的是一个非常不靠谱的面试官，他不懂得怎么面试。</p>\n<p><strong>笔试和面试题</strong> </p>\n<ol>\n<li><p>说一下nginx如何部署。</p>\n<p>这个我不会，没答上来。</p>\n</li>\n<li><p>为什么选用mongodb。</p>\n<p>这个问题我当时直接说了一下mangodb，它解决了我们哪些业务场景的问题</p>\n</li>\n<li><p>查看数据库表用户命令。</p>\n<p>这个问题我也没有答上来。</p>\n</li>\n<li><p>说一下spring MVC</p>\n</li>\n<li><p>说一下serverlet</p>\n</li>\n<li><p>说一下java这门语言</p>\n<p>当面试官问出这些问题的时候，我其实是比较反感的。首先，面试一定是面试者和公司双方之间的交流。并不是单纯的面试官问面试者问题。所以，对于面试者来说，在一场面试中，他需要从面试官那里充分了解这个公司。所以经常有一些面试官会问，你有些什么想要从我这里获知的。对于面试官来说，他想要知道的是，面试者是否达到了自己这个岗位的要求。</p>\n<p>因此当面试官问我怎么看java这门语言的时候。我觉得这种问题除了让面试官秀自己的优越感以外，其他毫无意义。即使我这个问题回答的再好，也并不能体现我开发技能有多好，最多只能体现出我对java这门语言的理解水平。</p>\n</li>\n</ol>\n<ol start=\"7\">\n<li><p>说一下java并发和多线程。</p>\n<p>在回答这一题的时候，我直接说出了一种最简单的实现方式。后来我反思了一下，觉得我说得并不好，因为其实面试官肯定知道这种简单的东西，他希望的是你要答出他的痛点。你需要讲出多线程并发编程的时候，哪些需要注意的事项。这个也是我后来跟一个猎头朋友，还有一个技术负责人聊天的时候，他们给我的一点提示，对我的帮助还是很大的。</p>\n</li>\n</ol>\n<p><strong>关于软通动力面试后的总结</strong><br>在经过了软通动力的面试之后，我自己反思了一下在这场面试中有哪些不足的地方？最后我得到的收获是，第一点对于自己原本就，不是太有兴趣的公司，应该直接不去面试，否则其实是浪费自己的时间。本来我是想通过面试来刷一下自己的面试经验。但是后来我发现，会经常碰到一些不太靠谱的面试官。就像软通动力的这个面试官一样，甚至我答完了面试官的问题之后，我还没有来得及问他一些关于公司的事情，他就直接让我在那里等结果。结果等了一个小时也没有结果。非常不尊重面试者。所以从那之后，任何外包公司的面试我一律不去。<br>第二点是，我没有回答好面试官的说一下XXX系列问题，其实这种问题很难回答，你可以往简单的说，也可以往复杂了说。而且因为这个问题不具体，你不知道面试官的痛点在哪里，很难把这个问题回答的很好。有水平的面试官，他会根据你说出的答案，不断的进行深挖。这样才能体现出你对一个技术点，了解的深度。然而在像软通动力这种外包公司里他们并不注重技术，所以他们的面试官，也不太会注重深挖你的技术。这也是我不建议大家去外包公司面试的原因。因为你有很大的概率会遇到这种麻瓜面试官。</p>\n<h2 id=\"赢时胜\"><a href=\"#赢时胜\" class=\"headerlink\" title=\"赢时胜\"></a>赢时胜</h2><p><strong>面试流程</strong><br>赢时胜的面试流程也是先笔试再面试。<br><strong>面试过程</strong><br>面试官没有问太多技术性的问题，主要是针对笔试题问了些简单的问题，大多数时间聊的还是业务上的事情。因为我之前做的是银行的开发，刚好跟他们的一个现有的项目对口。所以后来赢时胜还是给我发了offer。但是这些大公司都会压你的工资。他们根据工作经验划分出不同的薪资水平，然后根据面试者的面试情况，压低面试者的薪资。他们的这种做法让我觉得很不喜欢，所以虽然后来拿了offer，但是也不是我期望的薪资，当时作为一个保底就先接受了。<br>这里也说一下关于，期望薪资的问题。我之前刷面试经验的时候会去面很多做外包的小公司，然后这些公司出于人力成本的考虑，本来就不会给岗位开出很高的薪资，但是他们会在，招聘信息上把薪资上限的很高。比如三年工作经验以内，给的薪资水平是9k到18k这种。其实他们真正能跟岗位开出的工资也就是9k左右，即使你面试的情况再好，也不可能到18k。当我带着13k期望薪资去面试他们这种岗位的时候，面试官看到你的期望薪资，其实就已经觉得你不太合适了。然后如果他们觉得你的面试情况好的话，肯定会压低你的薪资。</p>\n<h2 id=\"木槿科技\"><a href=\"#木槿科技\" class=\"headerlink\" title=\"木槿科技\"></a>木槿科技</h2><p><strong>面试流程</strong><br>木槿科技的面试时先HR面，人力会跟你大体上聊一些离职原因，之前负责的工作，期望薪资这些。然后是技术负责人面试，他们没有笔试环节。<br><strong>面试题</strong></p>\n<ol>\n<li><p>你对ORM的了解</p>\n<p>这里就再次丢脸了，没答出来</p>\n</li>\n<li><p>zk如何实现分布式锁</p>\n<p>这个问题也是之前遇到过的</p>\n</li>\n<li><p>简述Jdbc的编程过程</p>\n<p>这个我之前一直没有自己写过，都是通过使用Mybatis框架来做的这个事情。</p>\n</li>\n<li><p>Redis的几种数据结构</p>\n</li>\n<li><p>Hash型数据存储的基本使用命令</p>\n<p>这个我之前看过这些简单的命令，但是当时忘了也没答上来。</p>\n</li>\n</ol>\n<p><strong>木槿科技面试总结</strong></p>\n<p>在面试木槿的时候遇到过几次很基础，很简单的问题没有答出来。而在这之前我准备的面试方向都是Java基础比较深入的应用。面试了这几家公司发现他们大多数其实问的内容都很简单，根本不会涉及到很深的原理性问题，也不会深挖技术细节。而很多很简单的概念其实我不是很清楚，之前也没关注过这些，所以导致了我很受挫，在面试的时候这种问题答不出来显得很业余。</p>\n<h2 id=\"华锐金融\"><a href=\"#华锐金融\" class=\"headerlink\" title=\"华锐金融\"></a>华锐金融</h2><p><strong>面试流程</strong><br>华锐的面试也是采用先笔试后面试的方式进行<br><strong>面试和笔试题</strong></p>\n<ol>\n<li><p>一个文件里面包含很多个乱序不重复的电话号码，需要在20兆内存的空间内，将这些电话号码进行排序，并重新输出到另一个文件内。</p>\n<p>这一题我没有做出来。</p>\n</li>\n<li><p>java内存模型中，堆内存和栈内存的区别。</p>\n</li>\n<li><p>垃圾回收算法</p>\n</li>\n<li><p>如何复制一个对内存中的对象？</p>\n</li>\n</ol>\n<p><strong>华锐面试的总结</strong><br>其实一开始我笔试题做得并不好，技术面之后，我一度以为自己已经挂了。没想到后来人力资源，和面试官一起讨论了一下，觉得我还可以。紧接着后来就是人力资源给我介绍一下这家公司详细情况。介绍完之后，立马就进行了ceo面。跟ceo聊的很好，然后也了解了这个公司的团队情况，觉得非常厉害，也是我期望的那种工作团队。从面试体验也可以看出来，整个公司团队的，效率和执行力是非常高的。CEO非常尊重工程师，面试结束之后，亲自把我送到了电梯门口。面试是当天上午十点开始的，等结束的时候，快下午1点了。后来我回到家里，下午两三点的时候，人力给我发来录用通知，开出的薪资条件，远远超过了我的期望。可以看出来他们非常的有诚意，也非常尊重工程师文化。通过华锐的面试，给我的感觉是，运气也非常的重要。所以在找工作面试的时候，不要因为，有几家面试失败了，就轻易的看低自己，一定要坚持下去，尽量去一家你想去的公司。如果这家公司从一开始就压榨你的薪资的话，也不用指望你入职之后能有多大的改善</p>"},{"title":"老无所依","date":"2018-05-27T11:40:59.000Z","_content":"\n天一给我推荐的科恩兄弟系列，反派发型很萌，又很聪明，演员是西班牙人，叫哈维尔巴登。把反派演的很有魅力，天一称之为影史上最难忘的反派之一，其实在我心里最好的反派依旧是小丑。\n\n![海报看起来有点恐怖，但其实跟恐怖惊悚都没关系，你看我都敢看~](老无所依\\p551171670.jpg)\n\n<!--more-->\n\n![](老无所依\\p1196957913.jpg)\n\n一直没看懂为什么片名叫老无所依，但是很喜欢这张海报\n\n\n\n![](老无所依\\p1303044912.jpg)\n\n\n\n向来很喜欢红色，这张海报简直大爱\n\n![](老无所依\\p1424911515.jpg)\n\n\n\n看完电影你就知道为什么我要放这张图了，设计的很棒\n\n\n\n","source":"_posts/老无所依.md","raw":"---\ntitle: 老无所依\ndate: 2018-05-27 19:40:59\ncategories: \"电影\"\ntags: \"科恩兄弟\"\n---\n\n天一给我推荐的科恩兄弟系列，反派发型很萌，又很聪明，演员是西班牙人，叫哈维尔巴登。把反派演的很有魅力，天一称之为影史上最难忘的反派之一，其实在我心里最好的反派依旧是小丑。\n\n![海报看起来有点恐怖，但其实跟恐怖惊悚都没关系，你看我都敢看~](老无所依\\p551171670.jpg)\n\n<!--more-->\n\n![](老无所依\\p1196957913.jpg)\n\n一直没看懂为什么片名叫老无所依，但是很喜欢这张海报\n\n\n\n![](老无所依\\p1303044912.jpg)\n\n\n\n向来很喜欢红色，这张海报简直大爱\n\n![](老无所依\\p1424911515.jpg)\n\n\n\n看完电影你就知道为什么我要放这张图了，设计的很棒\n\n\n\n","slug":"老无所依","published":1,"updated":"2018-06-10T12:01:31.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbcbg8j000kv8w018dbfxbp","content":"<p>天一给我推荐的科恩兄弟系列，反派发型很萌，又很聪明，演员是西班牙人，叫哈维尔巴登。把反派演的很有魅力，天一称之为影史上最难忘的反派之一，其实在我心里最好的反派依旧是小丑。</p>\n<p><img src=\"/2018/05/27/老无所依/p551171670.jpg\" alt=\"海报看起来有点恐怖，但其实跟恐怖惊悚都没关系，你看我都敢看~\"></p>\n<a id=\"more\"></a>\n<p><img src=\"/2018/05/27/老无所依/p1196957913.jpg\" alt=\"\"></p>\n<p>一直没看懂为什么片名叫老无所依，但是很喜欢这张海报</p>\n<p><img src=\"/2018/05/27/老无所依/p1303044912.jpg\" alt=\"\"></p>\n<p>向来很喜欢红色，这张海报简直大爱</p>\n<p><img src=\"/2018/05/27/老无所依/p1424911515.jpg\" alt=\"\"></p>\n<p>看完电影你就知道为什么我要放这张图了，设计的很棒</p>\n","site":{"data":{}},"excerpt":"<p>天一给我推荐的科恩兄弟系列，反派发型很萌，又很聪明，演员是西班牙人，叫哈维尔巴登。把反派演的很有魅力，天一称之为影史上最难忘的反派之一，其实在我心里最好的反派依旧是小丑。</p>\n<p><img src=\"/2018/05/27/老无所依/p551171670.jpg\" alt=\"海报看起来有点恐怖，但其实跟恐怖惊悚都没关系，你看我都敢看~\"></p>","more":"<p><img src=\"/2018/05/27/老无所依/p1196957913.jpg\" alt=\"\"></p>\n<p>一直没看懂为什么片名叫老无所依，但是很喜欢这张海报</p>\n<p><img src=\"/2018/05/27/老无所依/p1303044912.jpg\" alt=\"\"></p>\n<p>向来很喜欢红色，这张海报简直大爱</p>\n<p><img src=\"/2018/05/27/老无所依/p1424911515.jpg\" alt=\"\"></p>\n<p>看完电影你就知道为什么我要放这张图了，设计的很棒</p>"},{"title":"自私的基因","date":"2018-07-30T15:13:40.000Z","_content":"\n\n\n![](自私的基因/s11214645.jpg)\n\n\n\n这本书开始的时候，作者提出了达尔文进化论的物竞天择，适者生存中的“适者”到底是什么？是种群，个体，还是物种？都不是，在作者看来，基因是自然选择的单位。而所有的动物，植物，个体，都是基因控制的生存机器而已。基因的目的只有一个，那就是复制自己。所以，从这个角度出发，就有了这本书的名称——自私的基因。\n\n<!--more-->\n\n基因的目的是为了让自己复制下去。所以他们选择了各种各样的策略，让自己尽可能的复制下去。那些会控制蛋白质给自己制造生存机器的基因则更大概率能在自然选择的情况下生存下去。所以自然选择使得制造生存机器的基因可以不断地复制，生存下来。于是，基因通过控制蛋白质合成的方式，来控制着生存机器。而基因无法知道，动物会在生存过程中遇到什么样的情况。所以它们会给这些动物，预先制定好策略。比如它们不知道北极熊出生后，会面临哪些遭遇。但是基因会给北极熊准备好厚厚的毛发，来帮助他们御寒。这就是基因的预测行为，它其实就像程序员写的代码一样。只是指定了固定模式下的蛋白质合成方式，而不去关心实际代码所处理的数据。\n\n作者在这本书中又提到了进化稳定性策略（ESS），这种策略是一种自然选择上稳定性的策略，一旦一种稳定性策略确立起来之后，任何偏离这种策略的行为都会受到自然选择的惩罚。而这种策略的稳定性，并不在于它有利于这个群体中的个体，而是因为它的内部没有背叛行为。一个生物种群理论上可以达到多种稳定性策略，但是最终会以一种稳定性策略方式生存下去，这将取决于他们优先达到了哪一种稳定性策略。从基因的角度来说，基因库是由一组进化上稳定的基因形成的，这组基因成为一个不受任何新基因侵犯的基因库。而大部分因为基因突变、重新组合而产生的新基因，将会偏离这种稳定性策略，必然会受到自然选择的惩罚。但是新基因侵入一组稳定性基因库，偶尔也会获得成功。一旦成功，就会立马在基因库中散布开来，最终形成一组新的稳定性策略。按照这种进犯策略类推，一个种群可以从一个稳定性进化策略跳向另外一个稳定性进化策略。这就是进化的过程。\n\n把个体动物视为独立的生存机器，便于理解进犯行为。但是如果有关个体是近亲的话，这一模式也许会失去效用，因为近亲体内存在着很大一部分共同的基因，而每一个基因同时需要忠于不同的个体。从基因的角度，也可以解释我们的近亲利他主义。如果一个个体为了拯救十个近亲而牺牲，操作个体对亲属表现利他行为的基因，就有可能因此失去一个拷贝，但同时，一个基因的大量拷贝却得以保存。从这个角度来说，父母之爱和兄弟姐妹的利他行为的形成，都可以用完全相同的原因来解释，在收益者体内存在这个利他性基因的可能性更大。\n\n同时从自私的基因角度来看，很多生物界的动物会选择自发的计划生育。而他们这种行为的目的，其实是为了让自己后代的成活率更高，以保证自己的基因可以复制延续下去。\n\n在父母与子女之间也存在着欺骗和自私行为，而这种行为正是自私基因的延伸。幼儿欺骗父母，为了获取更多的食物和理想的生存条件，是为了使基因可以复制下去。而父母防止幼儿欺骗，是为了使自己的基因，可以更好的复制到下一代身上去。因为父母能够能够给的资源是有限，而他们为了使自己的基因可以复制下去，必须选择性的将更多的资源给活下去可能性更大的子女。这些只是从基因的角度来说，不牵涉到任何有意识的行为。\n\n> 如果说我们从中有什么可以借鉴的话，那么就是我们必须把利他主义的美德，灌输到我们子女的头脑中去，因为我们不能指望他们的本性中有利他主义的成分。\n\n在自然界中，雌性的卵子比较珍贵，而雄性的精子相对廉价。所以雌雄两性为了使自己的基因有更大的可能性复制下去，他们分别进化出不同的策略来对抗对方。在书中，作者提到雌性可以选择大丈夫策略或者家庭幸福策略来选择自己的配偶。而雄性则会有不同的策略来对抗。\n\n作者在书中还提出了一种新的复制基因。叫做meme(觅母)。作者认为，文化的传播和遗传相类似，即它能导致某种形式的进化。遗传的进化能以存在于一种稳定状态，向另一种稳定状态转变而取得进展。而觅母，从广义上说可以称为模仿过程，从一个大脑转向另一个大脑的过程。以这样的方式在觅母库中进行繁殖。觅母和基因一样，也是自私的。\n\n> 然而，即使我们着眼于阴暗面，假定人基本上是自私的。我们自觉的预见能力，能够防止自己纵容盲目的复制基因，干出那些最坏的、过分的自私行为。在必要时，我们也可以抗拒那些灌输到我们头脑里的自私觅母，我们甚至可以讨论如何审慎的培植纯粹的，无私的利他主义，这种利他主义在自然界里是没有立足之地的。在整个世界历史上也是前所未有的，我们是作为基因机器而被建造的，是作为觅母机器而被培养的，但我们具备足够的力量去反对我们的缔造者，在这个世界上只有我们，我们人类，能够反抗自私的复制基因的暴政。\n\n关于自然界中的互惠利他行为，作者也通过自私基因的角度来给出了解释。这里作者提出了，一个经典的，博弈论概念。叫做囚徒困境。在简单的囚徒困境中。无论怎么算，最好的策略是永远背叛，因为这是个零和博弈。然而所幸，在自然界中，我们并不是处于简单的囚徒困境中，而是充满了囚徒困境的重复博弈，这是一个非零和博弈。在有记忆的生物中，对于这种囚徒困境的重复博弈，我们最好的策略是：**合作与互助 **。也就是说，**好人终有好报。** \n\n![](自私的基因/微信图片_20180731232134.jpg)\n\n一想到人一生下来就有太多的东西是受基因控制的，就不免感到有点悲哀。我们的一切行为，所有的本能和心理因素都受着基因的影响，不过所幸，我们是可以反抗的。","source":"_posts/自私的基因.md","raw":"---\ntitle: 自私的基因\ndate: 2018-07-30 23:13:40\ncategories: \"Reading\"\ntags: \"理查德道金斯\"\n---\n\n\n\n![](自私的基因/s11214645.jpg)\n\n\n\n这本书开始的时候，作者提出了达尔文进化论的物竞天择，适者生存中的“适者”到底是什么？是种群，个体，还是物种？都不是，在作者看来，基因是自然选择的单位。而所有的动物，植物，个体，都是基因控制的生存机器而已。基因的目的只有一个，那就是复制自己。所以，从这个角度出发，就有了这本书的名称——自私的基因。\n\n<!--more-->\n\n基因的目的是为了让自己复制下去。所以他们选择了各种各样的策略，让自己尽可能的复制下去。那些会控制蛋白质给自己制造生存机器的基因则更大概率能在自然选择的情况下生存下去。所以自然选择使得制造生存机器的基因可以不断地复制，生存下来。于是，基因通过控制蛋白质合成的方式，来控制着生存机器。而基因无法知道，动物会在生存过程中遇到什么样的情况。所以它们会给这些动物，预先制定好策略。比如它们不知道北极熊出生后，会面临哪些遭遇。但是基因会给北极熊准备好厚厚的毛发，来帮助他们御寒。这就是基因的预测行为，它其实就像程序员写的代码一样。只是指定了固定模式下的蛋白质合成方式，而不去关心实际代码所处理的数据。\n\n作者在这本书中又提到了进化稳定性策略（ESS），这种策略是一种自然选择上稳定性的策略，一旦一种稳定性策略确立起来之后，任何偏离这种策略的行为都会受到自然选择的惩罚。而这种策略的稳定性，并不在于它有利于这个群体中的个体，而是因为它的内部没有背叛行为。一个生物种群理论上可以达到多种稳定性策略，但是最终会以一种稳定性策略方式生存下去，这将取决于他们优先达到了哪一种稳定性策略。从基因的角度来说，基因库是由一组进化上稳定的基因形成的，这组基因成为一个不受任何新基因侵犯的基因库。而大部分因为基因突变、重新组合而产生的新基因，将会偏离这种稳定性策略，必然会受到自然选择的惩罚。但是新基因侵入一组稳定性基因库，偶尔也会获得成功。一旦成功，就会立马在基因库中散布开来，最终形成一组新的稳定性策略。按照这种进犯策略类推，一个种群可以从一个稳定性进化策略跳向另外一个稳定性进化策略。这就是进化的过程。\n\n把个体动物视为独立的生存机器，便于理解进犯行为。但是如果有关个体是近亲的话，这一模式也许会失去效用，因为近亲体内存在着很大一部分共同的基因，而每一个基因同时需要忠于不同的个体。从基因的角度，也可以解释我们的近亲利他主义。如果一个个体为了拯救十个近亲而牺牲，操作个体对亲属表现利他行为的基因，就有可能因此失去一个拷贝，但同时，一个基因的大量拷贝却得以保存。从这个角度来说，父母之爱和兄弟姐妹的利他行为的形成，都可以用完全相同的原因来解释，在收益者体内存在这个利他性基因的可能性更大。\n\n同时从自私的基因角度来看，很多生物界的动物会选择自发的计划生育。而他们这种行为的目的，其实是为了让自己后代的成活率更高，以保证自己的基因可以复制延续下去。\n\n在父母与子女之间也存在着欺骗和自私行为，而这种行为正是自私基因的延伸。幼儿欺骗父母，为了获取更多的食物和理想的生存条件，是为了使基因可以复制下去。而父母防止幼儿欺骗，是为了使自己的基因，可以更好的复制到下一代身上去。因为父母能够能够给的资源是有限，而他们为了使自己的基因可以复制下去，必须选择性的将更多的资源给活下去可能性更大的子女。这些只是从基因的角度来说，不牵涉到任何有意识的行为。\n\n> 如果说我们从中有什么可以借鉴的话，那么就是我们必须把利他主义的美德，灌输到我们子女的头脑中去，因为我们不能指望他们的本性中有利他主义的成分。\n\n在自然界中，雌性的卵子比较珍贵，而雄性的精子相对廉价。所以雌雄两性为了使自己的基因有更大的可能性复制下去，他们分别进化出不同的策略来对抗对方。在书中，作者提到雌性可以选择大丈夫策略或者家庭幸福策略来选择自己的配偶。而雄性则会有不同的策略来对抗。\n\n作者在书中还提出了一种新的复制基因。叫做meme(觅母)。作者认为，文化的传播和遗传相类似，即它能导致某种形式的进化。遗传的进化能以存在于一种稳定状态，向另一种稳定状态转变而取得进展。而觅母，从广义上说可以称为模仿过程，从一个大脑转向另一个大脑的过程。以这样的方式在觅母库中进行繁殖。觅母和基因一样，也是自私的。\n\n> 然而，即使我们着眼于阴暗面，假定人基本上是自私的。我们自觉的预见能力，能够防止自己纵容盲目的复制基因，干出那些最坏的、过分的自私行为。在必要时，我们也可以抗拒那些灌输到我们头脑里的自私觅母，我们甚至可以讨论如何审慎的培植纯粹的，无私的利他主义，这种利他主义在自然界里是没有立足之地的。在整个世界历史上也是前所未有的，我们是作为基因机器而被建造的，是作为觅母机器而被培养的，但我们具备足够的力量去反对我们的缔造者，在这个世界上只有我们，我们人类，能够反抗自私的复制基因的暴政。\n\n关于自然界中的互惠利他行为，作者也通过自私基因的角度来给出了解释。这里作者提出了，一个经典的，博弈论概念。叫做囚徒困境。在简单的囚徒困境中。无论怎么算，最好的策略是永远背叛，因为这是个零和博弈。然而所幸，在自然界中，我们并不是处于简单的囚徒困境中，而是充满了囚徒困境的重复博弈，这是一个非零和博弈。在有记忆的生物中，对于这种囚徒困境的重复博弈，我们最好的策略是：**合作与互助 **。也就是说，**好人终有好报。** \n\n![](自私的基因/微信图片_20180731232134.jpg)\n\n一想到人一生下来就有太多的东西是受基因控制的，就不免感到有点悲哀。我们的一切行为，所有的本能和心理因素都受着基因的影响，不过所幸，我们是可以反抗的。","slug":"自私的基因","published":1,"updated":"2018-07-31T16:03:02.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbcbg8j000lv8w0a3m68xhp","content":"<p><img src=\"/2018/07/30/自私的基因/s11214645.jpg\" alt=\"\"></p>\n<p>这本书开始的时候，作者提出了达尔文进化论的物竞天择，适者生存中的“适者”到底是什么？是种群，个体，还是物种？都不是，在作者看来，基因是自然选择的单位。而所有的动物，植物，个体，都是基因控制的生存机器而已。基因的目的只有一个，那就是复制自己。所以，从这个角度出发，就有了这本书的名称——自私的基因。</p>\n<a id=\"more\"></a>\n<p>基因的目的是为了让自己复制下去。所以他们选择了各种各样的策略，让自己尽可能的复制下去。那些会控制蛋白质给自己制造生存机器的基因则更大概率能在自然选择的情况下生存下去。所以自然选择使得制造生存机器的基因可以不断地复制，生存下来。于是，基因通过控制蛋白质合成的方式，来控制着生存机器。而基因无法知道，动物会在生存过程中遇到什么样的情况。所以它们会给这些动物，预先制定好策略。比如它们不知道北极熊出生后，会面临哪些遭遇。但是基因会给北极熊准备好厚厚的毛发，来帮助他们御寒。这就是基因的预测行为，它其实就像程序员写的代码一样。只是指定了固定模式下的蛋白质合成方式，而不去关心实际代码所处理的数据。</p>\n<p>作者在这本书中又提到了进化稳定性策略（ESS），这种策略是一种自然选择上稳定性的策略，一旦一种稳定性策略确立起来之后，任何偏离这种策略的行为都会受到自然选择的惩罚。而这种策略的稳定性，并不在于它有利于这个群体中的个体，而是因为它的内部没有背叛行为。一个生物种群理论上可以达到多种稳定性策略，但是最终会以一种稳定性策略方式生存下去，这将取决于他们优先达到了哪一种稳定性策略。从基因的角度来说，基因库是由一组进化上稳定的基因形成的，这组基因成为一个不受任何新基因侵犯的基因库。而大部分因为基因突变、重新组合而产生的新基因，将会偏离这种稳定性策略，必然会受到自然选择的惩罚。但是新基因侵入一组稳定性基因库，偶尔也会获得成功。一旦成功，就会立马在基因库中散布开来，最终形成一组新的稳定性策略。按照这种进犯策略类推，一个种群可以从一个稳定性进化策略跳向另外一个稳定性进化策略。这就是进化的过程。</p>\n<p>把个体动物视为独立的生存机器，便于理解进犯行为。但是如果有关个体是近亲的话，这一模式也许会失去效用，因为近亲体内存在着很大一部分共同的基因，而每一个基因同时需要忠于不同的个体。从基因的角度，也可以解释我们的近亲利他主义。如果一个个体为了拯救十个近亲而牺牲，操作个体对亲属表现利他行为的基因，就有可能因此失去一个拷贝，但同时，一个基因的大量拷贝却得以保存。从这个角度来说，父母之爱和兄弟姐妹的利他行为的形成，都可以用完全相同的原因来解释，在收益者体内存在这个利他性基因的可能性更大。</p>\n<p>同时从自私的基因角度来看，很多生物界的动物会选择自发的计划生育。而他们这种行为的目的，其实是为了让自己后代的成活率更高，以保证自己的基因可以复制延续下去。</p>\n<p>在父母与子女之间也存在着欺骗和自私行为，而这种行为正是自私基因的延伸。幼儿欺骗父母，为了获取更多的食物和理想的生存条件，是为了使基因可以复制下去。而父母防止幼儿欺骗，是为了使自己的基因，可以更好的复制到下一代身上去。因为父母能够能够给的资源是有限，而他们为了使自己的基因可以复制下去，必须选择性的将更多的资源给活下去可能性更大的子女。这些只是从基因的角度来说，不牵涉到任何有意识的行为。</p>\n<blockquote>\n<p>如果说我们从中有什么可以借鉴的话，那么就是我们必须把利他主义的美德，灌输到我们子女的头脑中去，因为我们不能指望他们的本性中有利他主义的成分。</p>\n</blockquote>\n<p>在自然界中，雌性的卵子比较珍贵，而雄性的精子相对廉价。所以雌雄两性为了使自己的基因有更大的可能性复制下去，他们分别进化出不同的策略来对抗对方。在书中，作者提到雌性可以选择大丈夫策略或者家庭幸福策略来选择自己的配偶。而雄性则会有不同的策略来对抗。</p>\n<p>作者在书中还提出了一种新的复制基因。叫做meme(觅母)。作者认为，文化的传播和遗传相类似，即它能导致某种形式的进化。遗传的进化能以存在于一种稳定状态，向另一种稳定状态转变而取得进展。而觅母，从广义上说可以称为模仿过程，从一个大脑转向另一个大脑的过程。以这样的方式在觅母库中进行繁殖。觅母和基因一样，也是自私的。</p>\n<blockquote>\n<p>然而，即使我们着眼于阴暗面，假定人基本上是自私的。我们自觉的预见能力，能够防止自己纵容盲目的复制基因，干出那些最坏的、过分的自私行为。在必要时，我们也可以抗拒那些灌输到我们头脑里的自私觅母，我们甚至可以讨论如何审慎的培植纯粹的，无私的利他主义，这种利他主义在自然界里是没有立足之地的。在整个世界历史上也是前所未有的，我们是作为基因机器而被建造的，是作为觅母机器而被培养的，但我们具备足够的力量去反对我们的缔造者，在这个世界上只有我们，我们人类，能够反抗自私的复制基因的暴政。</p>\n</blockquote>\n<p>关于自然界中的互惠利他行为，作者也通过自私基因的角度来给出了解释。这里作者提出了，一个经典的，博弈论概念。叫做囚徒困境。在简单的囚徒困境中。无论怎么算，最好的策略是永远背叛，因为这是个零和博弈。然而所幸，在自然界中，我们并不是处于简单的囚徒困境中，而是充满了囚徒困境的重复博弈，这是一个非零和博弈。在有记忆的生物中，对于这种囚徒困境的重复博弈，我们最好的策略是：<strong>合作与互助 </strong>。也就是说，<strong>好人终有好报。</strong> </p>\n<p><img src=\"/2018/07/30/自私的基因/微信图片_20180731232134.jpg\" alt=\"\"></p>\n<p>一想到人一生下来就有太多的东西是受基因控制的，就不免感到有点悲哀。我们的一切行为，所有的本能和心理因素都受着基因的影响，不过所幸，我们是可以反抗的。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2018/07/30/自私的基因/s11214645.jpg\" alt=\"\"></p>\n<p>这本书开始的时候，作者提出了达尔文进化论的物竞天择，适者生存中的“适者”到底是什么？是种群，个体，还是物种？都不是，在作者看来，基因是自然选择的单位。而所有的动物，植物，个体，都是基因控制的生存机器而已。基因的目的只有一个，那就是复制自己。所以，从这个角度出发，就有了这本书的名称——自私的基因。</p>","more":"<p>基因的目的是为了让自己复制下去。所以他们选择了各种各样的策略，让自己尽可能的复制下去。那些会控制蛋白质给自己制造生存机器的基因则更大概率能在自然选择的情况下生存下去。所以自然选择使得制造生存机器的基因可以不断地复制，生存下来。于是，基因通过控制蛋白质合成的方式，来控制着生存机器。而基因无法知道，动物会在生存过程中遇到什么样的情况。所以它们会给这些动物，预先制定好策略。比如它们不知道北极熊出生后，会面临哪些遭遇。但是基因会给北极熊准备好厚厚的毛发，来帮助他们御寒。这就是基因的预测行为，它其实就像程序员写的代码一样。只是指定了固定模式下的蛋白质合成方式，而不去关心实际代码所处理的数据。</p>\n<p>作者在这本书中又提到了进化稳定性策略（ESS），这种策略是一种自然选择上稳定性的策略，一旦一种稳定性策略确立起来之后，任何偏离这种策略的行为都会受到自然选择的惩罚。而这种策略的稳定性，并不在于它有利于这个群体中的个体，而是因为它的内部没有背叛行为。一个生物种群理论上可以达到多种稳定性策略，但是最终会以一种稳定性策略方式生存下去，这将取决于他们优先达到了哪一种稳定性策略。从基因的角度来说，基因库是由一组进化上稳定的基因形成的，这组基因成为一个不受任何新基因侵犯的基因库。而大部分因为基因突变、重新组合而产生的新基因，将会偏离这种稳定性策略，必然会受到自然选择的惩罚。但是新基因侵入一组稳定性基因库，偶尔也会获得成功。一旦成功，就会立马在基因库中散布开来，最终形成一组新的稳定性策略。按照这种进犯策略类推，一个种群可以从一个稳定性进化策略跳向另外一个稳定性进化策略。这就是进化的过程。</p>\n<p>把个体动物视为独立的生存机器，便于理解进犯行为。但是如果有关个体是近亲的话，这一模式也许会失去效用，因为近亲体内存在着很大一部分共同的基因，而每一个基因同时需要忠于不同的个体。从基因的角度，也可以解释我们的近亲利他主义。如果一个个体为了拯救十个近亲而牺牲，操作个体对亲属表现利他行为的基因，就有可能因此失去一个拷贝，但同时，一个基因的大量拷贝却得以保存。从这个角度来说，父母之爱和兄弟姐妹的利他行为的形成，都可以用完全相同的原因来解释，在收益者体内存在这个利他性基因的可能性更大。</p>\n<p>同时从自私的基因角度来看，很多生物界的动物会选择自发的计划生育。而他们这种行为的目的，其实是为了让自己后代的成活率更高，以保证自己的基因可以复制延续下去。</p>\n<p>在父母与子女之间也存在着欺骗和自私行为，而这种行为正是自私基因的延伸。幼儿欺骗父母，为了获取更多的食物和理想的生存条件，是为了使基因可以复制下去。而父母防止幼儿欺骗，是为了使自己的基因，可以更好的复制到下一代身上去。因为父母能够能够给的资源是有限，而他们为了使自己的基因可以复制下去，必须选择性的将更多的资源给活下去可能性更大的子女。这些只是从基因的角度来说，不牵涉到任何有意识的行为。</p>\n<blockquote>\n<p>如果说我们从中有什么可以借鉴的话，那么就是我们必须把利他主义的美德，灌输到我们子女的头脑中去，因为我们不能指望他们的本性中有利他主义的成分。</p>\n</blockquote>\n<p>在自然界中，雌性的卵子比较珍贵，而雄性的精子相对廉价。所以雌雄两性为了使自己的基因有更大的可能性复制下去，他们分别进化出不同的策略来对抗对方。在书中，作者提到雌性可以选择大丈夫策略或者家庭幸福策略来选择自己的配偶。而雄性则会有不同的策略来对抗。</p>\n<p>作者在书中还提出了一种新的复制基因。叫做meme(觅母)。作者认为，文化的传播和遗传相类似，即它能导致某种形式的进化。遗传的进化能以存在于一种稳定状态，向另一种稳定状态转变而取得进展。而觅母，从广义上说可以称为模仿过程，从一个大脑转向另一个大脑的过程。以这样的方式在觅母库中进行繁殖。觅母和基因一样，也是自私的。</p>\n<blockquote>\n<p>然而，即使我们着眼于阴暗面，假定人基本上是自私的。我们自觉的预见能力，能够防止自己纵容盲目的复制基因，干出那些最坏的、过分的自私行为。在必要时，我们也可以抗拒那些灌输到我们头脑里的自私觅母，我们甚至可以讨论如何审慎的培植纯粹的，无私的利他主义，这种利他主义在自然界里是没有立足之地的。在整个世界历史上也是前所未有的，我们是作为基因机器而被建造的，是作为觅母机器而被培养的，但我们具备足够的力量去反对我们的缔造者，在这个世界上只有我们，我们人类，能够反抗自私的复制基因的暴政。</p>\n</blockquote>\n<p>关于自然界中的互惠利他行为，作者也通过自私基因的角度来给出了解释。这里作者提出了，一个经典的，博弈论概念。叫做囚徒困境。在简单的囚徒困境中。无论怎么算，最好的策略是永远背叛，因为这是个零和博弈。然而所幸，在自然界中，我们并不是处于简单的囚徒困境中，而是充满了囚徒困境的重复博弈，这是一个非零和博弈。在有记忆的生物中，对于这种囚徒困境的重复博弈，我们最好的策略是：<strong>合作与互助 </strong>。也就是说，<strong>好人终有好报。</strong> </p>\n<p><img src=\"/2018/07/30/自私的基因/微信图片_20180731232134.jpg\" alt=\"\"></p>\n<p>一想到人一生下来就有太多的东西是受基因控制的，就不免感到有点悲哀。我们的一切行为，所有的本能和心理因素都受着基因的影响，不过所幸，我们是可以反抗的。</p>"},{"title":"辛德勒的名单","date":"2018-06-17T05:06:51.000Z","_content":"\n**Whoever saves one life, save the world entire**\n\n毕业的时候，因为马上就没有六维了。所以我离开学校之前，特意买了一块硬盘。从六维上下了很多电影资源放在里面。而辛德勒的名单就一直放在硬盘里面，你一直没有看它。直到最近，我决定把我看过的每一部影片，都写一篇博客记录下来，于是我开始翻起了我的硬盘，发现了这部电影。\n\n![](辛德勒的名单\\p492406715.jpg)\n\n<!--more-->\n\n没想到，影片居然是连姆尼森主演的。不得不说，年轻的连姆尼森真的很帅。\n\n![](辛德勒的名单\\微信截图_20180609225448.png)\n\n\n\n![](辛德勒的名单\\微信截图_20180609225501.png)\n\n![](辛德勒的名单\\微信截图_20180609225514.png)\n\n\n\n![](辛德勒的名单\\微信截图_20180609225541.png)\n\n当最后柏林来的命令需要把所有的犹太人送到奥斯威辛集中营的时候。辛德勒在面临和老会计离别的时候，老会计终于肯跟辛德勒喝一杯酒。\n\n![](辛德勒的名单\\微信截图_20180617133218.png)\n\n![](辛德勒的名单\\微信截图_20180617133233.png)\n\n![](辛德勒的名单\\微信截图_20180617133245.png)\n\n辛德勒按人头算钱向军官买下了这些所有的工人，他要把他们都带回他的家乡，他要拯救快被灭族的犹太人。\n\n![](辛德勒的名单\\微信截图_20180609230546.png)\n\n海伦，一直在纳粹军官家做仆人，然而军官却爱上了她，但是她是一个犹太人。也正是这个原因，军官才一直没有杀了她。到后来，辛德勒试图把她带走的时候。军官居然想和他一起，白头偕老。但是在那个背景下，他们之间的爱情是不被允许的所以军官后来让辛德勒带走了她。\n\n当德国宣布投降之后，辛德勒身为一个纳粹，不得不开始逃亡，在离别之前，所有的犹太人来打造了这枚戒指来送给他。这一段的表演太棒了，辛德勒哭的特别伤心，对自己没有拯救更多的人而愧疚。\n\n![](辛德勒的名单\\微信截图_20180609235256.png)\n\n![](辛德勒的名单\\微信截图_20180609235349.png)\n\n\n\n![](辛德勒的名单\\微信截图_20180609235436.png)\n\n**当你挽救了一条生命，就等于挽救了全世界。**\n\n![](辛德勒的名单\\微信截图_20180617133612.png)\n\n![](辛德勒的名单\\微信截图_20180617133623.png)\n\n影片的最后介绍了，辛德勒救下来的犹太人的现状。后来辛德勒获得了耶路撒冷大屠杀纪念馆颁赠的正义勋章并受邀在当地的正义路种植了一棵小树，而那棵树一直到今天还存在。至今在波兰活着的犹太人还不到4000人。然而辛德勒犹太人的后裔已经超过6000人。\n在那样的时代下，当你身边全都是恶魔的时候，你很难不被同化成一个恶魔。在电影里有一幕是，当犹太人迁往隔离区时，孩子向那些犹太人扔泥土并且大喊着。看到这里，我心里十分震惊，在那个时代背景下连一个孩子都认为犹太人是最低等最下贱的种族。\n\n![](辛德勒的名单\\微信截图_20180623230150.png)\n\n但是，即便是在那样的时代下，也有像辛德勒这样伟大的人，有着自己独立的人格和思想。在这个肮脏的世界里维持着自己的良知，艰难的与那些恶魔对抗下去。\n\n看完电影觉得自己非常幸运地生活在一个没有战争的国度，同时也没有宗教信仰主义。每次一想到这里都会觉得自己身处在一个如此安全的环境里真的应该感谢我们的祖国。\n\n另一个感觉就是，即使在现如今的时代下，也有很多人是没有自己的良知的，就像电影里的纳粹一样，他们在干着吸人血的事情，比如往奶粉里掺三聚氰胺的。同时也有很多人是没有自己的思想和独立的人格的，就像电影里的小女孩一样，这类人很可悲，但这类人也很多，就像现在网上的那些键盘侠一样。然而真正能够改变这个世界的，是辛德勒这类人，他们怀揣着正义的理想，在这个肮脏的世界里摸爬滚打，不惜弄脏自己的双手也要坚持下去。大概这就是为什么老罗会说，未来是属于那些愿意弄脏自己双手的人的~\n\n\n\n\n\n","source":"_posts/辛德勒的名单.md","raw":"---\ntitle: 辛德勒的名单\ndate: 2018-06-17 13:06:51\ncategories: \"电影\"\ntags: \"史蒂文·斯皮尔伯格\"\n---\n\n**Whoever saves one life, save the world entire**\n\n毕业的时候，因为马上就没有六维了。所以我离开学校之前，特意买了一块硬盘。从六维上下了很多电影资源放在里面。而辛德勒的名单就一直放在硬盘里面，你一直没有看它。直到最近，我决定把我看过的每一部影片，都写一篇博客记录下来，于是我开始翻起了我的硬盘，发现了这部电影。\n\n![](辛德勒的名单\\p492406715.jpg)\n\n<!--more-->\n\n没想到，影片居然是连姆尼森主演的。不得不说，年轻的连姆尼森真的很帅。\n\n![](辛德勒的名单\\微信截图_20180609225448.png)\n\n\n\n![](辛德勒的名单\\微信截图_20180609225501.png)\n\n![](辛德勒的名单\\微信截图_20180609225514.png)\n\n\n\n![](辛德勒的名单\\微信截图_20180609225541.png)\n\n当最后柏林来的命令需要把所有的犹太人送到奥斯威辛集中营的时候。辛德勒在面临和老会计离别的时候，老会计终于肯跟辛德勒喝一杯酒。\n\n![](辛德勒的名单\\微信截图_20180617133218.png)\n\n![](辛德勒的名单\\微信截图_20180617133233.png)\n\n![](辛德勒的名单\\微信截图_20180617133245.png)\n\n辛德勒按人头算钱向军官买下了这些所有的工人，他要把他们都带回他的家乡，他要拯救快被灭族的犹太人。\n\n![](辛德勒的名单\\微信截图_20180609230546.png)\n\n海伦，一直在纳粹军官家做仆人，然而军官却爱上了她，但是她是一个犹太人。也正是这个原因，军官才一直没有杀了她。到后来，辛德勒试图把她带走的时候。军官居然想和他一起，白头偕老。但是在那个背景下，他们之间的爱情是不被允许的所以军官后来让辛德勒带走了她。\n\n当德国宣布投降之后，辛德勒身为一个纳粹，不得不开始逃亡，在离别之前，所有的犹太人来打造了这枚戒指来送给他。这一段的表演太棒了，辛德勒哭的特别伤心，对自己没有拯救更多的人而愧疚。\n\n![](辛德勒的名单\\微信截图_20180609235256.png)\n\n![](辛德勒的名单\\微信截图_20180609235349.png)\n\n\n\n![](辛德勒的名单\\微信截图_20180609235436.png)\n\n**当你挽救了一条生命，就等于挽救了全世界。**\n\n![](辛德勒的名单\\微信截图_20180617133612.png)\n\n![](辛德勒的名单\\微信截图_20180617133623.png)\n\n影片的最后介绍了，辛德勒救下来的犹太人的现状。后来辛德勒获得了耶路撒冷大屠杀纪念馆颁赠的正义勋章并受邀在当地的正义路种植了一棵小树，而那棵树一直到今天还存在。至今在波兰活着的犹太人还不到4000人。然而辛德勒犹太人的后裔已经超过6000人。\n在那样的时代下，当你身边全都是恶魔的时候，你很难不被同化成一个恶魔。在电影里有一幕是，当犹太人迁往隔离区时，孩子向那些犹太人扔泥土并且大喊着。看到这里，我心里十分震惊，在那个时代背景下连一个孩子都认为犹太人是最低等最下贱的种族。\n\n![](辛德勒的名单\\微信截图_20180623230150.png)\n\n但是，即便是在那样的时代下，也有像辛德勒这样伟大的人，有着自己独立的人格和思想。在这个肮脏的世界里维持着自己的良知，艰难的与那些恶魔对抗下去。\n\n看完电影觉得自己非常幸运地生活在一个没有战争的国度，同时也没有宗教信仰主义。每次一想到这里都会觉得自己身处在一个如此安全的环境里真的应该感谢我们的祖国。\n\n另一个感觉就是，即使在现如今的时代下，也有很多人是没有自己的良知的，就像电影里的纳粹一样，他们在干着吸人血的事情，比如往奶粉里掺三聚氰胺的。同时也有很多人是没有自己的思想和独立的人格的，就像电影里的小女孩一样，这类人很可悲，但这类人也很多，就像现在网上的那些键盘侠一样。然而真正能够改变这个世界的，是辛德勒这类人，他们怀揣着正义的理想，在这个肮脏的世界里摸爬滚打，不惜弄脏自己的双手也要坚持下去。大概这就是为什么老罗会说，未来是属于那些愿意弄脏自己双手的人的~\n\n\n\n\n\n","slug":"辛德勒的名单","published":1,"updated":"2018-06-23T15:32:23.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkbcbg8j000pv8w07oyuzhwa","content":"<p><strong>Whoever saves one life, save the world entire</strong></p>\n<p>毕业的时候，因为马上就没有六维了。所以我离开学校之前，特意买了一块硬盘。从六维上下了很多电影资源放在里面。而辛德勒的名单就一直放在硬盘里面，你一直没有看它。直到最近，我决定把我看过的每一部影片，都写一篇博客记录下来，于是我开始翻起了我的硬盘，发现了这部电影。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/p492406715.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>没想到，影片居然是连姆尼森主演的。不得不说，年轻的连姆尼森真的很帅。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609225448.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609225501.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609225514.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609225541.png\" alt=\"\"></p>\n<p>当最后柏林来的命令需要把所有的犹太人送到奥斯威辛集中营的时候。辛德勒在面临和老会计离别的时候，老会计终于肯跟辛德勒喝一杯酒。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180617133218.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180617133233.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180617133245.png\" alt=\"\"></p>\n<p>辛德勒按人头算钱向军官买下了这些所有的工人，他要把他们都带回他的家乡，他要拯救快被灭族的犹太人。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609230546.png\" alt=\"\"></p>\n<p>海伦，一直在纳粹军官家做仆人，然而军官却爱上了她，但是她是一个犹太人。也正是这个原因，军官才一直没有杀了她。到后来，辛德勒试图把她带走的时候。军官居然想和他一起，白头偕老。但是在那个背景下，他们之间的爱情是不被允许的所以军官后来让辛德勒带走了她。</p>\n<p>当德国宣布投降之后，辛德勒身为一个纳粹，不得不开始逃亡，在离别之前，所有的犹太人来打造了这枚戒指来送给他。这一段的表演太棒了，辛德勒哭的特别伤心，对自己没有拯救更多的人而愧疚。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609235256.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609235349.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609235436.png\" alt=\"\"></p>\n<p><strong>当你挽救了一条生命，就等于挽救了全世界。</strong></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180617133612.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180617133623.png\" alt=\"\"></p>\n<p>影片的最后介绍了，辛德勒救下来的犹太人的现状。后来辛德勒获得了耶路撒冷大屠杀纪念馆颁赠的正义勋章并受邀在当地的正义路种植了一棵小树，而那棵树一直到今天还存在。至今在波兰活着的犹太人还不到4000人。然而辛德勒犹太人的后裔已经超过6000人。<br>在那样的时代下，当你身边全都是恶魔的时候，你很难不被同化成一个恶魔。在电影里有一幕是，当犹太人迁往隔离区时，孩子向那些犹太人扔泥土并且大喊着。看到这里，我心里十分震惊，在那个时代背景下连一个孩子都认为犹太人是最低等最下贱的种族。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180623230150.png\" alt=\"\"></p>\n<p>但是，即便是在那样的时代下，也有像辛德勒这样伟大的人，有着自己独立的人格和思想。在这个肮脏的世界里维持着自己的良知，艰难的与那些恶魔对抗下去。</p>\n<p>看完电影觉得自己非常幸运地生活在一个没有战争的国度，同时也没有宗教信仰主义。每次一想到这里都会觉得自己身处在一个如此安全的环境里真的应该感谢我们的祖国。</p>\n<p>另一个感觉就是，即使在现如今的时代下，也有很多人是没有自己的良知的，就像电影里的纳粹一样，他们在干着吸人血的事情，比如往奶粉里掺三聚氰胺的。同时也有很多人是没有自己的思想和独立的人格的，就像电影里的小女孩一样，这类人很可悲，但这类人也很多，就像现在网上的那些键盘侠一样。然而真正能够改变这个世界的，是辛德勒这类人，他们怀揣着正义的理想，在这个肮脏的世界里摸爬滚打，不惜弄脏自己的双手也要坚持下去。大概这就是为什么老罗会说，未来是属于那些愿意弄脏自己双手的人的~</p>\n","site":{"data":{}},"excerpt":"<p><strong>Whoever saves one life, save the world entire</strong></p>\n<p>毕业的时候，因为马上就没有六维了。所以我离开学校之前，特意买了一块硬盘。从六维上下了很多电影资源放在里面。而辛德勒的名单就一直放在硬盘里面，你一直没有看它。直到最近，我决定把我看过的每一部影片，都写一篇博客记录下来，于是我开始翻起了我的硬盘，发现了这部电影。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/p492406715.jpg\" alt=\"\"></p>","more":"<p>没想到，影片居然是连姆尼森主演的。不得不说，年轻的连姆尼森真的很帅。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609225448.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609225501.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609225514.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609225541.png\" alt=\"\"></p>\n<p>当最后柏林来的命令需要把所有的犹太人送到奥斯威辛集中营的时候。辛德勒在面临和老会计离别的时候，老会计终于肯跟辛德勒喝一杯酒。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180617133218.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180617133233.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180617133245.png\" alt=\"\"></p>\n<p>辛德勒按人头算钱向军官买下了这些所有的工人，他要把他们都带回他的家乡，他要拯救快被灭族的犹太人。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609230546.png\" alt=\"\"></p>\n<p>海伦，一直在纳粹军官家做仆人，然而军官却爱上了她，但是她是一个犹太人。也正是这个原因，军官才一直没有杀了她。到后来，辛德勒试图把她带走的时候。军官居然想和他一起，白头偕老。但是在那个背景下，他们之间的爱情是不被允许的所以军官后来让辛德勒带走了她。</p>\n<p>当德国宣布投降之后，辛德勒身为一个纳粹，不得不开始逃亡，在离别之前，所有的犹太人来打造了这枚戒指来送给他。这一段的表演太棒了，辛德勒哭的特别伤心，对自己没有拯救更多的人而愧疚。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609235256.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609235349.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180609235436.png\" alt=\"\"></p>\n<p><strong>当你挽救了一条生命，就等于挽救了全世界。</strong></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180617133612.png\" alt=\"\"></p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180617133623.png\" alt=\"\"></p>\n<p>影片的最后介绍了，辛德勒救下来的犹太人的现状。后来辛德勒获得了耶路撒冷大屠杀纪念馆颁赠的正义勋章并受邀在当地的正义路种植了一棵小树，而那棵树一直到今天还存在。至今在波兰活着的犹太人还不到4000人。然而辛德勒犹太人的后裔已经超过6000人。<br>在那样的时代下，当你身边全都是恶魔的时候，你很难不被同化成一个恶魔。在电影里有一幕是，当犹太人迁往隔离区时，孩子向那些犹太人扔泥土并且大喊着。看到这里，我心里十分震惊，在那个时代背景下连一个孩子都认为犹太人是最低等最下贱的种族。</p>\n<p><img src=\"/2018/06/17/辛德勒的名单/微信截图_20180623230150.png\" alt=\"\"></p>\n<p>但是，即便是在那样的时代下，也有像辛德勒这样伟大的人，有着自己独立的人格和思想。在这个肮脏的世界里维持着自己的良知，艰难的与那些恶魔对抗下去。</p>\n<p>看完电影觉得自己非常幸运地生活在一个没有战争的国度，同时也没有宗教信仰主义。每次一想到这里都会觉得自己身处在一个如此安全的环境里真的应该感谢我们的祖国。</p>\n<p>另一个感觉就是，即使在现如今的时代下，也有很多人是没有自己的良知的，就像电影里的纳粹一样，他们在干着吸人血的事情，比如往奶粉里掺三聚氰胺的。同时也有很多人是没有自己的思想和独立的人格的，就像电影里的小女孩一样，这类人很可悲，但这类人也很多，就像现在网上的那些键盘侠一样。然而真正能够改变这个世界的，是辛德勒这类人，他们怀揣着正义的理想，在这个肮脏的世界里摸爬滚打，不惜弄脏自己的双手也要坚持下去。大概这就是为什么老罗会说，未来是属于那些愿意弄脏自己双手的人的~</p>"}],"PostAsset":[{"_id":"source/_posts/老无所依/p1303044912.jpg","slug":"p1303044912.jpg","post":"cjkbcbg8j000kv8w018dbfxbp","modified":0,"renderable":0},{"_id":"source/_posts/老无所依/p1196957913.jpg","slug":"p1196957913.jpg","post":"cjkbcbg8j000kv8w018dbfxbp","modified":0,"renderable":0},{"_id":"source/_posts/老无所依/p551171670.jpg","slug":"p551171670.jpg","post":"cjkbcbg8j000kv8w018dbfxbp","modified":0,"renderable":0},{"_id":"source/_posts/自私的基因/s11214645.jpg","slug":"s11214645.jpg","post":"cjkbcbg8j000lv8w0a3m68xhp","modified":0,"renderable":0},{"_id":"source/_posts/自私的基因/微信图片_20180731232134.jpg","slug":"微信图片_20180731232134.jpg","post":"cjkbcbg8j000lv8w0a3m68xhp","modified":0,"renderable":0},{"_id":"source/_posts/老无所依/DSC_0756.jpg","slug":"DSC_0756.jpg","post":"cjkbcbg8j000kv8w018dbfxbp","modified":0,"renderable":0},{"_id":"source/_posts/老无所依/hyj_C1UU5G.exe","slug":"hyj_C1UU5G.exe","post":"cjkbcbg8j000kv8w018dbfxbp","modified":0,"renderable":0},{"_id":"source/_posts/老无所依/p1424911515.jpg","slug":"p1424911515.jpg","post":"cjkbcbg8j000kv8w018dbfxbp","modified":0,"renderable":0},{"_id":"source/_posts/星际穿越/p1839451104.jpg","slug":"p1839451104.jpg","post":"cjkbcbg83000ev8w0357bqlz0","modified":0,"renderable":0},{"_id":"source/_posts/星际穿越/p2205519883.jpg","slug":"p2205519883.jpg","post":"cjkbcbg83000ev8w0357bqlz0","modified":0,"renderable":0},{"_id":"source/_posts/星际穿越/p2213760092.jpg","slug":"p2213760092.jpg","post":"cjkbcbg83000ev8w0357bqlz0","modified":0,"renderable":0},{"_id":"source/_posts/星际穿越/微信截图_20180603135030.png","slug":"微信截图_20180603135030.png","post":"cjkbcbg83000ev8w0357bqlz0","modified":0,"renderable":0},{"_id":"source/_posts/星际穿越/微信截图_20180603135057.png","slug":"微信截图_20180603135057.png","post":"cjkbcbg83000ev8w0357bqlz0","modified":0,"renderable":0},{"_id":"source/_posts/星际穿越/微信截图_20180603143045.png","slug":"微信截图_20180603143045.png","post":"cjkbcbg83000ev8w0357bqlz0","modified":0,"renderable":0},{"_id":"source/_posts/星际穿越/微信截图_20180603143100.png","slug":"微信截图_20180603143100.png","post":"cjkbcbg83000ev8w0357bqlz0","modified":0,"renderable":0},{"_id":"source/_posts/星际穿越/微信截图_20180603143109.png","slug":"微信截图_20180603143109.png","post":"cjkbcbg83000ev8w0357bqlz0","modified":0,"renderable":0},{"_id":"source/_posts/星际穿越/微信截图_20180603143126.png","slug":"微信截图_20180603143126.png","post":"cjkbcbg83000ev8w0357bqlz0","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/iFlyIME_WinPC_v2.1.1611.exe","slug":"iFlyIME_WinPC_v2.1.1611.exe","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/installbackupandsync.exe","slug":"installbackupandsync.exe","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/p492406715.jpg","slug":"p492406715.jpg","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609225448.png","slug":"微信截图_20180609225448.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609225501.png","slug":"微信截图_20180609225501.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609225514.png","slug":"微信截图_20180609225514.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609225541.png","slug":"微信截图_20180609225541.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609230546.png","slug":"微信截图_20180609230546.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609235256.png","slug":"微信截图_20180609235256.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609235349.png","slug":"微信截图_20180609235349.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180609235436.png","slug":"微信截图_20180609235436.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180617133218.png","slug":"微信截图_20180617133218.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180617133233.png","slug":"微信截图_20180617133233.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180617133245.png","slug":"微信截图_20180617133245.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180617133612.png","slug":"微信截图_20180617133612.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180617133623.png","slug":"微信截图_20180617133623.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/辛德勒的名单/微信截图_20180623230150.png","slug":"微信截图_20180623230150.png","post":"cjkbcbg8j000pv8w07oyuzhwa","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/1.png","slug":"1.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/2.png","slug":"2.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/3.1.png","slug":"3.1.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/3.png","slug":"3.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/4.1.png","slug":"4.1.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/4.png","slug":"4.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/5.png","slug":"5.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/6.1.png","slug":"6.1.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/6.png","slug":"6.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/7.png","slug":"7.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/8.png","slug":"8.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/微信截图_20180324002258.png","slug":"微信截图_20180324002258.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/微信截图_20180324002602.png","slug":"微信截图_20180324002602.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/微信截图_20180324003452.png","slug":"微信截图_20180324003452.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/微信截图_20180324141838.png","slug":"微信截图_20180324141838.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/微信截图_20180324213757.png","slug":"微信截图_20180324213757.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/微信截图_20180324214536.png","slug":"微信截图_20180324214536.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/微信截图_20180324214754.png","slug":"微信截图_20180324214754.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0},{"_id":"source/_posts/Git使用手册/微信截图_20180324215326.png","slug":"微信截图_20180324215326.png","post":"cjkbcbg830005v8w0zv6fsxhz","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjkbcbg3b0000v8w02iuchfr4","category_id":"cjkbcbg3r0001v8w0fkzt556e","_id":"cjkbcbg3r0004v8w0l1rwwrqf"},{"post_id":"cjkbcbg830007v8w0cpx82ibx","category_id":"cjkbcbg3r0001v8w0fkzt556e","_id":"cjkbcbg83000gv8w04wwputcg"},{"post_id":"cjkbcbg830005v8w0zv6fsxhz","category_id":"cjkbcbg830009v8w0b2zyjib6","_id":"cjkbcbg8j000mv8w05x2ac6q7"},{"post_id":"cjkbcbg83000bv8w06o58b7vj","category_id":"cjkbcbg83000hv8w0towuj6x5","_id":"cjkbcbg8j000rv8w0f7il1ibm"},{"post_id":"cjkbcbg8j000pv8w07oyuzhwa","category_id":"cjkbcbg8j000nv8w0mpvrtcfw","_id":"cjkbcbg8j000vv8w0lo5j3dsc"},{"post_id":"cjkbcbg83000ev8w0357bqlz0","category_id":"cjkbcbg8j000nv8w0mpvrtcfw","_id":"cjkbcbg8j000yv8w0a87u56ke"},{"post_id":"cjkbcbg83000fv8w0mfy899w0","category_id":"cjkbcbg8j000sv8w0fx2tot6r","_id":"cjkbcbg8j0011v8w05tbekvr0"},{"post_id":"cjkbcbg8j000kv8w018dbfxbp","category_id":"cjkbcbg8j000nv8w0mpvrtcfw","_id":"cjkbcbg8j0014v8w0bez346go"},{"post_id":"cjkbcbg8j000lv8w0a3m68xhp","category_id":"cjkbcbg8j0010v8w03wy2o2tl","_id":"cjkbcbg8j0017v8w0y5rlwujz"}],"PostTag":[{"post_id":"cjkbcbg3b0000v8w02iuchfr4","tag_id":"cjkbcbg3r0002v8w06hw4l3yz","_id":"cjkbcbg3r0003v8w09z48kb8y"},{"post_id":"cjkbcbg830007v8w0cpx82ibx","tag_id":"cjkbcbg3r0002v8w06hw4l3yz","_id":"cjkbcbg83000dv8w069qu27xt"},{"post_id":"cjkbcbg830005v8w0zv6fsxhz","tag_id":"cjkbcbg83000av8w069p2cmr4","_id":"cjkbcbg83000jv8w0690mwz89"},{"post_id":"cjkbcbg83000bv8w06o58b7vj","tag_id":"cjkbcbg83000iv8w0rbmob6ha","_id":"cjkbcbg8j000qv8w0iry5fghx"},{"post_id":"cjkbcbg83000ev8w0357bqlz0","tag_id":"cjkbcbg8j000ov8w0h53sagm9","_id":"cjkbcbg8j000uv8w058b9svp1"},{"post_id":"cjkbcbg83000fv8w0mfy899w0","tag_id":"cjkbcbg8j000tv8w0yhk5ks8k","_id":"cjkbcbg8j000zv8w0fni6s80k"},{"post_id":"cjkbcbg8j000kv8w018dbfxbp","tag_id":"cjkbcbg8j000xv8w0vvcn14jg","_id":"cjkbcbg8j0013v8w0ytcrmwid"},{"post_id":"cjkbcbg8j000lv8w0a3m68xhp","tag_id":"cjkbcbg8j0012v8w0skj8jk0z","_id":"cjkbcbg8j0016v8w0hxgyesjt"},{"post_id":"cjkbcbg8j000pv8w07oyuzhwa","tag_id":"cjkbcbg8j0015v8w0vd8eufdm","_id":"cjkbcbg8j0018v8w093uf12b3"}],"Tag":[{"name":"集合源码","_id":"cjkbcbg3r0002v8w06hw4l3yz"},{"name":"GIT","_id":"cjkbcbg83000av8w069p2cmr4"},{"name":"Nginx","_id":"cjkbcbg83000iv8w0rbmob6ha"},{"name":"诺兰","_id":"cjkbcbg8j000ov8w0h53sagm9"},{"name":"面试总结","_id":"cjkbcbg8j000tv8w0yhk5ks8k"},{"name":"科恩兄弟","_id":"cjkbcbg8j000xv8w0vvcn14jg"},{"name":"理查德道金斯","_id":"cjkbcbg8j0012v8w0skj8jk0z"},{"name":"史蒂文·斯皮尔伯格","_id":"cjkbcbg8j0015v8w0vd8eufdm"}]}}